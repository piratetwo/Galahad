#  Main body of the installation makefile for the ULS GALAHAD package

#  N. Gould, D. Orban and Ph. L. Toint.
#  This version: 17 VI 2009

SHELL = /bin/$(BINSHELL)

#  compiler flags

FFLAGS    = $(BASIC) $(OPTIMIZATION) $(DEBUG) $(MODULES) $(F90) $(USUAL)
FFLAGSS   = $(BASIC) $(OPTIMIZATION) $(DEBUG) $(MODULES) $(F90) $(SPECIAL)
FFLAGSN   = $(BASIC) $(NOOPTIMIZATION) $(DEBUG) $(MODULES) $(F90)
FFLAGS77  = $(BASIC) $(OPTIMIZATION) $(DEBUG) $(MODULES) $(F77) $(USUAL)
FFLAGS77S = $(BASIC) $(OPTIMIZATION) $(DEBUG) $(MODULES) $(F77) $(SPECIAL)
FFLAGSOMP = $(BASIC) $(OPTIMIZATION) $(DEBUG) $(MODULES) $(F90) $(USUAL) $(OPENMP)
FFLAGSNOMP = $(BASIC) $(NOOPTIMIZATION) $(DEBUG) $(MODULES) $(F90) $(OPENMP)
RUNFFLAGS =          $(OPTIMIZATION) $(DEBUG) $(MODULES)
RUNFFLAGS =          $(OPTIMIZATION) $(DEBUG) $(MODULES)
RUNFFLAGSOMP =       $(OPTIMIZATION) $(DEBUG) $(MODULES) $(OPENMP)

#  names of random libraries

LG  = $(OBJ)/libgalahad.a
LGS = $(OBJS)/libgalahad.a
LGD = $(OBJD)/libgalahad.a

BLG  = $(OBJ)/libgalahad_blas.a
BLGS = $(OBJS)/libgalahad_blas.a
BLGD = $(OBJD)/libgalahad_blas.a

LLG  = $(OBJ)/libgalahad_lapack.a
LLGS = $(OBJS)/libgalahad_lapack.a
LLGD = $(OBJD)/libgalahad_lapack.a

HLG  = $(OBJ)/libgalahad_hsl.a
HLGS = $(OBJS)/libgalahad_hsl.a
HLGD = $(OBJD)/libgalahad_hsl.a

MLG  = $(OBJ)/libgalahad_metis.a
MLGS = $(OBJS)/libgalahad_metis.a
MLGD = $(OBJD)/libgalahad_metis.a

PLG  = $(OBJ)/libgalahad_problem.a
PLGS = $(OBJS)/libgalahad_problem.a
PLGD = $(OBJD)/libgalahad_problem.a

#  Libraries used

LIBS = -lgalahad $(HSL) $(SPRAL) $(PARDISO) $(WSMP) $(METIS) $(LAPACK) $(BLAS)
PLIBS = $(LIBS) -lgalahad_problem

#  remove out-of-core direct-access files

RMOOC = $(RM) factor_integer_ooc factor_real_ooc \
              work_indefinite_ooc work_real_ooc

#  Archive manipulation strings

ARR = $(AR) $(ARREPFLAGS) $(LG)
RMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $(LG)
RMOBFILE = $(GALAHAD)/bin/rmobfile $(RM) $(OBJ)

BARR = $(AR) $(ARREPFLAGS) $(BLG)
BRMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $(BLG)

LARR = $(AR) $(ARREPFLAGS) $(LLG)
LRMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $(LLG)

HARR = $(AR) $(ARREPFLAGS) $(HLG)
HRMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $(HLG)

MARR = $(AR) $(ARREPFLAGS) $(MLG)
MRMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $(MLG)

PARR = $(AR) $(ARREPFLAGS) $(PLG)
PRMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $(PLG)

#  sed scripts

LSEDS = $(GALAHAD)/seds/$(LINEARSOLVER).sed

#  compilation agenda

ULSS = basics gls ma48v3 pardiso symbols \
       space string specfile sort $(LGS)(uls.o)
ULSD = basics gls ma48v3 pardiso symbols \
       space string specfile sort $(LGD)(uls.o)

ULSSS = $(ULSS) $(OBJS)/ulss.o
ULSST = $(ULSS) $(OBJS)/ulst.o
ULSDS = $(ULSD) $(OBJD)/ulss.o
ULSDT = $(ULSD) $(OBJD)/ulst.o

RULSSS = $(OBJS)/ulss.o -L$(OBJS) $(LIBS)
RULSST = $(OBJS)/ulst.o -L$(OBJS) $(LIBS)
RULSDS = $(OBJD)/ulss.o -L$(OBJD) $(LIBS)
RULSDT = $(OBJD)/ulst.o -L$(OBJD) $(LIBS)

SUCC = precision version) compiled successfully
SUCC_CUTER = precision version) for CUTEr compiled successfully

#  main compilations and runs

all: uls
test: test_uls
test_nocutest: test_uls
test_spec: test_uls_spec

# uls

uls_silent: uls_silent_$(PRECIS)
uls_silent_single: $(ULSS)
uls_silent_double: $(ULSD)

uls: uls_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: ULS ($(PRECIS) $(SUCC)"
uls_single: $(ULSS)
	$(RANLIB) $(LGS)
uls_double: $(ULSD)
	$(RANLIB) $(LGD)

ulssrunall: ulsss ulsst
ulsdrunall: ulsds ulsdt
ulsrunall: ulsdrunall ulssrunall

test_uls: test_uls_$(PRECIS)
test_uls_single: ulsst
	echo " Tests for uls complete"
test_uls_double: ulsdt
	echo " Tests for uls complete"

test_uls_spec: test_uls_spec_$(PRECIS)
test_uls_spec_single: ulsss
test_uls_spec_double: ulsds

#  other galahad packages

basicz:
	( cd ../general ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            basicz_silent PRECIS=$(PRECIS) PWD=$(PWD)/../general )
basics:
	( cd ../general ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            basics_silent PRECIS=$(PRECIS) PWD=$(PWD)/../general )
symbols:
	( cd ../general ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            symbols.o PRECIS=$(PRECIS) PWD=$(PWD)/../general )
space:
	( cd ../general ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            space.o PRECIS=$(PRECIS) PWD=$(PWD)/../general )
string:
	( cd ../string ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            string.o PRECIS=$(PRECIS) PWD=$(PWD)/../string )
specfile:
	( cd ../spec ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            specfile.o PRECIS=$(PRECIS) PWD=$(PWD)/../spec )
sort:
	( cd ../general ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            sort.o PRECIS=$(PRECIS) PWD=$(PWD)/../general )
gls:
	( cd ../gls ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            gls_silent PRECIS=$(PRECIS) PWD=$(PWD)/../gls )

#  hsl packages

ma48v3:
	( cd ../non-free/ma48 ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            ma48v3_silent PRECIS=$(PRECIS) PWD=$(PWD)/../non-free/ma48 )

pardiso:
	( cd ../dum ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            pardiso_silent PRECIS=$(PRECIS) PWD=$(PWD)/../dum )

# run spec-sheet example tests

ulsds: $(ULSDS)
	cd ../uls ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_uls $(RULSDS)
	cd ../uls ; $(RMOOC)
#	- ../uls//run_uls < ../uls/ulss.data
	- ../uls//run_uls < ../uls/ulss.data >& ../uls/ulsds.output
	cat ../uls/ulsds.output
	rm ../uls/run_uls

ulsdt: $(ULSDT)
	echo " Exhaustive test of subroutine interface to uls"
	cd ../uls ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_uls $(RULSDT)
	cd ../uls ; $(RMOOC)
#	- ../uls/run_uls
	- ../uls/run_uls  >& ../uls/ulsdt.output
	cat ../uls/ulsdt.output
	rm ../uls/run_uls

ulsss: $(ULSSS)
	cd ../uls ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_uls $(RULSSS)
	cd ../uls ; $(RMOOC)
#	- ../uls/run_uls < ../uls/ulss.data
	- ../uls/run_uls < ../uls/ulss.data >& ../uls/ulss.output
	cat ../uls/ulss.output
	rm ../uls/run_uls

ulsst: $(ULSST)
	echo " Exhaustive test of subroutine interface to uls"
	cd ../uls ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_uls $(RULSST)
	cd ../uls ; $(RMOOC)
#	- ../uls/run_uls < ../uls/ulss.data
	- ../uls/run_uls >& ../uls/ulst.output
	cat ../uls/ulst.output
	rm ../uls/run_uls

#  individual compilations

uls.o: $(LG)(uls.o)

$(LG)(uls.o): ../uls/uls.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "uls  "
	$(SED) -f $(SEDS) ../uls/uls.f90 > $(OBJ)/uls1.f90
	$(SED) "s/^.$(NOT64)/     /" $(OBJ)/uls1.f90 > $(OBJ)/uls.f90
	cd $(OBJ) ; $(FORTRAN) -o uls.o $(FFLAGSOMP) uls.f90 \
                 || ( printf ' %-26s' "=> Disabling optimization " ; \
                    $(FORTRAN) -o uls.o $(FFLAGSNOMP) uls.f90 )
	cd $(OBJ) ; $(ARR) uls.o ; $(RM) uls.f90 uls1.f90 uls.o
	$(RMARFILE) sbls.o
	$(RMARFILE) cro.o
	$(RMARFILE) fdc.o
	$(RMOBFILE) ulss.o
	$(RMOBFILE) ulst.o
	$(MVMODS)
	@printf '[ OK ]\n'

# others

#  test decks

ulss.o: $(OBJ)/ulss.o

$(OBJ)/ulss.o: ../uls/ulss.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "ulss  "
	$(SED) -f $(SEDS) ../uls/ulss.f90 > $(OBJ)/ulss.f90
	cd $(OBJ) ; $(FORTRAN) -o ulss.o $(FFLAGS) ulss.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

ulst.o: $(OBJ)/ulst.o

$(OBJ)/ulst.o: ../uls/ulst.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "ulst  "
	$(SED) -f $(SEDS) ../uls/ulst.f90 > $(OBJ)/ulst.f90
	cd $(OBJ) ; $(FORTRAN) -o ulst.o $(FFLAGSS) ulst.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

#  book keeping

clean:
	@printf ' %-9s\t\t' "Cleaning"
	$(RM) $(LGS) $(LGD) $(OBJ)/uls*.o
	@printf '[ OK ]\n'

cleanall:
	@printf ' %-14s\t\t' "Removing all $(PRECIS) precision object and module files"
	$(RM) $(OBJ)/* $(MOD)/*
	@printf '[ OK ]\n'

rmuls:
	@printf ' %-9s %-15s\t\t' "Removing" "uls from archive "
	$(RMARFILE) uls.o
	@printf '[ OK ]\n'
