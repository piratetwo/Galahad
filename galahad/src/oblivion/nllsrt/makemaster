#  Main body of the installation makefile for the GALAHAD NLLSRT package

#  N. Gould, D. Orban, M. Porcelli and Ph. L. Toint.
#  This version: 20 VI 2008

SHELL = /bin/$(BINSHELL)

#  compiler flags

FFLAGS    = $(BASIC) $(OPTIMIZATION) $(DEBUG) $(MODULES) $(F90) $(USUAL)
FFLAGSS   = $(BASIC) $(OPTIMIZATION) $(DEBUG) $(MODULES) $(F90) $(SPECIAL)
FFLAGSN   = $(BASIC) $(NOOPTIMIZATION) $(DEBUG) $(MODULES) $(F90)
FFLAGS77  = $(BASIC) $(OPTIMIZATION) $(DEBUG) $(MODULES) $(F77) $(USUAL)
FFLAGS77S = $(BASIC) $(OPTIMIZATION) $(DEBUG) $(MODULES) $(F77) $(SPECIAL)
RUNFFLAGS =          $(OPTIMIZATION) $(DEBUG) $(MODULES)

#  names of random libraries

LG  = $(OBJ)/libgalahad.a
LGS = $(OBJS)/libgalahad.a
LGD = $(OBJD)/libgalahad.a

BLG  = $(OBJ)/libgalahad_blas.a
BLGS = $(OBJS)/libgalahad_blas.a
BLGD = $(OBJD)/libgalahad_blas.a

LLG  = $(OBJ)/libgalahad_lapack.a
LLGS = $(OBJS)/libgalahad_lapack.a
LLGD = $(OBJD)/libgalahad_lapack.a

HLG  = $(OBJ)/libgalahad_hsl.a
HLGS = $(OBJS)/libgalahad_hsl.a
HLGD = $(OBJD)/libgalahad_hsl.a

MLG  = $(OBJ)/libgalahad_metis.a
MLGS = $(OBJS)/libgalahad_metis.a
MLGD = $(OBJD)/libgalahad_metis.a

#  Libraries used

LIBS = -lgalahad $(HSL) $(SPRAL) $(PARDISO) $(WSMP) $(METIS) $(LAPACK) $(BLAS)

#  Archive manipulation strings

ARR = $(AR) $(ARREPFLAGS) $(LG)
RMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $(LG)
RMOBFILE = $(GALAHAD)/bin/rmobfile $(RM) $(OBJ)

BARR = $(AR) $(ARREPFLAGS) $(BLG)
BRMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $(BLG)

LARR = $(AR) $(ARREPFLAGS) $(LLG)
LRMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $(LLG)

HARR = $(AR) $(ARREPFLAGS) $(HLG)
HRMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $(HLG)

MARR = $(AR) $(ARREPFLAGS) $(MLG)
MRMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $MHLG)

#  sed scripts

LSEDS = $(GALAHAD)/seds/$(LINEARSOLVER).sed
LPSEDS = $(GALAHAD)/seds/$(LINEARSOLVER)_precon.sed

#  compilation agenda

SNLLSRT = lsrt $(LGS)(nllsrt.o)
DNLLSRT = lsrt $(LGD)(nllsrt.o)

SRUNNLLSRT = copyright $(LGS)(nllsrtma.o)
DRUNNLLSRT = copyright $(LGD)(nllsrtma.o)

NLLSRTOBJECTSS_CUTEST = $(SNLLSRT) $(SRUNNLLSRT)
NLLSRTOBJECTSD_CUTEST = $(DNLLSRT) $(DRUNNLLSRT)

OBJECTSS_CUTEST = $(NLLSRTOBJECTSS_CUTEST)
OBJECTSD_CUTEST = $(NLLSRTOBJECTSD_CUTEST)

NLLSRTDS = $(DNLLSRT) $(OBJD)/nllsrts.o
NLLSRTDT = $(DNLLSRT) $(OBJD)/nllsrtt.o
NLLSRTSS = $(SNLLSRT) $(OBJS)/nllsrts.o
NLLSRTST = $(SNLLSRT) $(OBJS)/nllsrtt.o

RNLLSRTDS = $(OBJD)/nllsrts.o -L$(OBJD) $(LIBS)
RNLLSRTDT = $(OBJD)/nllsrtt.o -L$(OBJD) $(LIBS)
RNLLSRTSS = $(OBJS)/nllsrts.o -L$(OBJS) $(LIBS)
RNLLSRTST = $(OBJS)/nllsrtt.o -L$(OBJS) $(LIBS)

SUCC = precision version) compiled successfully
SUCC_CUTEST = precision version) for CUTEst compiled successfully

#  main compilations and runs

all: nllsrt_cutest
all_nllsrt: nllsrt_cutest
test: test_nllsrt
test_nocutest: test_nllsrt_nocutest

# nllsrt

nllsrt_cutest: nllsrt_cutest_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: NLLSRT ($(PRECIS) $(SUCC_CUTEST)"
nllsrt_cutest_single: $(NLLSRTOBJECTSS_CUTEST)
	$(RANLIB) $(LGS)
nllsrt_cutest_double: $(NLLSRTOBJECTSD_CUTEST)
	$(RANLIB) $(LGD)

nllsrt_silent: nllsrt_$(PRECIS)
nllsrt: nllsrt_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: NLLSRT ($(PRECIS) $(SUCC)"
nllsrt_single: $(NLLSRTOBJECTSS)
	$(RANLIB) $(LGS)
nllsrt_double: $(NLLSRTOBJECTSD)
	$(RANLIB) $(LGD)

nllsrtsrunall: nllsrtss nllsrtst
nllsrtdrunall: nllsrtds nllsrtdt
nllsrtrunall: nllsrtdrunall nllsrtsrunall

test_nllsrt: test_nllsrt_$(PRECIS)

test_nllsrt_single: nllsrtst $(SRUNNLLSRT)
	echo ""
	echo " Testing CUTEst interface to nllsrt"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) nllsrt -s QPBAND
	echo ""
	echo " Tests for nllsrt complete"

test_nllsrt_double: nllsrtdt $(DRUNNLLSRT)
	echo ""
	echo " Testing CUTEst interface to nllsrt"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) nllsrt QPBAND
	echo ""
	echo " Tests for nllsrt complete"

test_nllsrt_nocutest: test_nllsrt_nocutest_$(PRECIS)

test_nllsrt_nocutest_single: nllsrtst
	echo ""
	echo " Tests for nllsrt complete"

test_nllsrt_nocutest_double: nllsrtdt
	echo ""
	echo " Tests for nllsrt complete"

#  basic packages

lsrt:
	( cd ../../lsrt ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            lsrt_silent PRECIS=$(PRECIS) PWD=$(PWD)/../../lsrt )
cutest_functions:
	( cd ../../auxiliary ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            cutest_functions_silent PRECIS=$(PRECIS) \
            PWD=$(PWD)/../../auxiliary )
copyright:
	( cd ../../general ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            copyright.o PRECIS=$(PRECIS) PWD=$(PWD)/../../general )

# run spec-sheet example tests

nllsrtss: $(NLLSRTSS)
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_nllsrt $(RNLLSRTSS)
	- ./run_nllsrt >& nllsrts.output
	cat nllsrts.output
	rm ./run_nllsrt

nllsrtst: $(NLLSRTST)
	echo " Exhaustive test of subroutine interface to nllsrt"
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_nllsrt $(RNLLSRTST)
	- ./run_nllsrt >& nllsrtt.output
	cat nllsrtt.output
	rm ./run_nllsrt

nllsrtds: $(NLLSRTDS)
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_nllsrt $(RNLLSRTDS)
	- ./run_nllsrt >& nllsrtds.output
	cat nllsrtds.output
	rm ./run_nllsrt

nllsrtdt: $(NLLSRTDT)
	echo " Exhaustive test of subroutine interface to nllsrt"
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_nllsrt $(RNLLSRTDT)
	- ./run_nllsrt >& nllsrtdt.output
	cat nllsrtdt.output
	rm ./run_nllsrt

#  Substantial GALAHAD packages

nllsrt.o: $(LG)(nllsrt.o)

$(LG)(nllsrt.o): ../nllsrt/nllsrt.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "nllsrt   "
	$(SED) -f $(SEDS) ../nllsrt/nllsrt.f90 > $(OBJ)/nllsrt1.f90
	$(SED) -f $(LSEDS) $(OBJ)/nllsrt1.f90 > $(OBJ)/nllsrt2.f90
	$(SED) -f $(LPSEDS) $(OBJ)/nllsrt2.f90 > $(OBJ)/nllsrt3.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/nllsrt3.f90 > $(OBJ)/nllsrt.f90
	cd $(OBJ); $(FORTRAN) -o nllsrt.o $(FFLAGSS) nllsrt.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o nllsrt.o $(FFLAGSN) nllsrt.f90 )
	cd $(OBJ); $(ARR) nllsrt.o ; $(RM) nllsrt.f90 nllsrt1.f90 nllsrt2.f90 \
                                          nllsrt3.f90 nllsrt.o
	$(RMARFILE) nllsrtma.o
	$(RMOBFILE) nllsrts.o
	$(RMOBFILE) nllsrtt.o
#	$(MVMODS)
	@printf '[ OK ]\n'

# CUTEst/AMPL interfaces

nllsrtma.o: $(LG)(nllsrtma.o)

$(LG)(nllsrtma.o): ../nllsrt/nllsrtma.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "nllsrtma   "
	$(SED) -f $(SEDS) ../nllsrt/nllsrtma.f90 > $(OBJ)/nllsrtma1.f90
	$(SED) -f $(LSEDS) $(OBJ)/nllsrtma1.f90 > $(OBJ)/nllsrtma2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/nllsrtma2.f90 > $(OBJ)/nllsrtma.f90
	cd $(OBJ); $(FORTRAN) -o nllsrtma.o $(FFLAGSS) nllsrtma.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o nllsrtma.o $(FFLAGSN) nllsrtma.f90 )
	cd $(OBJ); $(RM) nllsrtma.f90 nllsrtma1.f90 nllsrtma2.f90
	$(RMOBFILE) runnllsrt_sif.o
#	$(MVMODS)
	@printf '[ OK ]\n'

#  main programs

runnllsrt_sif.o: $(OBJ)/runnllsrt_sif.o

$(OBJ)/runnllsrt_sif.o: ../nllsrt/runnllsrt_sif.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "runnllsrt_sif"
	$(SED) -f $(SEDS) ../nllsrt/runnllsrt_sif.f90 > $(OBJ)/runnllsrt_sif.f90
	cd $(OBJ); $(FORTRAN) -o runnllsrt_sif.o $(FFLAGSS) runnllsrt_sif.f90
	rm $(OBJ)/runnllsrt_sif.f90
	@printf '[ OK ]\n'

#  test decks

nllsrts.o: $(OBJ)/nllsrts.o

$(OBJ)/nllsrts.o: ../nllsrt/nllsrts.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "nllsrts  "
	$(SED) -f $(SEDS) ../nllsrt/nllsrts.f90 > $(OBJ)/nllsrts1.f90
	$(SED) -f $(LSEDS) $(OBJ)/nllsrts1.f90 > $(OBJ)/nllsrts.f90
	cd $(OBJ) ; $(FORTRAN) -o nllsrts.o $(FFLAGS) nllsrts.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

nllsrtt.o: $(OBJ)/nllsrtt.o

$(OBJ)/nllsrtt.o: ../nllsrt/nllsrtt.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "nllsrtt  "
	$(SED) -f $(SEDS) ../nllsrt/nllsrtt.f90 > $(OBJ)/nllsrtt1.f90
	$(SED) -f $(LSEDS) $(OBJ)/nllsrtt1.f90 > $(OBJ)/nllsrtt.f90
	cd $(OBJ) ; $(FORTRAN) -o nllsrtt.o $(FFLAGSS) nllsrtt.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

#  book keeping

clean:
	@printf ' %-9s\t\t' "Cleaning"
	$(RM) $(LG) $(OBJ)/nllsrtt.o
	@printf '[ OK ]\n'

cleanall:
	@printf ' %-14s\t\t' "Removing all $(PRECIS) precision object and module files"
	$(RM) $(OBJ)/* $(MOD)/*
	@printf '[ OK ]\n'

rmnllsrt:
	@printf ' %-9s %-15s\t\t' "Removing" "nllsrt from archive "
	$(RMARFILE) nllsrt.o
	@printf '[ OK ]\n'

