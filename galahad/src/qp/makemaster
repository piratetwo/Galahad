#  Main body of the installation makefile for the GALAHAD QP packages

#  N. Gould, D. Orban and Ph. L. Toint
#  This version: 30 I 2015

SHELL = /bin/$(BINSHELL)

#  compiler flags

FFLAGS        = $(BASIC) $(OPTIMIZATION) $(DEBUG) $(MODULES) $(F90) $(USUAL)
FFLAGSS       = $(BASIC) $(OPTIMIZATION) $(DEBUG) $(MODULES) $(F90) $(SPECIAL)
FFLAGSN       = $(BASIC) $(NOOPTIMIZATION) $(DEBUG) $(MODULES) $(F90)
FFLAGS77      = $(BASIC) $(OPTIMIZATION) $(DEBUG) $(MODULES) $(F77) $(USUAL)
FFLAGS77S     = $(BASIC) $(OPTIMIZATION) $(DEBUG) $(MODULES) $(F77) $(SPECIAL)
FFLAGSOMP     = $(BASIC) $(OPTIMIZATION) $(DEBUG) $(MODULES) $(F90) $(USUAL) \
                $(OPENMP)
FFLAGSNOMP    = $(BASIC) $(NOOPTIMIZATION) $(DEBUG) $(MODULES) $(F90) $(OPENMP)
RUNFFLAGS     =          $(OPTIMIZATION) $(DEBUG) $(MODULES)
RUNFFLAGSCUDA =          $(OPTIMIZATION)          $(MODULES)
RUNFFLAGSOMP  =          $(OPTIMIZATION) $(DEBUG) $(MODULES) $(OPENMP)

#  names of random libraries

LG  = $(OBJ)/libgalahad.a
LGS = $(OBJS)/libgalahad.a
LGD = $(OBJD)/libgalahad.a

BLG  = $(OBJ)/libgalahad_blas.a
BLGS = $(OBJS)/libgalahad_blas.a
BLGD = $(OBJD)/libgalahad_blas.a

LLG  = $(OBJ)/libgalahad_lapack.a
LLGS = $(OBJS)/libgalahad_lapack.a
LLGD = $(OBJD)/libgalahad_lapack.a

HLG  = $(OBJ)/libgalahad_hsl.a
HLGS = $(OBJS)/libgalahad_hsl.a
HLGD = $(OBJD)/libgalahad_hsl.a

MLG  = $(OBJ)/libgalahad_metis.a
MLGS = $(OBJS)/libgalahad_metis.a
MLGD = $(OBJD)/libgalahad_metis.a

#  Libraries used

LIBS = -lgalahad $(HSL) $(SPRAL) $(PARDISO) $(WSMP) $(METIS) $(LAPACK) $(BLAS)

#  remove out-of-core direct-access files

RMOOC = $(RM) factor_integer_ooc factor_real_ooc \
              work_indefinite_ooc work_real_ooc

#  Archive manipulation strings

ARR = $(AR) $(ARREPFLAGS) $(LG)
RMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $(LG)
RMOBFILE = $(GALAHAD)/bin/rmobfile $(RM) $(OBJ)

BARR = $(AR) $(ARREPFLAGS) $(BLG)
BRMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $(BLG)

LARR = $(AR) $(ARREPFLAGS) $(LLG)
LRMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $(LLG)

HARR = $(AR) $(ARREPFLAGS) $(HLG)
HRMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $(HLG)

MARR = $(AR) $(ARREPFLAGS) $(MLG)
MRMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $(MLG)

#  sed scripts

LSEDS = $(GALAHAD)/seds/$(LINEARSOLVER).sed
LPSEDS = $(GALAHAD)/seds/$(LINEARSOLVER)_precon.sed

#  compilation agenda

#  individual package objects

BASICS = basics linearsolver ulinearsolver
QPT_single = lmt $(LGS)(qpt.o)
QPT_double = lmt $(LGD)(qpt.o)
QPP_single = $(QPT_single) lms $(LGS)(qpp.o)
QPP_double = $(QPT_double) lms $(LGD)(qpp.o)
PRESOLVE_single = $(QPT_single) $(LGS)(presolve.o)
PRESOLVE_double = $(QPT_double) $(LGD)(presolve.o)
CRO_single = basics scu sbls uls lms ir mop $(LGS)(cro.o)
CRO_double = basics scu sbls uls lms ir mop $(LGD)(cro.o)
QPD_single = $(CRO_single) sbls gltr nlpt $(QPP_single) fdc fit lpqp \
             $(PRESOLVE_single) $(LGS)(qpd.o)
QPD_double = $(CRO_double) sbls gltr nlpt $(QPP_double) fdc fit lpqp \
             $(PRESOLVE_double) $(LGD)(qpd.o)
EQP_single = $(QPD_single) $(LGS)(eqp.o)
EQP_double = $(QPD_double) $(LGD)(eqp.o)
QPA_single = $(QPD_single) $(LGS)(qpa.o)
QPA_double = $(QPD_double) $(LGD)(qpa.o)
LSQP_single = $(QPD_single) $(LGS)(lsqp.o)
LSQP_double = $(QPD_double) $(LGD)(lsqp.o)
QPB_single = $(LSQP_single) $(LGS)(qpb.o)
QPB_double = $(LSQP_double) $(LGD)(qpb.o)
QPC_single = $(QPA_single) $(QPB_single) $(EQP_single) $(CQP_single) \
             $(QPD_single) $(LGS)(qpc.o)
QPC_double = $(QPA_double) $(QPB_double) $(EQP_double) $(CQP_double) \
             $(QPD_double) $(LGD)(qpc.o)
QPE_single = sbls $(LGS)(qpe.o)
QPE_double = sbls $(LGD)(qpe.o)
BQP_single = $(QPD_single) $(LGS)(bqp.o)
BQP_double = $(QPD_double) $(LGD)(bqp.o)
BQPB_single = $(QPD_single) $(LGS)(bqpb.o)
BQPB_double = $(QPD_double) $(LGD)(bqpb.o)
CQPS_single = $(BQP_single) $(BQPB_single) psls $(LGS)(cqps.o)
CQPS_double = $(BQP_double) $(BQPB_double) psls $(LGD)(cqps.o)
CQP_single = $(QPD_single) $(LGS)(rpd.o) $(LGS)(cqp.o)
CQP_double = $(QPD_double) $(LGD)(rpd.o) $(LGD)(cqp.o)
DQP_single = $(QPD_single) uls $(LGS)(rpd.o) $(LGS)(dqp.o)
DQP_double = $(QPD_double) uls $(LGD)(rpd.o) $(LGD)(dqp.o)
CCQP_single = $(CQP_single) $(DQP_single) $(LGS)(ccqp.o)
CCQP_double = $(CQP_double) $(DQP_double) $(LGD)(ccqp.o)
QP_single = $(QPC_single) $(DQP_single) $(CCQP_single) mop $(LGS)(qp.o)
QP_double = $(QPC_double) $(DQP_double) $(CCQP_double) mop $(LGD)(qp.o)
DLP_single = $(DQP_single) $(LGS)(dlp.o)
DLP_double = $(DQP_double) $(LGD)(dlp.o)
LPA_single = $(QPD_single) $(LGS)(rpd.o) la04 $(LGS)(lpa.o)
LPA_double = $(QPD_double) $(LGD)(rpd.o) la04 $(LGD)(lpa.o)
LPB_single = $(LSQP_single) $(LGS)(rpd.o) $(LGS)(lpb.o)
LPB_double = $(LSQP_double) $(LGD)(rpd.o) $(LGD)(lpb.o)
LLS_single = sbls $(LGS)(lls.o)
LLS_double = sbls $(LGD)(lls.o)
RPD_single = basics lms $(LGS)(rpd.o)
RPD_double = basics lms $(LGD)(rpd.o)
L1QP_single = $(CQP_single) $(DQP_single) $(DLP_single) $(LGS)(l1qp.o)
L1QP_double = $(CQP_double) $(DQP_double) $(DLP_double) $(LGD)(l1qp.o)

QPA_OBJECTS_single = $(BASICS) $(QPA_single)
QPA_OBJECTS_double = $(BASICS) $(QPA_double)
QPB_OBJECTS_single = $(BASICS) $(QPB_single)
QPB_OBJECTS_double = $(BASICS) $(QPB_double)
QPC_OBJECTS_single = $(BASICS) $(CRO_single) $(QPA_single) \
                     $(QPB_single) $(QPC_single)
QPC_OBJECTS_double = $(BASICS) $(CRO_double) $(QPA_double) \
                     $(QPB_double) $(QPC_double)
QPE_OBJECTS_single = $(BASICS) $(QPE_single)
QPE_OBJECTS_double = $(BASICS) $(QPE_double)
LSQP_OBJECTS_single = $(BASICS) $(LSQP_single)
LSQP_OBJECTS_double = $(BASICS) $(LSQP_double)
BQP_OBJECTS_single = $(BASICS) $(BQP_single)
BQP_OBJECTS_double = $(BASICS) $(BQP_double)
BQPB_OBJECTS_single = $(BASICS) $(BQPB_single)
BQPB_OBJECTS_double = $(BASICS) $(BQPB_double)
CQP_OBJECTS_single = $(BASICS) $(CQP_single)
CQP_OBJECTS_double = $(BASICS) $(CQP_double)
DQP_OBJECTS_single = $(BASICS) $(DQP_single)
DQP_OBJECTS_double = $(BASICS) $(DQP_double)
CCQP_OBJECTS_single = $(BASICS) $(CCQP_single)
CCQP_OBJECTS_double = $(BASICS) $(CCQP_double)
DLP_OBJECTS_single = $(BASICS) $(DLP_single)
DLP_OBJECTS_double = $(BASICS) $(DLP_double)
CQPS_OBJECTS_single = $(BASICS) $(CQPS_single)
CQPS_OBJECTS_double = $(BASICS) $(CQPS_double)
LPA_OBJECTS_single = $(BASICS) $(LPA_single)
LPA_OBJECTS_double = $(BASICS) $(LPA_double)
LPB_OBJECTS_single = $(BASICS) $(LPB_single)
LPB_OBJECTS_double = $(BASICS) $(LPB_double)
EQP_OBJECTS_single = $(BASICS) $(EQP_single)
EQP_OBJECTS_double = $(BASICS) $(EQP_double)
LLS_OBJECTS_single = $(BASICS) $(LLS_single)
LLS_OBJECTS_double = $(BASICS) $(LLS_double)
PRESOLVE_OBJECTS_single = basics $(PRESOLVE_single)
PRESOLVE_OBJECTS_double = basics $(PRESOLVE_double)
L1QP_OBJECTS_single = $(BASICS) $(L1QP_single)
L1QP_OBJECTS_double = $(BASICS) $(L1QP_double)

#  combined package objects

QP_OBJECTS_single = $(QPC_OBJECTS_single) $(DQP_single) $(QP_single) \
                    $(L1QP_OBJECTS_single) $(BQP_single) $(BQPB_single) \
                    $(LPA_single) $(LPB_single) $(DLP_single) \
                    $(CCQP_single)
QP_OBJECTS_double = $(QPC_OBJECTS_double) $(DQP_double) $(QP_double) \
                    $(L1QP_OBJECTS_double) $(BQP_double) $(BQPB_double) \
                    $(LPA_double) $(LPB_double) $(DLP_double) \
                    $(CCQP_double)
QP_OBJECTS_CURRENT_single = $(QP_OBJECTS_single)
QP_OBJECTS_CURRENT_double = $(QP_OBJECTS_double)

#  cutest/ampl interfaces

USE_single = $(LGS)(presolve.o) copyright $(LGS)(useqpa.o) $(LGS)(useqpb.o) \
             $(LGS)(useqpc.o) $(LGS)(useqp.o) $(LGS)(usepresolve.o) \
             $(RPD_single) $(LGS)(useeqp.o) $(LGS)(usecqp.o) \
             $(LGS)(uselpa.o) $(LGS)(uselpb.o) $(LGS)(usedlp.o) \
             $(LGS)(useccqp.o) $(LGS)(usel1qp.o) $(LGS)(usedqp.o) \
             $(LGS)(usebqp.o) $(LGS)(usebqpb.o) $(LGS)(useccqp.o)
USE_double = $(LGD)(presolve.o) copyright $(LGD)(useqpa.o) $(LGD)(useqpb.o) \
             $(LGD)(useqpc.o) $(LGD)(useqp.o) $(LGD)(usepresolve.o) \
             $(RPD_double) $(LGD)(useeqp.o) $(LGD)(usecqp.o) \
             $(LGD)(uselpa.o) $(LGD)(uselpb.o) $(LGD)(usedlp.o) \
             $(LGD)(useccqp.o) $(LGD)(usel1qp.o) $(LGD)(usedqp.o) \
             $(LGD)(usebqp.o) $(LGD)(usebqpb.o) $(LGD)(useccqp.o)
USE_CURRENT_single = $(USE_single)
USE_CURRENT_double = $(USE_double)

#  cutest/ampl interfaces with package objects

USE_OBJECTS_single = $(QP_OBJECTS_single) $(USE_single)
USE_OBJECTS_double = $(QP_OBJECTS_double) $(USE_double)
USE_OBJECTS_CURRENT_single = $(QP_OBJECTS_CURRENT_single) $(USE_CURRENT_single)
USE_OBJECTS_CURRENT_double = $(QP_OBJECTS_CURRENT_double) $(USE_CURRENT_double)

#  cutest interface subroutines

RUN_single = $(USE_single) $(OBJS)/runqpa_sif.o $(OBJS)/runqpb_sif.o \
             $(OBJS)/runqpc_sif.o $(OBJS)/runqp_sif.o \
             $(OBJS)/runpresolve_sif.o \
             $(OBJS)/runcqp_sif.o $(OBJS)/rundqp_sif.o $(OBJS)/runccqp_sif.o \
             $(OBJS)/runl1qp_sif.o $(OBJS)/runbqp_sif.o \
             $(OBJS)/runlpa_sif.o $(OBJS)/runlpb_sif.o $(OBJS)/rundlp_sif.o \
             $(OBJS)/runbqpb_sif.o $(OBJS)/runccqp_sif.o
RUN_double = $(USE_double) $(OBJD)/runqpa_sif.o $(OBJD)/runqpb_sif.o \
             $(OBJD)/runqpc_sif.o $(OBJD)/runqp_sif.o \
             $(OBJD)/runpresolve_sif.o \
             $(OBJD)/runcqp_sif.o $(OBJD)/runccqp_sif.o \
             $(OBJD)/runlpa_sif.o $(OBJD)/runlpb_sif.o $(OBJD)/rundlp_sif.o \
             $(OBJD)/runl1qp_sif.o $(OBJD)/rundlp_sif.o $(OBJD)/runbqp_sif.o \
             $(OBJD)/runbqpb_sif.o $(OBJD)/runccqp_sif.o

RUN_CURRENT_single = $(USE_CURRENT_single) $(RUN_single)
RUN_CURRENT_double = $(USE_CURRENT_double) $(RUN_double)
QPA_RUN_single = $(LGS)(presolve.o) copyright $(LGS)(useqpa.o) \
                 $(OBJS)/runqpa_sif.o
QPA_RUN_double = $(LGD)(presolve.o) copyright $(LGD)(useqpa.o) \
                 $(OBJD)/runqpa_sif.o
QPB_RUN_single = $(LGS)(presolve.o) copyright $(LGS)(useqpb.o) \
                 $(OBJS)/runqpb_sif.o
QPB_RUN_double = $(LGD)(presolve.o) copyright $(LGD)(useqpb.o) \
                 $(OBJD)/runqpb_sif.o
QPC_RUN_single = $(LGS)(presolve.o) copyright $(LGS)(useqpc.o) \
                 $(OBJS)/runqpc_sif.o
QPC_RUN_double = $(LGD)(presolve.o) copyright $(LGD)(useqpc.o) \
                 $(OBJD)/runqpc_sif.o
QPE_RUN_single = $(LGS)(useqpe.o) $(OBJS)/runqpe_sif.o
QPE_RUN_double = $(LGD)(useqpe.o) $(OBJD)/runqpe_sif.o
CQP_RUN_single = $(LGS)(presolve.o) copyright $(LGS)(usecqp.o) \
                 $(OBJS)/runcqp_sif.o
CQP_RUN_double = $(LGD)(presolve.o) copyright $(LGD)(usecqp.o) \
                 $(OBJD)/runcqp_sif.o
DQP_RUN_single = $(LGS)(presolve.o) copyright $(LGS)(usedqp.o) \
                 $(OBJS)/rundqp_sif.o
DQP_RUN_double = $(LGD)(presolve.o) copyright $(LGD)(usedqp.o) \
                 $(OBJD)/rundqp_sif.o
CCQP_RUN_single = $(LGS)(presolve.o) copyright $(LGS)(useccqp.o) \
                  $(OBJS)/runccqp_sif.o
CCQP_RUN_double = $(LGD)(presolve.o) copyright $(LGD)(useccqp.o) \
                  $(OBJD)/runccqp_sif.o
L1QP_RUN_single = $(LGS)(presolve.o) copyright $(LGS)(usel1qp.o) \
                  $(OBJS)/runl1qp_sif.o
L1QP_RUN_double = $(LGD)(presolve.o) copyright $(LGD)(usel1qp.o) \
                  $(OBJD)/runl1qp_sif.o
LPA_RUN_single = $(LGS)(presolve.o) copyright $(LGS)(uselpa.o) \
                 $(OBJS)/runlpa_sif.o
LPA_RUN_double = $(LGD)(presolve.o) copyright $(LGD)(uselpa.o) \
                 $(OBJD)/runlpa_sif.o
LPB_RUN_single = $(LGS)(presolve.o) copyright $(LGS)(uselpb.o) \
                 $(OBJS)/runlpb_sif.o
LPB_RUN_double = $(LGD)(presolve.o) copyright $(LGD)(uselpb.o) \
                 $(OBJD)/runlpb_sif.o
DLP_RUN_single = $(LGS)(presolve.o) copyright $(LGS)(usedlp.o) \
                 $(OBJS)/rundlp_sif.o
DLP_RUN_double = $(LGD)(presolve.o) copyright $(LGD)(usedlp.o) \
                 $(OBJD)/rundlp_sif.o
WARM_RUN_single = $(LGS)(presolve.o) copyright qp \
                  $(LGS)(usewarm.o) $(OBJS)/runwarm_sif.o
WARM_RUN_double = $(LGD)(presolve.o) copyright qp \
                  $(LGD)(usewarm.o) $(OBJD)/runwarm_sif.o
BQP_RUN_single = $(LGS)(usebqp.o) $(OBJS)/runbqp_sif.o
BQP_RUN_double = $(LGD)(usebqp.o) $(OBJD)/runbqp_sif.o
BQPB_RUN_single = $(LGS)(usebqpb.o) $(OBJS)/runbqpb_sif.o
BQPB_RUN_double = $(LGD)(usebqpb.o) $(OBJD)/runbqpb_sif.o
CQPS_RUN_single = $(LGS)(usecqp.o) $(OBJS)/runcqps_sif.o
CQPS_RUN_double = $(LGD)(usecqp.o) $(OBJD)/runcqps_sif.o
QP_RUN_single = copyright $(LGS)(useqp.o) $(OBJS)/runqp_sif.o
QP_RUN_double = copyright $(LGD)(useqp.o) $(OBJD)/runqp_sif.o
EQP_RUN_single = copyright $(LGS)(useeqp.o) $(OBJS)/runeqp_sif.o
EQP_RUN_double = copyright $(LGD)(useeqp.o) $(OBJD)/runeqp_sif.o
LLS_RUN_single = copyright $(LGS)(usells.o) $(OBJS)/runlls_sif.o
LLS_RUN_double = copyright $(LGD)(usells.o) $(OBJD)/runlls_sif.o
PRESOLVE_RUN_single = $(LGS)(usepresolve.o) $(OBJS)/runpresolve_sif.o
PRESOLVE_RUN_double = $(LGD)(usepresolve.o) $(OBJD)/runpresolve_sif.o

#  cutest interfaces with package objects

CUTEST_single = $(QP_OBJECTS_single) $(RUN_single)
CUTEST_double = $(QP_OBJECTS_double) $(RUN_double)
CUTEST_CURRENT_single = $(QP_OBJECTS_CURRENT_single) $(RUN_CURRENT_single)
CUTEST_CURRENT_double = $(QP_OBJECTS_CURRENT_double) $(RUN_CURRENT_double)

QPA_CUTEST_single = $(QPA_OBJECTS_single) $(QPA_RUN_single)
QPA_CUTEST_double = $(QPA_OBJECTS_double) $(QPA_RUN_double)
QPB_CUTEST_single = $(QPB_OBJECTS_single) $(QPB_RUN_single)
QPB_CUTEST_double = $(QPB_OBJECTS_double) $(QPB_RUN_double)
QPC_CUTEST_single = $(QPC_OBJECTS_single) $(QPC_RUN_single)
QPC_CUTEST_double = $(QPC_OBJECTS_double) $(QPC_RUN_double)
QPE_CUTEST_single = $(QPE_OBJECTS_single) $(LGS)(presolve.o) $(QPE_RUN_single)
QPE_CUTEST_double = $(QPE_OBJECTS_double) $(LGD)(presolve.o) $(QPE_RUN_double)
QP_CUTEST_single = $(QP_OBJECTS_single) $(QP_RUN_single)
QP_CUTEST_double = $(QP_OBJECTS_double) $(QP_RUN_double)
BQP_CUTEST_single = $(BQP_OBJECTS_single) $(BQP_RUN_single)
BQP_CUTEST_double = $(BQP_OBJECTS_double) $(BQP_RUN_double)
BQPB_CUTEST_single = $(BQPB_OBJECTS_single) $(BQPB_RUN_single)
BQPB_CUTEST_double = $(BQPB_OBJECTS_double) $(BQPB_RUN_double)
CQP_CUTEST_single = $(CQP_OBJECTS_single) $(CQP_RUN_single)
CQP_CUTEST_double = $(CQP_OBJECTS_double) $(CQP_RUN_double)
DQP_CUTEST_single = $(DQP_OBJECTS_single) $(DQP_RUN_single)
DQP_CUTEST_double = $(DQP_OBJECTS_double) $(DQP_RUN_double)
CCQP_CUTEST_single = $(CCQP_OBJECTS_single) $(CCQP_RUN_single)
CCQP_CUTEST_double = $(CCQP_OBJECTS_double) $(CCQP_RUN_double)
DLP_CUTEST_single = $(DLP_OBJECTS_single) $(DLP_RUN_single)
DLP_CUTEST_double = $(DLP_OBJECTS_double) $(DLP_RUN_double)
CQPS_CUTEST_single = $(CQPS_OBJECTS_single) $(CQPS_RUN_single)
CQPS_CUTEST_double = $(CQPS_OBJECTS_double) $(CQPS_RUN_double)
LPA_CUTEST_single = $(LPA_OBJECTS_single) $(LPA_RUN_single)
LPA_CUTEST_double = $(LPA_OBJECTS_double) $(LPA_RUN_double)
LPB_CUTEST_single = $(LPB_OBJECTS_single) $(LPB_RUN_single)
LPB_CUTEST_double = $(LPB_OBJECTS_double) $(LPB_RUN_double)
EQP_CUTEST_single = $(EQP_OBJECTS_single) $(EQP_RUN_single)
EQP_CUTEST_double = $(EQP_OBJECTS_double) $(EQP_RUN_double)
LLS_CUTEST_single = $(LLS_OBJECTS_single) $(LLS_RUN_single)
LLS_CUTEST_double = $(LLS_OBJECTS_double) $(LLS_RUN_double)
WARM_CUTEST_single = $(CQP_OBJECTS_single) $(DQP_OBJECTS_single) \
                     $(DLP_OBJECTS_single) $(WARM_RUN_single)
WARM_CUTEST_double = $(CQP_OBJECTS_double) $(DQP_OBJECTS_double) \
                     $(DLP_OBJECTS_double) $(WARM_RUN_double)
PRESOLVE_CUTEST_single = $(PRESOLVE_OBJECTS_single) $(PRESOLVE_RUN_single)
PRESOLVE_CUTEST_double = $(PRESOLVE_OBJECTS_double) $(PRESOLVE_RUN_double)
L1QP_CUTEST_single = $(L1QP_OBJECTS_single) $(L1QP_RUN_single)
L1QP_CUTEST_double = $(L1QP_OBJECTS_double) $(L1QP_RUN_double)

#  qplib interfaces subproutines

QPLIB_RUN_single = $(RPD_single) copyright $(OBJS)/inqpa.o $(OBJS)/inqpb.o \
                   $(OBJS)/inqpc.o $(OBJS)/incqp.o $(OBJS)/indqp.o \
                   $(OBJS)/inqp.o $(OBJS)/inl1qp.o $(OBJS)/inbqp.o \
                   $(OBJS)/inbqpb.o $(OBJS)/inccqp.o \
                   $(OBJS)/inlpa.o $(OBJS)/inlpb.o $(OBJS)/indlp.o
QPLIB_RUN_double = $(RPD_double) copyright $(OBJD)/inqpa.o $(OBJD)/inqpb.o \
                   $(OBJD)/inqpc.o $(OBJD)/incqp.o $(OBJD)/indqp.o \
                   $(OBJD)/inqp.o $(OBJD)/inl1qp.o $(OBJD)/inbqp.o \
                   $(OBJD)/inbqpb.o $(OBJD)/inccqp.o \
                   $(OBJD)/inlpa.o $(OBJD)/inlpb.o $(OBJD)/indlp.o
QPLIB_RUN_CURRENT_single = $(QPLIB_RUN_single) $(OBJS)/ineqp.o \
                           $(OBJS)/inlls.o
QPLIB_RUN_CURRENT_double = $(QPLIB_RUN_double) $(OBJD)/ineqp.o \
                           $(OBJD)/inlls.o
QPA_QPLIB_RUN_single = $(RPD_single) copyright $(OBJS)/inqpa.o
QPA_QPLIB_RUN_double = $(RPD_double) copyright $(OBJD)/inqpa.o
QPB_QPLIB_RUN_single = $(RPD_single) copyright $(OBJS)/inqpb.o
QPB_QPLIB_RUN_double = $(RPD_double) copyright $(OBJD)/inqpb.o
QPC_QPLIB_RUN_single = $(RPD_single) copyright $(OBJS)/inqpc.o
QPC_QPLIB_RUN_double = $(RPD_double) copyright $(OBJD)/inqpc.o
QP_QPLIB_RUN_single = $(RPD_single) copyright $(OBJS)/inqp.o
QP_QPLIB_RUN_double = $(RPD_double) copyright $(OBJD)/inqp.o
BQP_QPLIB_RUN_single = $(RPD_single) copyright $(OBJS)/inbqp.o
BQP_QPLIB_RUN_double = $(RPD_double) copyright $(OBJD)/inbqp.o
BQPB_QPLIB_RUN_single = $(RPD_single) copyright $(OBJS)/inbqpb.o
BQPB_QPLIB_RUN_double = $(RPD_double) copyright $(OBJD)/inbqpb.o
CQP_QPLIB_RUN_single = $(RPD_single) copyright $(OBJS)/incqp.o
CQP_QPLIB_RUN_double = $(RPD_double) copyright $(OBJD)/incqp.o
DQP_QPLIB_RUN_single = $(RPD_single) copyright $(OBJS)/indqp.o
DQP_QPLIB_RUN_double = $(RPD_double) copyright $(OBJD)/indqp.o
DLP_QPLIB_RUN_single = $(RPD_single) copyright $(OBJS)/indlp.o
DLP_QPLIB_RUN_double = $(RPD_double) copyright $(OBJD)/indlp.o
LPA_QPLIB_RUN_single = $(RPD_single) copyright $(OBJS)/inlpa.o
LPA_QPLIB_RUN_double = $(RPD_double) copyright $(OBJD)/inlpa.o
LPB_QPLIB_RUN_single = $(RPD_single) copyright $(OBJS)/inlpb.o
LPB_QPLIB_RUN_double = $(RPD_double) copyright $(OBJD)/inlpb.o

#  qplib interfaces with package objects

QPLIB_single = $(QP_OBJECTS_single) $(QPLIB_RUN_single)
QPLIB_double = $(QP_OBJECTS_double) $(QPLIB_RUN_double)
QPLIB_CURRENT_single = $(QP_OBJECTS_single) $(QPLIB_RUN_CURRENT_single)
QPLIB_CURRENT_double = $(QP_OBJECTS_double) $(QPLIB_RUN_CURRENT_double)

# everything

EVERYTHING_single = $(CUTEST_single) $(QPLIB_RUN_single)
EVERYTHING_double = $(CUTEST_double) $(QPLIB_RUN_double)
EVERYTHING_CURRENT_single = $(CUTEST_CURRENT_single) $(QPLIB_CURRENT_single)
EVERYTHING_CURRENT_double = $(CUTEST_CURRENT_double) $(QPLIB_CURRENT_double)

#  spec and test interfaces

CRODS = $(BASICS) $(CRO_double) $(OBJD)/cros.o
CRODT = $(BASICS) $(CRO_double) $(OBJD)/crot.o
CROSS = $(BASICS) $(CRO_single) $(OBJS)/cros.o
CROST = $(BASICS) $(CRO_single) $(OBJS)/crot.o

RCRODS = $(OBJD)/cros.o -L$(OBJD) $(LIBS)
RCRODT = $(OBJD)/crot.o -L$(OBJD) $(LIBS)
RCROSS = $(OBJS)/cros.o -L$(OBJS) $(LIBS)
RCROST = $(OBJS)/crot.o -L$(OBJS) $(LIBS)

QPADS = $(BASICS) $(QPA_double) $(OBJD)/qpas.o
QPADT = $(BASICS) $(QPA_double) $(OBJD)/qpat.o
QPASS = $(BASICS) $(QPA_single) $(OBJS)/qpas.o
QPAST = $(BASICS) $(QPA_single) $(OBJS)/qpat.o

RQPADS = $(OBJD)/qpas.o -L$(OBJD) $(LIBS)
RQPADT = $(OBJD)/qpat.o -L$(OBJD) $(LIBS)
RQPASS = $(OBJS)/qpas.o -L$(OBJS) $(LIBS)
RQPAST = $(OBJS)/qpat.o -L$(OBJS) $(LIBS)

QPBDS = $(BASICS) $(QPB_double) $(OBJD)/qpbs.o
QPBDS2 = $(BASICS) $(QPB_double) $(OBJD)/qpbs2.o
QPBDT = $(BASICS) $(QPB_double) $(OBJD)/qpbt.o
QPBSS = $(BASICS) $(QPB_single) $(OBJS)/qpbs.o
QPBST = $(BASICS) $(QPB_single) $(OBJS)/qpbt.o

RQPBDS = $(OBJD)/qpbs.o -L$(OBJD) $(LIBS)
RQPBDS2 = $(OBJD)/qpbs2.o -L$(OBJD) $(LIBS)
RQPBDT = $(OBJD)/qpbt.o -L$(OBJD) $(LIBS)
RQPBSS = $(OBJS)/qpbs.o -L$(OBJS) $(LIBS)
RQPBST = $(OBJS)/qpbt.o -L$(OBJS) $(LIBS)

QPCDS = $(BASICS) $(QPC_double) $(OBJD)/qpcs.o
QPCDS2 = $(BASICS) $(QPC_double) $(OBJD)/qpcs2.o
QPCDT = $(BASICS) $(QPC_double) $(OBJD)/qpct.o
QPCSS = $(BASICS) $(QPC_single) $(OBJS)/qpcs.o
QPCST = $(BASICS) $(QPC_single) $(OBJS)/qpct.o

RQPCDS = $(OBJD)/qpcs.o -L$(OBJD) $(LIBS)
RQPCDS2 = $(OBJD)/qpcs2.o -L$(OBJD) $(LIBS)
RQPCDT = $(OBJD)/qpct.o -L$(OBJD) $(LIBS)
RQPCSS = $(OBJS)/qpcs.o -L$(OBJS) $(LIBS)
RQPCST = $(OBJS)/qpct.o -L$(OBJS) $(LIBS)

QPEDS = $(BASICS) $(QPE_double) $(OBJD)/qpes.o
QPEDS2 = $(BASICS) $(QPE_double) $(OBJD)/qpes2.o
QPEDT = $(BASICS) $(QPE_double) $(OBJD)/qpet.o
QPESS = $(BASICS) $(QPE_single) $(OBJS)/qpes.o
QPEST = $(BASICS) $(QPE_single) $(OBJS)/qpet.o

RQPEDS = $(OBJD)/qpes.o -L$(OBJD) $(LIBS)
RQPEDS2 = $(OBJD)/qpes2.o -L$(OBJD) $(LIBS)
RQPEDT = $(OBJD)/qpet.o -L$(OBJD) $(LIBS)
RQPESS = $(OBJS)/qpes.o -L$(OBJS) $(LIBS)
RQPEST = $(OBJS)/qpet.o -L$(OBJS) $(LIBS)

QPDS = $(BASICS) $(QP_double) $(OBJD)/qp_spec.o
QPDS2 = $(BASICS) $(QP_double) $(OBJD)/qp_spec2.o
QPDT = $(BASICS) $(QP_double) $(OBJD)/qp_test.o
QPSS = $(BASICS) $(QP_single) $(OBJS)/qp_spec.o
QPST = $(BASICS) $(QP_single) $(OBJS)/qp_test.o

RQPDS = $(OBJD)/qp_spec.o -L$(OBJD) $(LIBS)
RQPDS2 = $(OBJD)/qp_spec2.o -L$(OBJD) $(LIBS)
RQPDT = $(OBJD)/qp_test.o -L$(OBJD) $(LIBS)
RQPSS = $(OBJS)/qp_spec.o -L$(OBJS) $(LIBS)
RQPST = $(OBJS)/qp_test.o -L$(OBJS) $(LIBS)

EQPDS = $(EQP_double) $(OBJD)/eqps.o
EQPDS2 = $(EQP_double) $(OBJD)/eqps2.o
EQPDT = $(EQP_double) $(OBJD)/eqpt.o
EQPSS = $(EQP_single) $(OBJS)/eqps.o
EQPST = $(EQP_single) $(OBJS)/eqpt.o

REQPDS = $(OBJD)/eqps.o -L$(OBJD) $(LIBS)
REQPDS2 = $(OBJD)/eqps2.o -L$(OBJD) $(LIBS)
REQPDT = $(OBJD)/eqpt.o -L$(OBJD) $(LIBS)
REQPSS = $(OBJS)/eqps.o -L$(OBJS) $(LIBS)
REQPST = $(OBJS)/eqpt.o -L$(OBJS) $(LIBS)

LLSDS = $(LLS_double) $(OBJD)/llss.o
LLSDT = $(LLS_double) $(OBJD)/llst.o
LLSSS = $(LLS_single) $(OBJS)/llss.o
LLSST = $(LLS_single) $(OBJS)/llst.o

RLLSDS = $(OBJD)/llss.o -L$(OBJD) $(LIBS)
RLLSDT = $(OBJD)/llst.o -L$(OBJD) $(LIBS)
RLLSSS = $(OBJS)/llss.o -L$(OBJS) $(LIBS)
RLLSST = $(OBJS)/llst.o -L$(OBJS) $(LIBS)

RPDDS = $(BASICS) $(RPD_double) $(OBJD)/rpds.o
RPDDT = $(BASICS) $(RPD_double) $(OBJD)/rpdt.o
RPDSS = $(BASICS) $(RPD_single) $(OBJS)/rpds.o
RPDST = $(BASICS) $(RPD_single) $(OBJS)/rpdt.o

RRPDDS = $(OBJD)/rpds.o -L$(OBJD) $(LIBS)
RRPDDT = $(OBJD)/rpdt.o -L$(OBJD) $(LIBS)
RRPDSS = $(OBJS)/rpds.o -L$(OBJS) $(LIBS)
RRPDST = $(OBJS)/rpdt.o -L$(OBJS) $(LIBS)

BQPDS = $(BASICS) $(BQP_double) $(OBJD)/bqps.o
BQPDS2 = $(BASICS) $(BQP_double) $(OBJD)/bqps2.o
BQPDS3 = $(BASICS) $(BQP_double) $(OBJD)/bqps3.o
BQPDS4 = $(BASICS) $(BQP_double) $(OBJD)/bqps4.o
BQPDT = $(BASICS) $(BQP_double) $(OBJD)/bqpt.o
BQPSS = $(BASICS) $(BQP_single) $(OBJS)/bqps.o
BQPSS2 = $(BASICS) $(BQP_single) $(OBJS)/bqps2.o
BQPSS3 = $(BASICS) $(BQP_single) $(OBJS)/bqps3.o
BQPST = $(BASICS) $(BQP_single) $(OBJS)/bqpt.o

RBQPDS = $(OBJD)/bqps.o -L$(OBJD) $(LIBS)
RBQPDS2 = $(OBJD)/bqps2.o -L$(OBJD) $(LIBS)
RBQPDS3 = $(OBJD)/bqps3.o -L$(OBJD) $(LIBS)
RBQPDS4 = $(OBJD)/bqps4.o -L$(OBJD) $(LIBS)
RBQPDT = $(OBJD)/bqpt.o -L$(OBJD) $(LIBS)
RBQPSS = $(OBJS)/bqps.o -L$(OBJS) $(LIBS)
RBQPSS2 = $(OBJS)/bqps3.o -L$(OBJS) $(LIBS)
RBQPSS3 = $(OBJS)/bqps3.o -L$(OBJS) $(LIBS)
RBQPST = $(OBJS)/bqpt.o -L$(OBJS) $(LIBS)

BQPBDS = $(BASICS) $(BQPB_double) $(OBJD)/bqpbs.o
BQPBDS2 = $(BASICS) $(BQPB_double) $(OBJD)/bqpbs2.o
BQPBDS3 = $(BASICS) $(BQPB_double) $(OBJD)/bqpbs3.o
BQPBDT = $(BASICS) $(BQPB_double) $(OBJD)/bqpbt.o
BQPBSS = $(BASICS) $(BQPB_single) $(OBJS)/bqpbs.o
BQPBSS2 = $(BASICS) $(BQPB_single) $(OBJS)/bqpbs2.o
BQPBSS3 = $(BASICS) $(BQPB_single) $(OBJS)/bqpbs3.o
BQPBST = $(BASICS) $(BQPB_single) $(OBJS)/bqpbt.o

RBQPBDS = $(OBJD)/bqpbs.o -L$(OBJD) $(LIBS)
RBQPBDS2 = $(OBJD)/bqpbs2.o -L$(OBJD) $(LIBS)
RBQPBDS3 = $(OBJD)/bqpbs3.o -L$(OBJD) $(LIBS)
RBQPBDT = $(OBJD)/bqpbt.o -L$(OBJD) $(LIBS)
RBQPBSS = $(OBJS)/bqpbs.o -L$(OBJS) $(LIBS)
RBQPBSS2 = $(OBJS)/bqpbs3.o -L$(OBJS) $(LIBS)
RBQPBSS3 = $(OBJS)/bqpbs3.o -L$(OBJS) $(LIBS)
RBQPBST = $(OBJS)/bqpbt.o -L$(OBJS) $(LIBS)

CQPDS = $(BASICS) $(CQP_double) $(OBJD)/cqps.o
CQPDS2 = $(BASICS) $(CQP_double) $(OBJD)/cqps2.o
CQPDS3 = $(BASICS) $(CQP_double) $(OBJD)/cqps3.o
CQPDT = $(BASICS) $(CQP_double) $(OBJD)/cqpt.o
CQPSS = $(BASICS) $(CQP_single) $(OBJS)/cqps.o
CQPSS2 = $(BASICS) $(CQP_single) $(OBJS)/cqps2.o
CQPSS3 = $(BASICS) $(CQP_single) $(OBJS)/cqps3.o
CQPST = $(BASICS) $(CQP_single) $(OBJS)/cqpt.o

RCQPDS = $(OBJD)/cqps.o -L$(OBJD) $(LIBS)
RCQPDS2 = $(OBJD)/cqps2.o -L$(OBJD) $(LIBS)
RCQPDS3 = $(OBJD)/cqps3.o -L$(OBJD) $(LIBS)
RCQPDT = $(OBJD)/cqpt.o -L$(OBJD) $(LIBS)
RCQPSS = $(OBJS)/cqps.o -L$(OBJS) $(LIBS)
RCQPSS2 = $(OBJS)/cqps3.o -L$(OBJS) $(LIBS)
RCQPSS3 = $(OBJS)/cqps3.o -L$(OBJS) $(LIBS)
RCQPST = $(OBJS)/cqpt.o -L$(OBJS) $(LIBS)

DQPDS = $(BASICS) $(DQP_double) $(OBJD)/dqps.o
DQPDS2 = $(BASICS) $(DQP_double) $(OBJD)/dqps2.o
DQPDS3 = $(BASICS) $(DQP_double) $(OBJD)/dqps3.o
DQPDS4 = $(BASICS) $(DQP_double) $(OBJD)/dqps4.o
DQPDT = $(BASICS) $(DQP_double) $(OBJD)/dqpt.o
DQPSS = $(BASICS) $(DQP_single) $(OBJS)/dqps.o
DQPSS2 = $(BASICS) $(DQP_single) $(OBJS)/dqps2.o
DQPSS3 = $(BASICS) $(DQP_single) $(OBJS)/dqps3.o
DQPSS4 = $(BASICS) $(DQP_single) $(OBJS)/dqps4.o
DQPST = $(BASICS) $(DQP_single) $(OBJS)/dqpt.o

RDQPDS = $(OBJD)/dqps.o -L$(OBJD) $(LIBS)
RDQPDS2 = $(OBJD)/dqps2.o -L$(OBJD) $(LIBS)
RDQPDS3 = $(OBJD)/dqps3.o -L$(OBJD) $(LIBS)
RDQPDS4 = $(OBJD)/dqps4.o -L$(OBJD) $(LIBS)
RDQPDT = $(OBJD)/dqpt.o -L$(OBJD) $(LIBS)
RDQPSS = $(OBJS)/dqps.o -L$(OBJS) $(LIBS)
RDQPSS2 = $(OBJS)/dqps3.o -L$(OBJS) $(LIBS)
RDQPSS3 = $(OBJS)/dqps3.o -L$(OBJS) $(LIBS)
RDQPSS4 = $(OBJS)/dqps4.o -L$(OBJS) $(LIBS)
RDQPST = $(OBJS)/dqpt.o -L$(OBJS) $(LIBS)

CCQPDS = $(BASICS) $(CCQP_double) $(OBJD)/ccqps.o
CCQPDS2 = $(BASICS) $(CCQP_double) $(OBJD)/ccqps2.o
CCQPDS3 = $(BASICS) $(CCQP_double) $(OBJD)/ccqps3.o
CCQPDT = $(BASICS) $(CCQP_double) $(OBJD)/ccqpt.o
CCQPSS = $(BASICS) $(CCQP_single) $(OBJS)/ccqps.o
CCQPSS2 = $(BASICS) $(CCQP_single) $(OBJS)/ccqps2.o
CCQPSS3 = $(BASICS) $(CCQP_single) $(OBJS)/ccqps3.o
CCQPST = $(BASICS) $(CCQP_single) $(OBJS)/ccqpt.o

RCCQPDS = $(OBJD)/ccqps.o -L$(OBJD) $(LIBS)
RCCQPDS2 = $(OBJD)/ccqps2.o -L$(OBJD) $(LIBS)
RCCQPDS3 = $(OBJD)/ccqps3.o -L$(OBJD) $(LIBS)
RCCQPDT = $(OBJD)/ccqpt.o -L$(OBJD) $(LIBS)
RCCQPSS = $(OBJS)/ccqps.o -L$(OBJS) $(LIBS)
RCCQPSS2 = $(OBJS)/ccqps3.o -L$(OBJS) $(LIBS)
RCCQPSS3 = $(OBJS)/ccqps3.o -L$(OBJS) $(LIBS)
RCCQPST = $(OBJS)/ccqpt.o -L$(OBJS) $(LIBS)

DLPDS = $(BASICS) $(DLP_double) $(OBJD)/dlps.o
DLPDS2 = $(BASICS) $(DLP_double) $(OBJD)/dlps2.o
DLPDS3 = $(BASICS) $(DLP_double) $(OBJD)/dlps3.o
DLPDS4 = $(BASICS) $(DLP_double) $(OBJD)/dlps4.o
DLPDT = $(BASICS) $(DLP_double) $(OBJD)/dlpt.o
DLPSS = $(BASICS) $(DLP_single) $(OBJS)/dlps.o
DLPSS2 = $(BASICS) $(DLP_single) $(OBJS)/dlps2.o
DLPSS3 = $(BASICS) $(DLP_single) $(OBJS)/dlps3.o
DLPSS4 = $(BASICS) $(DLP_single) $(OBJS)/dlps4.o
DLPST = $(BASICS) $(DLP_single) $(OBJS)/dlpt.o

RDLPDS = $(OBJD)/dlps.o -L$(OBJD) $(LIBS)
RDLPDS2 = $(OBJD)/dlps2.o -L$(OBJD) $(LIBS)
RDLPDS3 = $(OBJD)/dlps3.o -L$(OBJD) $(LIBS)
RDLPDS4 = $(OBJD)/dlps4.o -L$(OBJD) $(LIBS)
RDLPDT = $(OBJD)/dlpt.o -L$(OBJD) $(LIBS)
RDLPSS = $(OBJS)/dlps.o -L$(OBJS) $(LIBS)
RDLPSS2 = $(OBJS)/dlps3.o -L$(OBJS) $(LIBS)
RDLPSS3 = $(OBJS)/dlps3.o -L$(OBJS) $(LIBS)
RDLPSS4 = $(OBJS)/dlps4.o -L$(OBJS) $(LIBS)
RDLPST = $(OBJS)/dlpt.o -L$(OBJS) $(LIBS)

CQPSDS = $(BASICS) $(CQPS_double) $(OBJD)/cqpss.o
CQPSDS2 = $(BASICS) $(CQPS_double) $(OBJD)/cqpss2.o
CQPSDS3 = $(BASICS) $(CQPS_double) $(OBJD)/cqpss3.o
CQPSDT = $(BASICS) $(CQPS_double) $(OBJD)/cqpst.o
CQPSSS = $(BASICS) $(CQPS_single) $(OBJS)/cqpss.o
CQPSSS2 = $(BASICS) $(CQPS_single) $(OBJS)/cqpss2.o
CQPSSS3 = $(BASICS) $(CQPS_single) $(OBJS)/cqpss3.o
CQPSST = $(BASICS) $(CQPS_single) $(OBJS)/cqpst.o

RCQPSDS = $(OBJD)/cqpss.o -L$(OBJD) $(LIBS)
RCQPSDS2 = $(OBJD)/cqpss2.o -L$(OBJD) $(LIBS)
RCQPSDS3 = $(OBJD)/cqpss3.o -L$(OBJD) $(LIBS)
RCQPSDT = $(OBJD)/cqpst.o -L$(OBJD) $(LIBS)
RCQPSSS = $(OBJS)/cqpss.o -L$(OBJS) $(LIBS)
RCQPSSS2 = $(OBJS)/cqpss3.o -L$(OBJS) $(LIBS)
RCQPSSS3 = $(OBJS)/cqpss3.o -L$(OBJS) $(LIBS)
RCQPSST = $(OBJS)/cqpst.o -L$(OBJS) $(LIBS)

LPADS = basics linearsolver $(LPA_double) $(OBJD)/lpas.o
LPADT = basics linearsolver $(LPA_double) $(OBJD)/lpat.o
LPASS = basics linearsolver $(LPA_single) $(OBJS)/lpas.o
LPAST = basics linearsolver $(LPA_single) $(OBJS)/lpat.o

RLPADS = $(OBJD)/lpas.o -L$(OBJD) $(LIBS)
RLPADT = $(OBJD)/lpat.o -L$(OBJD) $(LIBS)
RLPASS = $(OBJS)/lpas.o -L$(OBJS) $(LIBS)
RLPAST = $(OBJS)/lpat.o -L$(OBJS) $(LIBS)

LPBDS = basics linearsolver $(LPB_double) $(OBJD)/lpbs.o
LPBDT = basics linearsolver $(LPB_double) $(OBJD)/lpbt.o
LPBSS = basics linearsolver $(LPB_single) $(OBJS)/lpbs.o
LPBST = basics linearsolver $(LPB_single) $(OBJS)/lpbt.o

RLPBDS = $(OBJD)/lpbs.o -L$(OBJD) $(LIBS)
RLPBDT = $(OBJD)/lpbt.o -L$(OBJD) $(LIBS)
RLPBSS = $(OBJS)/lpbs.o -L$(OBJS) $(LIBS)
RLPBST = $(OBJS)/lpbt.o -L$(OBJS) $(LIBS)

L1QPDS = $(BASICS) $(L1QP_double) $(OBJD)/l1qps.o
L1QPDS2 = $(BASICS) $(L1QP_double) $(OBJD)/l1qps2.o
L1QPDS3 = $(BASICS) $(L1QP_double) $(OBJD)/l1qps3.o
L1QPDT = $(BASICS) $(L1QP_double) $(OBJD)/l1qpt.o
L1QPSS = $(BASICS) $(L1QP_single) $(OBJS)/l1qps.o
L1QPSS2 = $(BASICS) $(L1QP_single) $(OBJS)/l1qps2.o
L1QPSS3 = $(BASICS) $(L1QP_single) $(OBJS)/l1qps3.o
L1QPST = $(BASICS) $(L1QP_single) $(OBJS)/l1qpt.o

RL1QPDS = $(OBJD)/l1qps.o -L$(OBJD) $(LIBS)
RL1QPDS2 = $(OBJD)/l1qps2.o -L$(OBJD) $(LIBS)
RL1QPDS3 = $(OBJD)/l1qps3.o -L$(OBJD) $(LIBS)
RL1QPDT = $(OBJD)/l1qpt.o -L$(OBJD) $(LIBS)
RL1QPSS = $(OBJS)/l1qps.o -L$(OBJS) $(LIBS)
RL1QPSS2 = $(OBJS)/l1qps3.o -L$(OBJS) $(LIBS)
RL1QPSS3 = $(OBJS)/l1qps3.o -L$(OBJS) $(LIBS)
RL1QPST = $(OBJS)/l1qpt.o -L$(OBJS) $(LIBS)

LSQPDS = basics linearsolver $(LSQP_double) $(OBJD)/lsqps.o
LSQPDT = basics linearsolver $(LSQP_double) $(OBJD)/lsqpt.o
LSQPSS = basics linearsolver $(LSQP_single) $(OBJS)/lsqps.o
LSQPST = basics linearsolver $(LSQP_single) $(OBJS)/lsqpt.o

RLSQPDS = $(OBJD)/lsqps.o -L$(OBJD) $(LIBS)
RLSQPDT = $(OBJD)/lsqpt.o -L$(OBJD) $(LIBS)
RLSQPSS = $(OBJS)/lsqps.o -L$(OBJS) $(LIBS)
RLSQPST = $(OBJS)/lsqpt.o -L$(OBJS) $(LIBS)

PRESOLVEDS = basics linearsolver $(PRESOLVE_double) $(OBJD)/presolves.o
PRESOLVESS = basics linearsolver $(PRESOLVE_single) $(OBJS)/presolves.o

QPPDS = basics linearsolver $(QPP_double) $(OBJD)/qpps.o
QPPDT = basics linearsolver $(QPP_double) $(OBJD)/qppt.o
QPPSS = basics linearsolver $(QPP_single) $(OBJS)/qpps.o
QPPST = basics linearsolver $(QPP_single) $(OBJS)/qppt.o

QPTDS = basics linearsolver $(QPT_double) $(OBJD)/qpts.o
QPTDT = basics linearsolver $(QPT_double) $(OBJD)/qptt.o
QPTSS = basics linearsolver $(QPT_single) $(OBJS)/qpts.o
QPTST = basics linearsolver $(QPT_single) $(OBJS)/qptt.o

RPRESOLVEDS = $(OBJD)/presolves.o -L$(OBJD) $(LIBS)
RPRESOLVESS = $(OBJS)/presolves.o -L$(OBJS) $(LIBS)

RQPPDS = $(OBJD)/qpps.o -L$(OBJD) $(LIBS)
RQPPDT = $(OBJD)/qppt.o -L$(OBJD) $(LIBS)
RQPPSS = $(OBJS)/qpps.o -L$(OBJS) $(LIBS)
RQPPST = $(OBJS)/qppt.o -L$(OBJS) $(LIBS)

RQPTDS = $(OBJD)/qpts.o -L$(OBJD) $(LIBS)
RQPTDT = $(OBJD)/qptt.o -L$(OBJD) $(LIBS)
RQPTSS = $(OBJS)/qpts.o -L$(OBJS) $(LIBS)
RQPTST = $(OBJS)/qptt.o -L$(OBJS) $(LIBS)

SUCC = precision version) compiled successfully
SUCC_CUTEST = precision version) for CUTEst compiled successfully
SUCC_QPLIB = precision version) for QPLIB compiled successfully

#  main compilations and runs

all: qp_all
all_current: qp_all_current
test: test_eqp test_qpa test_qpb test_qpc test_cqp test_dqp test_qp
test_current: test test_dlp
test_nocutest: test_qpa_nocutest test_qpb_nocutest test_qpc_nocutest \
              test_qp_nocutest test_eqp_nocutest test_cqp_nocutest \
              test_dqp_nocutest
test_nocutest_current: test_nocutest  test_dlp_nocutest
test_spec: test_spec_eqp test_spec_lsqp test_spec_qpa test_spec_qpb \
           test_spec_qpc test_spec_qp test_spec_cqp test_spec_dqp
test_spec_current: test_spec test_spec_dlp

#  all qp routines

qp_all: qp_cutest qp_qplib
qp_all_current: qp_cutest_current qp_qplib_current

qp_cutest: qp_cutest_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: QP family ($(PRECIS) $(SUCC_CUTEST)"
qp_cutest_single: $(CUTEST_single)
	$(RANLIB) $(LGS)
qp_cutest_double: $(CUTEST_double)
	$(RANLIB) $(LGD)
qp_cutest_current: qp_cutest_current_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: QP family ($(PRECIS) $(SUCC_CUTEST)"
qp_cutest_current_single: $(CUTEST_CURRENT_single)
	$(RANLIB) $(LGS)
qp_cutest_current_double: $(CUTEST_CURRENT_double)
	$(RANLIB) $(LGD)

qp_qplib: qp_silent qp_qplib_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: QP family ($(PRECIS) $(SUCC_QPLIB)"
qp_qplib_single: $(QPLIB_single)
	$(RANLIB) $(LGS)
qp_qplib_double: $(QPLIB_double)
	$(RANLIB) $(LGD)

qp_qplib_current: qp_silent qp_qplib_current_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: QP family ($(PRECIS) $(SUCC_QPLIB)"
qp_current_qplib_single: $(QPLIB_CURRENT_single)
	$(RANLIB) $(LGS)
qp_current_qplib_double: $(QPLIB_CURRENT_double)
	$(RANLIB) $(LGD)

qp_silent: qp_silent_$(PRECIS)
qp_silent_single: $(EVERYTHING_single)
qp_silent_double: $(EVERYTHING_double)

qp: qp_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: QP family ($(PRECIS) $(SUCC)"
qp_single: $(EVERYTHING_single)
	$(RANLIB) $(LGS)
qp_double: $(EVERYTHING_double)
	$(RANLIB) $(LGD)

qp_standalone_silent: qp_standalone_silent_$(PRECIS)
qp_standalone_silent_single: $(QP_OBJECTS_single)
qp_standalone_silent_double: $(QP_OBJECTS_double)

qp_standalone: qp_standalone_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: QP family ($(PRECIS) $(SUCC)"
qp_standalone_single: $(QP_OBJECTS_single)
	$(RANLIB) $(LGS)
qp_standalone_double: $(QP_OBJECTS_double)
	$(RANLIB) $(LGD)

use_qp_silent: use_qp_$(PRECIS)
use_qp: use_qp_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: QP family ($(PRECIS) $(SUCC)"
use_qp_single: $(USE_OBJECTS_single)
	$(RANLIB) $(LGS)
use_qp_double: $(USE_OBJECTS_double)
	$(RANLIB) $(LGD)

qps: qp_cutest_single
qpd: qp_cutest_double

qpsrunall: qpss qpst
qpdrunall: qpds qpdt
qprunall: qpdrunall qpsrunall

inqp: inqp_$(PRECIS)
inqp_single: $(QP_OBJECTS_single) $(OBJS)/inqp.o
inqp_double: $(QP_OBJECTS_double) $(OBJD)/inqp.o

test_qp: test_qp_$(PRECIS)

test_qp_single: qpst $(QP_RUN_single)
	echo ""
	echo " Testing CUTEst interface to qp"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) qp -s QPBAND
	echo ""
	echo " Tests for qp complete"

test_qp_double: qpdt $(QP_RUN_double)
	echo ""
	echo " Testing CUTEst interface to qp"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) qp QPBAND
	echo ""
	echo " Tests for qp complete"

test_qp_nocutest: test_qp_nocutest_$(PRECIS)

test_qp_nocutest_single: qpst
	echo ""
	echo " Tests for qp complete"

test_qp_nocutest_double: qpdt
	echo ""
	echo " Tests for qp complete"

test_spec_qp: test_spec_qp_$(PRECIS)

test_spec_qp_single: qpss
	echo ""
	echo " Tests for qp complete"

test_spec_qp_double: qpds
	echo ""
	echo " Tests for qp complete"

# qpa

qpa_all: qpa_cutest qpa_qplib

qpa_cutest: qpa_cutest_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: QPA ($(PRECIS) $(SUCC_CUTEST)"
qpa_cutest_single: $(QPA_CUTEST_single)
	$(RANLIB) $(LGS)
qpa_cutest_double: $(QPA_CUTEST_double)
	$(RANLIB) $(LGD)

qpa_qplib: qpa_silent qpa_qplib_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: QPA ($(PRECIS) $(SUCC_QPLIB)"
qpa_qplib_single: $(QPA_QPLIB_RUN_single)
	$(RANLIB) $(LGS)
qpa_qplib_double: $(QPA_QPLIB_RUN_double)
	$(RANLIB) $(LGD)

qpa_silent: qpa_silent_$(PRECIS)
qpa_silent_single: $(QPA_OBJECTS_single)
qpa_silent_double: $(QPA_OBJECTS_double)

qpa: qpa_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: QPA ($(PRECIS) $(SUCC)"
qpa_single: $(QPA_OBJECTS_single)
	$(RANLIB) $(LGS)
qpa_double: $(QPA_OBJECTS_double)
	$(RANLIB) $(LGD)

qpas: qpa_cutest_single
qpad: qpa_cutest_double

qpasrunall: qpass qpast
qpadrunall: qpads qpadt
qparunall: qpadrunall qpasrunall

inqpa: inqpa_$(PRECIS)
inqpa_single: $(QPA_OBJECTS_single) $(OBJS)/inqpa.o
inqpa_double: $(QPA_OBJECTS_double) $(OBJD)/inqpa.o

test_qpa: test_qpa_$(PRECIS)

test_qpa_single: qpast $(QPA_RUN_single)
	echo ""
	echo " Testing CUTEst interface to qpa"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) qpa -s QPBAND
	echo ""
	echo " Tests for qpa complete"

test_qpa_double: qpadt $(QPA_RUN_double)
	echo ""
	echo " Testing CUTEst interface to qpa"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) qpa QPBAND
	echo ""
	echo " Tests for qpa complete"

test_qpa_nocutest: test_qpa_nocutest_$(PRECIS)

test_qpa_nocutest_single: qpast
	echo ""
	echo " Tests for qpa complete"

test_qpa_nocutest_double: qpadt
	echo ""
	echo " Tests for qpa complete"

test_spec_qpa: test_spec_qpa_$(PRECIS)

test_spec_qpa_single: qpass
	echo ""
	echo " Tests for qpa complete"

test_spec_qpa_double: qpads
	echo ""
	echo " Tests for qpa complete"

# qpb

qpb_all: qpb_cutest qpb_qplib

qpb_cutest: qpb_cutest_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: QPB ($(PRECIS) $(SUCC_CUTEST)"
qpb_cutest_single: $(QPB_CUTEST_single)
	$(RANLIB) $(LGS)
qpb_cutest_double: $(QPB_CUTEST_double)
	$(RANLIB) $(LGD)

qpb_qplib: qpb_silent qpb_qplib_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: QPB ($(PRECIS) $(SUCC_QPLIB)"
qpb_qplib_single: $(QPB_QPLIB_RUN_single)
	$(RANLIB) $(LGS)
qpb_qplib_double: $(QPB_QPLIB_RUN_double)
	$(RANLIB) $(LGD)

qpb_silent: qpb_silent_$(PRECIS)
qpb_silent_single: $(QPB_OBJECTS_single)
qpb_silent_double: $(QPB_OBJECTS_double)

qpb: qpb_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: QPB ($(PRECIS) $(SUCC)"
qpb_single: $(QPB_OBJECTS_single)
	$(RANLIB) $(LGS)
qpb_double: $(QPB_OBJECTS_double)
	$(RANLIB) $(LGD)

qpbs: qpb_cutest_single
qpbd: qpb_cutest_double

qpbsrunall: qpbss qpbst
qpbdrunall: qpbds qpbdt
qpbrunall: qpbdrunall qpbsrunall

inqpb: inqpb_$(PRECIS)
inqpb_single: $(QPB_OBJECTS_single) $(OBJS)/inqpb.o
inqpb_double: $(QPB_OBJECTS_double) $(OBJD)/inqpb.o

test_qpb: test_qpb_$(PRECIS)

test_qpb_single: qpbst $(QPB_RUN_single)
	echo ""
	echo " Testing CUTEst interface to qpb"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) qpb -s QPBAND
	echo ""
	echo " Tests for qpb complete"

test_qpb_double: qpbdt $(QPB_RUN_double)
	echo ""
	echo " Testing CUTEst interface to qpb"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) qpb QPBAND
	echo ""
	echo " Tests for qpb complete"

test_qpb_nocutest: test_qpb_nocutest_$(PRECIS)

test_qpb_nocutest_single: qpbst
	echo ""
	echo " Tests for qpb complete"

test_qpb_nocutest_double: qpbdt
	echo ""
	echo " Tests for qpb complete"

test_spec_qpb: test_spec_qpb_$(PRECIS)

test_spec_qpb_single: qpbss
	echo ""
	echo " Tests for qpb complete"

test_spec_qpb_double: qpbds
	echo ""
	echo " Tests for qpb complete"

# qpc

qpc_all: qpc_cutest qpc_qplib

qpc_cutest: qpc_cutest_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: QPC ($(PRECIS) $(SUCC_CUTEST)"
qpc_cutest_single: $(QPC_CUTEST_single)
	$(RANLIB) $(LGS)
qpc_cutest_double: $(QPC_CUTEST_double)
	$(RANLIB) $(LGD)

qpc_qplib: qpc_silent qpc_qplib_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: QPC ($(PRECIS) $(SUCC_QPLIB)"
qpc_qplib_single: $(QPC_QPLIB_RUN_single)
	$(RANLIB) $(LGS)
qpc_qplib_double: $(QPC_QPLIB_RUN_double)
	$(RANLIB) $(LGD)

qpc_silent: qpc_silent_$(PRECIS)
qpc_silent_single: $(QPC_OBJECTS_single)
qpc_silent_double: $(QPC_OBJECTS_double)

qpc: qpc_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: QPC ($(PRECIS) $(SUCC)"
qpc_single: $(QPC_OBJECTS_single)
	$(RANLIB) $(LGS)
qpc_double: $(QPC_OBJECTS_double)
	$(RANLIB) $(LGD)

qpcs: qpc_cutest_single
qpcd: qpc_cutest_double

qpcsrunall: qpcss qpcst
qpcdrunall: qpcds qpcdt
qpcrunall: qpcdrunall qpcsrunall

inqpc: inqpc_$(PRECIS)
inqpc_single: $(QPC_OBJECTS_single) $(OBJS)/inqpc.o
inqpc_double: $(QPC_OBJECTS_double) $(OBJD)/inqpc.o

test_qpc: test_qpc_$(PRECIS)

test_qpc_single: qpcst $(QPC_RUN_single)
	echo ""
	echo " Testing CUTEst interface to qpc"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) qpc -s QPBAND
	echo ""
	echo " Tests for qpc complete"

test_qpc_double: qpcdt $(QPC_RUN_double)
	echo ""
	echo " Testing CUTEst interface to qpc"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) qpc QPBAND
	echo ""
	echo " Tests for qpc complete"

test_qpc_nocutest: test_qpc_nocutest_$(PRECIS)

test_qpc_nocutest_single: qpcst
	echo ""
	echo " Tests for qpc complete"

test_qpc_nocutest_double: qpcdt
	echo ""
	echo " Tests for qpc complete"

test_spec_qpc: test_spec_qpc_$(PRECIS)

test_spec_qpc_single: qpcss
	echo ""
	echo " Tests for qpc complete"

test_spec_qpc_double: qpcds
	echo ""
	echo " Tests for qpc complete"

# qpe

qpe_cutest: qpe_cutest_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: QPE ($(PRECIS) $(SUCC_CUTEST)"
qpe_cutest_single: $(QPE_CUTEST_single)
	$(RANLIB) $(LGS)
qpe_cutest_double: $(QPE_CUTEST_double)
	$(RANLIB) $(LGD)

qpe_silent: qpe_silent_$(PRECIS)
qpe_silent_single: $(QPE_OBJECTS_single)
qpe_silent_double: $(QPE_OBJECTS_double)

qpe: qpe_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: QPE ($(PRECIS) $(SUCC)"
qpe_single: $(QPE_OBJECTS_single)
	$(RANLIB) $(LGS)
qpe_double: $(QPE_OBJECTS_double)
	$(RANLIB) $(LGD)

qpes: qpe_cutest_single
qped: qpe_cutest_double

qpesrunall: qpess qpest
qpedrunall: qpeds qpedt
qperunall: qpedrunall qpesrunall

test_qpe: test_qpe_$(PRECIS)

test_qpe_single: qpest $(QPE_RUN_single)
	echo ""
	echo " Testing CUTEst interface to qpe"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) qpe -s QPBAND
	echo ""
	echo " Tests for qpe complete"

test_qpe_double: qpedt $(QPE_RUN_double)
	echo ""
	echo " Testing CUTEst interface to qpe"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) qpe QPBAND
	echo ""
	echo " Tests for qpe complete"

test_qpe_nocutest: test_qpe_nocutest_$(PRECIS)

test_qpe_nocutest_single: qpest
	echo ""
	echo " Tests for qpe complete"

test_qpe_nocutest_double: qpedt
	echo ""
	echo " Tests for qpe complete"

test_spec_qpe: test_spec_qpe_$(PRECIS)

test_spec_qpe_single: qpess
	echo ""
	echo " Tests for qpe complete"

test_spec_qpe_double: qpeds
	echo ""
	echo " Tests for qpe complete"

# bqp

bqp_all: bqp_cutest bqp_qplib

bqp_cutest: bqp_cutest_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: BQP ($(PRECIS) $(SUCC_CUTEST)"
bqp_cutest_single: $(BQP_CUTEST_single)
	$(RANLIB) $(LGS)
bqp_cutest_double: $(BQP_CUTEST_double)
	$(RANLIB) $(LGD)

bqp_qplib: bqp_silent bqp_qplib_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: BQP ($(PRECIS) $(SUCC_QPLIB)"
bqp_qplib_single: $(BQP_QPLIB_RUN_single)
	$(RANLIB) $(LGS)
bqp_qplib_double: $(BQP_QPLIB_RUN_double)
	$(RANLIB) $(LGD)

bqp_silent: bqp_silent_$(PRECIS)
bqp_silent_single: $(BQP_OBJECTS_single)
bqp_silent_double: $(BQP_OBJECTS_double)

bqp: bqp_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: BQP ($(PRECIS) $(SUCC)"
bqp_single: $(BQP_OBJECTS_single)
	$(RANLIB) $(LGS)
bqp_double: $(BQP_OBJECTS_double)
	$(RANLIB) $(LGD)

bqps: bqp_cutest_single
bqpd: bqp_cutest_double

bqpsrunall: bqpss bqpst
bqpdrunall: bqpds bqpdt
bqprunall: bqpdrunall bqpsrunall

inbqp: inbqp_$(PRECIS)
inbqp_single: $(BQP_OBJECTS_single) $(OBJS)/inbqp.o
inbqp_double: $(BQP_OBJECTS_double) $(OBJD)/inbqp.o

test_bqp: test_bqp_$(PRECIS)

test_bqp_single: bqpst $(BQP_RUN_single)
	echo ""
	echo " Testing CUTEst interface to bqp"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) bqp -s QPBAND
	echo ""
	echo " Tests for bqp complete"

test_bqp_double: bqpdt $(BQP_RUN_double)
	echo ""
	echo " Testing CUTEst interface to bqp"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) bqp QPBAND
	echo ""
	echo " Tests for bqp complete"

test_bqp_nocutest: test_bqp_nocutest_$(PRECIS)

test_bqp_nocutest_single: bqpst
	echo ""
	echo " Tests for bqp complete"

test_bqp_nocutest_double: bqpdt
	echo ""
	echo " Tests for bqp complete"

test_spec_bqp: test_spec_bqp_$(PRECIS)

test_spec_bqp_single: bqpss
	echo ""
	echo " Tests for bqp complete"

test_spec_bqp_double: bqpds
	echo ""
	echo " Tests for bqp complete"

# bqpb

bqpb_all: bqpb_cutest bqpb_qplib

bqpb_cutest: bqpb_cutest_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: BQPB ($(PRECIS) $(SUCC_CUTEST)"
bqpb_cutest_single: $(BQPB_CUTEST_single)
	$(RANLIB) $(LGS)
bqpb_cutest_double: $(BQPB_CUTEST_double)
	$(RANLIB) $(LGD)

bqpb_qplib: bqpb_silent bqpb_qplib_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: BQPB ($(PRECIS) $(SUCC_QPLIB)"
bqpb_qplib_single: $(BQPB_QPLIB_RUN_single)
	$(RANLIB) $(LGS)
bqpb_qplib_double: $(BQPB_QPLIB_RUN_double)
	$(RANLIB) $(LGD)

bqpb_silent: bqpb_silent_$(PRECIS)
bqpb_silent_single: $(BQPB_OBJECTS_single)
bqpb_silent_double: $(BQPB_OBJECTS_double)

bqpb: bqpb_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: BQPB ($(PRECIS) $(SUCC)"
bqpb_single: $(BQPB_OBJECTS_single)
	$(RANLIB) $(LGS)
bqpb_double: $(BQPB_OBJECTS_double)
	$(RANLIB) $(LGD)

bqpbs: bqpb_cutest_single
bqpbd: bqpb_cutest_double

bqpbsrunall: bqpbss bqpbst
bqpbdrunall: bqpbds bqpbdt
bqpbrunall: bqpbdrunall bqpbsrunall

inbqpb: inbqpb_$(PRECIS)
inbqpb_single: $(BQPB_OBJECTS_single) $(OBJS)/inbqpb.o
inbqpb_double: $(BQPB_OBJECTS_double) $(OBJD)/inbqpb.o

test_bqpb: test_bqpb_$(PRECIS)

test_bqpb_single: bqpbst $(BQPB_RUN_single)
	echo ""
	echo " Testing CUTEst interface to bqpb"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) bqpb -s QPBAND
	echo ""
	echo " Tests for bqpb complete"

test_bqpb_double: bqpbdt $(BQPB_RUN_double)
	echo ""
	echo " Testing CUTEst interface to bqpb"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) bqpb QPBAND
	echo ""
	echo " Tests for bqpb complete"

test_bqpb_nocutest: test_bqpb_nocutest_$(PRECIS)

test_bqpb_nocutest_single: bqpbst
	echo ""
	echo " Tests for bqpb complete"

test_bqpb_nocutest_double: bqpbdt
	echo ""
	echo " Tests for bqpb complete"

test_spec_bqpb: test_spec_bqpb_$(PRECIS)

test_spec_bqpb_single: bqpbss
	echo ""
	echo " Tests for bqpb complete"

test_spec_bqpb_double: bqpbds
	echo ""
	echo " Tests for bqpb complete"

# cqp

cqp_all: cqp_cutest cqp_qplib

cqp_cutest: cqp_cutest_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: CQP ($(PRECIS) $(SUCC_CUTEST)"
cqp_cutest_single: $(CQP_CUTEST_single)
	$(RANLIB) $(LGS)
cqp_cutest_double: $(CQP_CUTEST_double)
	$(RANLIB) $(LGD)

cqp_qplib: cqp_silent cqp_qplib_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: CQP ($(PRECIS) $(SUCC_QPLIB)"
cqp_qplib_single: $(CQP_QPLIB_RUN_single)
	$(RANLIB) $(LGS)
cqp_qplib_double: $(CQP_QPLIB_RUN_double)
	$(RANLIB) $(LGD)

cqp_silent: cqp_silent_$(PRECIS)
cqp_silent_single: $(CQP_OBJECTS_single)
cqp_silent_double: $(CQP_OBJECTS_double)

cqp: cqp_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: CQP ($(PRECIS) $(SUCC)"
cqp_single: $(CQP_OBJECTS_single)
	$(RANLIB) $(LGS)
cqp_double: $(CQP_OBJECTS_double)
	$(RANLIB) $(LGD)

cqps: cqp_cutest_single
cqpd: cqp_cutest_double

cqpsrunall: cqpss cqpst
cqpdrunall: cqpds cqpdt
cqprunall: cqpdrunall cqpsrunall

incqp: incqp_$(PRECIS)
incqp_single: $(CQP_OBJECTS_single) $(OBJS)/incqp.o
incqp_double: $(CQP_OBJECTS_double) $(OBJD)/incqp.o

test_cqp: test_cqp_$(PRECIS)

test_cqp_single: cqpst $(CQP_RUN_single)
	echo ""
	echo " Testing CUTEst interface to cqp"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) cqp -s QPBAND
	echo ""
	echo " Tests for cqp complete"

test_cqp_double: cqpdt $(CQP_RUN_double)
	echo ""
	echo " Testing CUTEst interface to cqp"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) cqp QPBAND
	echo ""
	echo " Tests for cqp complete"

test_cqp_nocutest: test_cqp_nocutest_$(PRECIS)

test_cqp_nocutest_single: cqpst
	echo ""
	echo " Tests for cqp complete"

test_cqp_nocutest_double: cqpdt
	echo ""
	echo " Tests for cqp complete"

test_spec_cqp: test_spec_cqp_$(PRECIS)

test_spec_cqp_single: cqpss
	echo ""
	echo " Tests for cqp complete"

test_spec_cqp_double: cqpds
	echo ""
	echo " Tests for cqp complete"

# ccqp

ccqp_cutest: ccqp_cutest_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: CCQP ($(PRECIS) $(SUCC_CUTEST)"
ccqp_cutest_single: $(CCQP_CUTEST_single)
	$(RANLIB) $(LGS)
ccqp_cutest_double: $(CCQP_CUTEST_double)
	$(RANLIB) $(LGD)

ccqp_silent: ccqp_silent_$(PRECIS)
ccqp_silent_single: $(CCQP_OBJECTS_single)
ccqp_silent_double: $(CCQP_OBJECTS_double)

ccqp: ccqp_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: CCQP ($(PRECIS) $(SUCC)"
ccqp_single: $(CCQP_OBJECTS_single)
	$(RANLIB) $(LGS)
ccqp_double: $(CCQP_OBJECTS_double)
	$(RANLIB) $(LGD)

ccqps: ccqp_cutest_single
ccqpd: ccqp_cutest_double

ccqpsrunall: ccqpss ccqpst
ccqpdrunall: ccqpds ccqpdt
ccqprunall: ccqpdrunall ccqpsrunall

inccqp: inccqp_$(PRECIS)
	echo ""
inccqp_single: $(CCQP_OBJECTS_single) $(OBJS)/inccqp.o
inccqp_double: $(CCQP_OBJECTS_double) $(OBJD)/inccqp.o

test_ccqp: test_ccqp_$(PRECIS)

test_ccqp_single: ccqpst $(CCQP_RUN_single)
	echo ""
	echo " Testing CUTEst interface to ccqp"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) ccqp -s QPBAND
	echo ""
	echo " Tests for ccqp complete"

test_ccqp_double: ccqpdt $(CCQP_RUN_double)
	echo ""
	echo " Testing CUTEst interface to ccqp"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) ccqp QPBAND
	echo ""
	echo " Tests for ccqp complete"

test_ccqp_nocutest: test_ccqp_nocutest_$(PRECIS)

test_ccqp_nocutest_single: ccqpst
	echo ""
	echo " Tests for ccqp complete"

test_ccqp_nocutest_double: ccqpdt
	echo ""
	echo " Tests for ccqp complete"

test_spec_ccqp: test_spec_ccqp_$(PRECIS)

test_spec_ccqp_single: ccqpss
	echo ""
	echo " Tests for ccqp complete"

test_spec_ccqp_double: ccqpds
	echo ""
	echo " Tests for ccqp complete"

# cqps

cqps_cutest: cqps_cutest_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: CQPS ($(PRECIS) $(SUCC_CUTEST)"
cqps_cutest_single: $(CQPS_CUTEST_single)
	$(RANLIB) $(LGS)
cqps_cutest_double: $(CQPS_CUTEST_double)
	$(RANLIB) $(LGD)

cqps_silent: cqps_silent_$(PRECIS)
cqps_silent_single: $(CQPS_OBJECTS_single)
cqps_silent_double: $(CQPS_OBJECTS_double)

cqps: cqps_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: CQPS ($(PRECIS) $(SUCC)"
cqps_single: $(CQPS_OBJECTS_single)
	$(RANLIB) $(LGS)
cqps_double: $(CQPS_OBJECTS_double)
	$(RANLIB) $(LGD)

cqpss: cqps_cutest_single
cqpsd: cqps_cutest_double

cqpssrunall: cqpsss cqpsst
cqpsdrunall: cqpsds cqpsdt
cqpsrunall: cqpsdrunall cqpssrunall

test_cqps: test_cqps_$(PRECIS)

test_cqps_single: cqpsst $(CQPS_RUN_single)
	echo ""
	echo " Testing CUTEst interface to cqps"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) cqps -s QPBAND
	echo ""
	echo " Tests for cqps complete"

test_cqps_double: cqpsdt $(CQPS_RUN_double)
	echo ""
	echo " Testing CUTEst interface to cqps"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) cqps QPBAND
	echo ""
	echo " Tests for cqps complete"

test_cqps_nocutest: test_cqps_nocutest_$(PRECIS)

test_cqps_nocutest_single: cqpsst
	echo ""
	echo " Tests for cqps complete"

test_cqps_nocutest_double: cqpsdt
	echo ""
	echo " Tests for cqps complete"

test_spec_cqps: test_spec_cqps_$(PRECIS)

test_spec_cqps_single: cqpsss
	echo ""
	echo " Tests for cqps complete"

test_spec_cqps_double: cqpsds
	echo ""
	echo " Tests for cqps complete"

# dqp

dqp_all: dqp_cutest dqp_qplib

dqp_cutest: dqp_cutest_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: DQP ($(PRECIS) $(SUCC_CUTEST)"
dqp_cutest_single: $(DQP_CUTEST_single)
	$(RANLIB) $(LGS)
dqp_cutest_double: $(DQP_CUTEST_double)
	$(RANLIB) $(LGD)

dqp_qplib: dqp_silent dqp_qplib_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: DQP ($(PRECIS) $(SUCC_QPLIB)"
dqp_qplib_single: $(DQP_QPLIB_RUN_single)
	$(RANLIB) $(LGS)
dqp_qplib_double: $(DQP_QPLIB_RUN_double)
	$(RANLIB) $(LGD)

dqp_silent: dqp_silent_$(PRECIS)
dqp_silent_single: $(DQP_OBJECTS_single)
dqp_silent_double: $(DQP_OBJECTS_double)

dqp: dqp_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: DQP ($(PRECIS) $(SUCC)"
dqp_single: $(DQP_OBJECTS_single)
	$(RANLIB) $(LGS)
dqp_double: $(DQP_OBJECTS_double)
	$(RANLIB) $(LGD)

dqps: dqp_cutest_single
dqpd: dqp_cutest_double

dqpsrunall: dqpss dqpst
dqpdrunall: dqpds dqpdt
dqprunall: dqpdrunall dqpsrunall

indqp: indqp_$(PRECIS)
indqp_single: $(DQP_OBJECTS_single) $(OBJS)/indqp.o
indqp_double: $(DQP_OBJECTS_double) $(OBJD)/indqp.o

test_dqp: test_dqp_$(PRECIS)

test_dqp_single: dqpst $(DQP_RUN_single)
	echo ""
	echo " Testing CUTEst interface to dqp"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) dqp -s QPBAND
	echo ""
	echo " Tests for dqp complete"

test_dqp_double: dqpdt $(DQP_RUN_double)
	echo ""
	echo " Testing CUTEst interface to dqp"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) dqp QPBAND
	echo ""
	echo " Tests for dqp complete"

test_dqp_cutest: test_dqp_cutest_$(PRECIS)

test_dqp_cutest_single: $(DQP_CUTEST_single)
	echo " Testing CUTEst interface to dqp"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) dqp -s QPBAND
	echo ""
	echo " Tests for dqp complete"

test_dqp_cutest_double: $(DQP_CUTEST_double)
	echo " Testing CUTEst interface to dqp"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) dqp QPBAND
	echo ""
	echo " Tests for dqp complete"

test_dqp_nocutest: test_dqp_nocutest_$(PRECIS)

test_dqp_nocutest_single: dqpst
	echo ""
	echo " Tests for dqp complete"

test_dqp_nocutest_double: dqpdt
	echo ""
	echo " Tests for dqp complete"

test_spec_dqp: test_spec_dqp_$(PRECIS)

test_spec_dqp_single: dqpss
	echo ""
	echo " Tests for dqp complete"

test_spec_dqp_double: dqpds
	echo ""
	echo " Tests for dqp complete"

# dlp

dlp_all: dlp_cutest dlp_qplib

dlp_cutest: dlp_cutest_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: DLP ($(PRECIS) $(SUCC_CUTEST)"
dlp_cutest_single: $(DLP_CUTEST_single)
	$(RANLIB) $(LGS)
dlp_cutest_double: $(DLP_CUTEST_double)
	$(RANLIB) $(LGD)

dlp_qplib: dlp_silent dlp_qplib_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: DLP ($(PRECIS) $(SUCC_QPLIB)"
dlp_qplib_single: $(DLP_QPLIB_RUN_single)
	$(RANLIB) $(LGS)
dlp_qplib_double: $(DLP_QPLIB_RUN_double)
	$(RANLIB) $(LGD)

dlp_silent: dlp_silent_$(PRECIS)
dlp_silent_single: $(DLP_OBJECTS_single)
dlp_silent_double: $(DLP_OBJECTS_double)

dlp: dlp_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: DLP ($(PRECIS) $(SUCC)"
dlp_single: $(DLP_OBJECTS_single)
	$(RANLIB) $(LGS)
dlp_double: $(DLP_OBJECTS_double)
	$(RANLIB) $(LGD)

dlps: dlp_cutest_single
dlpd: dlp_cutest_double

dlpsrunall: dlpss dlpst
dlpdrunall: dlpds dlpdt
dlprunall: dlpdrunall dlpsrunall

indlp: indlp_$(PRECIS)
indlp_single: $(DLP_OBJECTS_single) $(OBJS)/indlp.o
indlp_double: $(DLP_OBJECTS_double) $(OBJD)/indlp.o

test_dlp: test_dlp_$(PRECIS)

test_dlp_single: dlpst $(DLP_RUN_single)
	echo ""
	echo " Testing CUTEst interface to dlp"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) dlp -s QPBAND
	echo ""
	echo " Tests for dlp complete"

test_dlp_double: dlpdt $(DLP_RUN_double)
	echo ""
	echo " Testing CUTEst interface to dlp"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) dlp QPBAND
	echo ""
	echo " Tests for dlp complete"

test_dlp_nocutest: test_dlp_nocutest_$(PRECIS)

test_dlp_nocutest_single: dlpst
	echo ""
	echo " Tests for dlp complete"

test_dlp_nocutest_double: dlpdt
	echo ""
	echo " Tests for dlp complete"

test_spec_dlp: test_spec_dlp_$(PRECIS)

test_spec_dlp_single: dlpss
	echo ""
	echo " Tests for dlp complete"

test_spec_dlp_double: dlpds
	echo ""
	echo " Tests for dlp complete"

# l1qp

l1qp_cutest: l1qp_cutest_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: L1QP ($(PRECIS) $(SUCC_CUTEST)"
l1qp_cutest_single: $(L1QP_CUTEST_single)
	$(RANLIB) $(LGS)
l1qp_cutest_double: $(L1QP_CUTEST_double)
	$(RANLIB) $(LGD)

l1qp_silent: l1qp_silent_$(PRECIS)
l1qp_silent_single: $(L1QP_OBJECTS_single)
l1qp_silent_double: $(L1QP_OBJECTS_double)

l1qp: l1qp_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: L1QP ($(PRECIS) $(SUCC)"
l1qp_single: $(L1QP_OBJECTS_single)
	$(RANLIB) $(LGS)
l1qp_double: $(L1QP_OBJECTS_double)
	$(RANLIB) $(LGD)

l1qps: l1qp_cutest_single
l1qpd: l1qp_cutest_double

l1qpsrunall: l1qpss l1qpst
l1qpdrunall: l1qpds l1qpdt
l1qprunall: l1qpdrunall l1qpsrunall

inl1qp: inl1qp_$(PRECIS)
inl1qp_single: $(L1QP_OBJECTS_single) $(OBJS)/inl1qp.o
inl1qp_double: $(L1QP_OBJECTS_double) $(OBJD)/inl1qp.o

test_l1qp: test_l1qp_$(PRECIS)

test_l1qp_single: l1qpst $(L1QP_RUN_single)
	echo ""
	echo " Testing CUTEst interface to l1qp"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) l1qp -s QPBAND
	echo ""
	echo " Tests for l1qp complete"

test_l1qp_double: l1qpdt $(L1QP_RUN_double)
	echo ""
	echo " Testing CUTEst interface to l1qp"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) l1qp QPBAND
	echo ""
	echo " Tests for l1qp complete"

test_l1qp_nocutest: test_l1qp_nocutest_$(PRECIS)

test_l1qp_nocutest_single: l1qpst
	echo ""
	echo " Tests for l1qp complete"

test_l1qp_nocutest_double: l1qpdt
	echo ""
	echo " Tests for l1qp complete"

test_spec_l1qp: test_spec_l1qp_$(PRECIS)

test_spec_l1qp_single: l1qpss
	echo ""
	echo " Tests for l1qp complete"

test_spec_l1qp_double: l1qpds
	echo ""
	echo " Tests for l1qp complete"

# lpa

lpa_cutest: lpa_cutest_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: LPA ($(PRECIS) $(SUCC_CUTEST)"
lpa_cutest_single: $(LPA_CUTEST_single)
	$(RANLIB) $(LGS)
lpa_cutest_double: $(LPA_CUTEST_double)
	$(RANLIB) $(LGD)

lpa_silent: lpa_silent_$(PRECIS)
lpa_silent_single: $(LPA_OBJECTS_single)
lpa_silent_double: $(LPA_OBJECTS_double)

lpa: lpa_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: LPA ($(PRECIS) $(SUCC)"
lpa_single: $(LPA_OBJECTS_single)
	$(RANLIB) $(LGS)
lpa_double: $(LPA_OBJECTS_double)
	$(RANLIB) $(LGD)

lpas: lpa_cutest_single
lpad: lpa_cutest_double

lpasrunall: lpass lpast
lpadrunall: lpads lpadt
lparunall: lpadrunall lpasrunall

inlpa: inlpa_$(PRECIS)
inlpa_single: $(LPA_OBJECTS_single) $(OBJS)/inlpa.o
inlpa_double: $(LPA_OBJECTS_double) $(OBJD)/inlpa.o

test_lpa: test_lpa_$(PRECIS)

test_lpa_single: lpast $(LPA_RUN_single)
	echo ""
	echo " Testing CUTEst interface to lpa"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) lpa -s LPAAND
	echo ""
	echo " Tests for lpa complete"

test_lpa_double: lpadt $(LPA_RUN_double)
	echo ""
	echo " Testing CUTEst interface to lpa"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) lpa LPAAND
	echo ""
	echo " Tests for lpa complete"

test_lpa_nocutest: test_lpa_nocutest_$(PRECIS)

test_lpa_nocutest_single: lpast
	echo ""
	echo " Tests for lpa complete"

test_lpa_nocutest_double: lpadt
	echo ""
	echo " Tests for lpa complete"

test_spec_lpa: test_spec_lpa_$(PRECIS)

test_spec_lpa_single: lpass
	echo ""
	echo " Tests for lpa complete"

test_spec_lpa_double: lpads
	echo ""
	echo " Tests for lpa complete"

# lpb

lpb_cutest: lpb_cutest_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: LPB ($(PRECIS) $(SUCC_CUTEST)"
lpb_cutest_single: $(LPB_CUTEST_single)
	$(RANLIB) $(LGS)
lpb_cutest_double: $(LPB_CUTEST_double)
	$(RANLIB) $(LGD)

lpb_silent: lpb_silent_$(PRECIS)
lpb_silent_single: $(LPB_OBJECTS_single)
lpb_silent_double: $(LPB_OBJECTS_double)

lpb: lpb_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: LPB ($(PRECIS) $(SUCC)"
lpb_single: $(LPB_OBJECTS_single)
	$(RANLIB) $(LGS)
lpb_double: $(LPB_OBJECTS_double)
	$(RANLIB) $(LGD)

lpbs: lpb_cutest_single
lpbd: lpb_cutest_double

lpbsrunall: lpbss lpbst
lpbdrunall: lpbds lpbdt
lpbrunall: lpbdrunall lpbsrunall

inlpb: inlpb_$(PRECIS)
inlpb_single: $(LPB_OBJECTS_single) $(OBJS)/inlpb.o
inlpb_double: $(LPB_OBJECTS_double) $(OBJD)/inlpb.o

test_lpb: test_lpb_$(PRECIS)

test_lpb_single: lpbst $(LPB_RUN_single)
	echo ""
	echo " Testing CUTEst interface to lpb"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) lpb -s LPBAND
	echo ""
	echo " Tests for lpb complete"

test_lpb_double: lpbdt $(LPB_RUN_double)
	echo ""
	echo " Testing CUTEst interface to lpb"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) lpb LPBAND
	echo ""
	echo " Tests for lpb complete"

test_lpb_nocutest: test_lpb_nocutest_$(PRECIS)

test_lpb_nocutest_single: lpbst
	echo ""
	echo " Tests for lpb complete"

test_lpb_nocutest_double: lpbdt
	echo ""
	echo " Tests for lpb complete"

test_spec_lpb: test_spec_lpb_$(PRECIS)

test_spec_lpb_single: lpbss
	echo ""
	echo " Tests for lpb complete"

test_spec_lpb_double: lpbds
	echo ""
	echo " Tests for lpb complete"

# eqp

eqp_cutest: eqp_cutest_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: EQP ($(PRECIS) $(SUCC_CUTEST)"
eqp_cutest_single: $(EQP_CUTEST_single)
	$(RANLIB) $(LGS)
eqp_cutest_double: $(EQP_CUTEST_double)
	$(RANLIB) $(LGD)

eqp_silent: eqp_silent_$(PRECIS)
eqp_silent_single: $(EQP_OBJECTS_single)
eqp_silent_double: $(EQP_OBJECTS_double)

eqp: eqp_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: EQP ($(PRECIS) $(SUCC)"
eqp_single: $(EQP_OBJECTS_single)
	$(RANLIB) $(LGS)
eqp_double: $(EQP_OBJECTS_double)
	$(RANLIB) $(LGD)

eqpsrunall: eqpss eqpst
eqpdrunall: eqpds eqpdt
eqprunall: eqpdrunall eqpsrunall

test_eqp: test_eqp_$(PRECIS)

test_eqp_single: eqpst $(EQP_RUN_single)
	echo ""
	echo " Testing CUTEst interface to eqp"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) eqp -s QPBAND
	echo ""
	echo " Tests for eqp complete"

test_eqp_double: eqpdt $(EQP_RUN_double)
	echo ""
	echo " Testing CUTEst interface to eqp"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) eqp QPBAND
	echo ""
	echo " Tests for eqp complete"

test_eqp_nocutest: test_eqp_nocutest_$(PRECIS)

test_eqp_nocutest_single: eqpst
	echo ""
	echo " Tests for eqp complete"

test_eqp_nocutest_double: eqpdt
	echo ""
	echo " Tests for eqp complete"

test_spec_eqp: test_spec_eqp_$(PRECIS)

test_spec_eqp_single: eqpss
	echo ""
	echo " Tests for eqp complete"

test_spec_eqp_double: eqpds
	echo ""
	echo " Tests for eqp complete"

# lls

lls_cutest: lls_cutest_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: LLS ($(PRECIS) $(SUCC_CUTEST)"
lls_cutest_single: $(LL_CUTEST_single)
	$(RANLIB) $(LGS)
lls_cutest_double: $(LL_CUTEST_double)
	$(RANLIB) $(LGD)

lls_silent: lls_silent_$(PRECIS)
lls_silent_single: $(LLS_single)
lls_silent_double: $(LLS_double)

lls: lls_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: LLS ($(PRECIS) $(SUCC)"
lls_single: $(SLLS)
	$(RANLIB) $(LGS)
lls_double: $(DLLS)
	$(RANLIB) $(LGD)

llssrunall: llsss llsst
llsdrunall: llsds llsdt
llsrunall: llsdrunall llssrunall

test_lls: test_lls_$(PRECIS)

test_lls_single: llsst $(LLS_RUN_single)
	echo ""
	echo " Testing CUTEst interface to lls"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) lls -s QPBAND
	echo ""
	echo " Tests for lls complete"

test_lls_double: llsdt $(LLS_RUN_double)
	echo ""
	echo " Testing CUTEst interface to lls"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) lls QPBAND
	echo ""
	echo " Tests for lls complete"

test_lls_nocutest: test_lls_nocutest_$(PRECIS)

test_lls_nocutest_single: llsst
	echo ""
	echo " Tests for lls complete"

test_lls_nocutest_double: llsdt
	echo ""
	echo " Tests for lls complete"

test_spec_lls: test_spec_lls_$(PRECIS)

test_spec_lls_single: llsss
	echo ""
	echo " Tests for lls complete"

test_spec_lls_double: llsds
	echo ""
	echo " Tests for lls complete"

# presolve

presolve_cutest: presolve_cutest_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: PRESOLVE ($(PRECIS) $(SUCC_CUTEST)"
presolve_cutest_single: $(PRESOLVE_CUTEST_single)
	$(RANLIB) $(LGS)
presolve_cutest_double: $(PRESOLVE_CUTEST_double)
	$(RANLIB) $(LGD)

presolve_silent: presolve_silent_$(PRECIS)
presolve_silent_single: $(PRESOLVE_OBJECTS_single)
presolve_silent_double: $(PRESOLVE_OBJECTS_double)

presolve: presolve_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: PRESOLVE ($(PRECIS) $(SUCC)"
presolve_single: $(PRESOLVE_OBJECTS_single)
	$(RANLIB) $(LGS)
presolve_double: $(PRESOLVE_OBJECTS_double)
	$(RANLIB) $(LGD)

presolvesrunall: presolvess
presolvedrunall: presolveds
presolverunall: presolvedrunall presolvesrunall

# lsqp

lsqp_silent: lsqp_silent_$(PRECIS)
lsqp_silent_single: $(LSQP_OBJECTS_single)
lsqp_silent_double: $(LSQP_OBJECTS_double)

lsqp: lsqp_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: LSQP ($(PRECIS) $(SUCC)"
lsqp_single: $(LSQP_OBJECTS_single)
	$(RANLIB) $(LGS)
lsqp_double: $(LSQP_OBJECTS_double)
	$(RANLIB) $(LGD)

lsqpsrunall: lsqpss lsqpst
lsqpdrunall: lsqpds lsqpdt
lsqprunall: lsqpdrunall lsqpsrunall

test_spec_lsqp: test_spec_lsqp_$(PRECIS)

test_spec_lsqp_single: lsqpss
	echo ""
	echo " Tests for lsqp complete"

test_spec_lsqp_double: lsqpds
	echo ""
	echo " Tests for lsqp complete"

# cro

cro_cutest: cro_cutest_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: CRO ($(PRECIS) $(SUCC_CUTEST)"
cro_cutest_single: $(CROS)
	$(RANLIB) $(LGS)
cro_cutest_double: $(CROD)
	$(RANLIB) $(LGD)

cro_silent: cro_silent_$(PRECIS)
cro_silent_single: $(QPA_OBJECTS_single)
cro_silent_double: $(QPA_OBJECTS_double)

cro: cro_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: CRO ($(PRECIS) $(SUCC)"
cro_single: $(QPA_OBJECTS_single)
	$(RANLIB) $(LGS)
cro_double: $(QPA_OBJECTS_double)
	$(RANLIB) $(LGD)

cros: cro_cutest_single
crod: cro_cutest_double

crosrunall: cross crost
crodrunall: crods crodt
crorunall: crodrunall crosrunall

test_cro: test_cro_$(PRECIS)

test_cro_single: crost $(SRUNCRO)
	echo ""
	echo " Testing CUTEst interface to cro"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) cro -s QPBAND
	echo ""
	echo " Tests for cro complete"

test_cro_double: crodt $(DRUNCRO)
	echo ""
	echo " Testing CUTEst interface to cro"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) cro QPBAND
	echo ""
	echo " Tests for cro complete"

test_cro_nocutest: test_cro_nocutest_$(PRECIS)

test_cro_nocutest_single: crost
	echo ""
	echo " Tests for cro complete"

test_cro_nocutest_double: crodt
	echo ""
	echo " Tests for cro complete"

test_spec_cro: test_spec_cro_$(PRECIS)

test_spec_cro_single: cross
	echo ""
	echo " Tests for cro complete"

test_spec_cro_double: crods
	echo ""
	echo " Tests for cro complete"

# qpp

qppsrunall: qppss qppst
qppdrunall: qppds qppdt
qpprunall: qppdrunall qppsrunall

# qpt

qpt_silent: qpt_$(PRECIS)
qpt_single: $(QPT_single)
qpt_double: $(QPT_double)

qptsrunall: qptss qptst
qptdrunall: qptds qptdt
qptrunall: qptdrunall qptsrunall

# warm

warm_cutest: warm_cutest_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: WARM ($(PRECIS) $(SUCC_CUTEST)"
warm_cutest_single: $(WARM_CUTEST_single)
	$(RANLIB) $(LGS)
warm_cutest_double: $(WARM_CUTEST_double)
	$(RANLIB) $(LGD)

#  basic packages

basics:
	( cd ../general ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            basics_silent PRECIS=$(PRECIS) PWD=$(PWD)/../general )
linearsolver:
	( cd ../general ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            linearsolver_silent PRECIS=$(PRECIS) PWD=$(PWD)/../general )
ulinearsolver:
	( cd ../general ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            ulinearsolver_silent PRECIS=$(PRECIS) PWD=$(PWD)/../general )
la04:
	( cd ../non-free/la04 ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            la04_silent PRECIS=$(PRECIS) PWD=$(PWD)/../non-free/la04 )
lmt:
	( cd ../lmt ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            lmt_silent PRECIS=$(PRECIS) PWD=$(PWD)/../lmt )
lms:
	( cd ../lms ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            lms_silent PRECIS=$(PRECIS) PWD=$(PWD)/../lms )
ir:
	( cd ../ir ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            ir_silent PRECIS=$(PRECIS) PWD=$(PWD)/../ir )
gltr:
	( cd ../gltr ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            gltr_silent PRECIS=$(PRECIS) PWD=$(PWD)/../gltr )
nlpt:
	( cd ../nlpt ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            nlpt_silent PRECIS=$(PRECIS) PWD=$(PWD)/../nlpt )
mop:
	( cd ../mop ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            mop.o PRECIS=$(PRECIS) PWD=$(PWD)/../mop )
scu:
	( cd ../general ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            scu.o PRECIS=$(PRECIS) PWD=$(PWD)/../general )
sbls:
	( cd ../sbls ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            sbls_silent PRECIS=$(PRECIS) PWD=$(PWD)/../sbls )
psls:
	( cd ../psls ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            psls_silent PRECIS=$(PRECIS) PWD=$(PWD)/../psls )
sls:
	( cd ../sls ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            sls_silent PRECIS=$(PRECIS) PWD=$(PWD)/../sls )
uls:
	( cd ../uls ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            uls_silent PRECIS=$(PRECIS) PWD=$(PWD)/../uls )
fdc:
	( cd ../fdc ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            fdc.o PRECIS=$(PRECIS) PWD=$(PWD)/../fdc )
fit:
	( cd ../fit ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            fit_silent PRECIS=$(PRECIS) PWD=$(PWD)/../fit )
lpqp:
	( cd ../lpqp ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            lpqp_silent PRECIS=$(PRECIS) PWD=$(PWD)/../lpqp )
copyright:
	( cd ../general ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            copyright.o PRECIS=$(PRECIS) PWD=$(PWD)/../general )
norms:
	( cd ../general ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            norms.o PRECIS=$(PRECIS) PWD=$(PWD)/../general )
trs:
	( cd ../trs ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            trs_silent PRECIS=$(PRECIS) PWD=$(PWD)/../trs )


# profiling runs (system dependent)

qpapixie: $(QPADT)
	$(FORTRAN) $(RUNFFLAGS) -o run_qpa $(RQPADT)
	pixie ./run_qpa
	./run_qpa.pixie
	prof -pixie -lines ./run_qpa >& out
	rm ./run_qpa

qpancov: $(QPADT)
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_qpa $(RQPADT)
	ncov -o out ./run_qpa
	rm ./run_qpa

qpbpixie: $(QPBDT)
	$(FORTRAN) $(RUNFFLAGS) -o run_qpb $(QPBDT)
	pixie ./run_qpb
	./run_qpb.pixie
	prof -pixie -lines ./run_qpb >& out
	rm ./run_qpb

qpbncov: $(QPBDT)
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_qpb $(RQPBDT)
	ncov -o out ./run_qpb
	rm ./run_qpb

# run spec-sheet example tests

crods: $(CRODS)
	cd ../cro ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_cro $(RCRODS)
	- ../cro/run_cro >& ../cro/crods.output
#	../cro/run_cro
	cat ../cro/crods.output
	rm ../cro/run_cro

crodt: $(CRODT)
	echo " Exhaustive test of subroutine interface to cro"
	cd ../cro ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_cro $(RCRODT)
	- ../cro/run_cro >& ../cro/crodt.output
	cat ../cro/crodt.output
	rm ../cro/run_cro

cross: $(CROSS)
	cd ../cro ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_cro $(RCROSS)
	- ../cro/run_cro >& ../cro/cros.output
	cat ../cro/cros.output
	rm ../cro/run_cro

crost: $(CROST)
	echo " Exhaustive test of subroutine interface to cro"
	cd ../cro ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_cro $(RCROST)
	- ../cro/run_cro >& ../cro/crot.output
	cat ../cro/crot.output
	rm ../cro/run_cro

qpads: $(QPADS)
	cd ../qpa ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_qpa $(RQPADS)
	- ../qpa/run_qpa >& ../qpa/qpads.output
	cat ../qpa/qpads.output
	rm ../qpa/run_qpa

qpadt: $(QPADT)
	echo " Exhaustive test of subroutine interface to qpa"
	cd ../qpa ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_qpa $(RQPADT)
#	- ../qpa/run_qpa
#	- valgrind -v --tool=memcheck --leak-check=yes --show-reachable=yes ../qpa/run_qpa >& ../qpa/qpadt.output
	- ../qpa/run_qpa >& ../qpa/qpadt.output
	cat ../qpa/qpadt.output
	rm ../qpa/run_qpa

qpass: $(QPASS)
	cd ../qpa ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_qpa $(RQPASS)
	- ../qpa/run_qpa >& ../qpa/qpass.output
	cat ../qpa/qpass.output
	rm ../qpa/run_qpa

qpast: $(QPAST)
	echo " Exhaustive test of subroutine interface to qpa"
	cd ../qpa ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_qpa $(RQPAST)
	- ../qpa/run_qpa >& ../qpa/qpast.output
	cat ../qpa/qpast.output
	rm ../qpa/run_qpa

qpbds: $(QPBDS)
	cd ../qpb ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_qpb $(RQPBDS)
	- ../qpb/run_qpb
#	- ../qpb/run_qpb >& ../qpb/qpbds.output
#	cat ../qpb/qpbds.output
	rm ../qpb/run_qpb

qpbds2: $(QPBDS2)
	cd ../qpb ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_qpb $(RQPBDS2)
	- ../qpb/run_qpb
#	- ../qpb/run_qpb >& ../qpb/qpbds.output
#	cat ../qpb/qpbds.output
	rm ../qpb/run_qpb

qpbdt: $(QPBDT)
	echo " Exhaustive test of subroutine interface to qpb"
	cd ../qpb ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_qpb $(RQPBDT)
	- ../qpb/run_qpb >& ../qpb/qpbdt.output
#	- valgrind -v --tool=memcheck --leak-check=yes --show-reachable=yes ../qpb/run_qpb >& ../qpb/qpbdt.output
	cat ../qpb/qpbdt.output
	rm ../qpb/run_qpb

qpbss: $(QPBSS)
	cd ../qpb ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_qpb $(RQPBSS)
	- ../qpb/run_qpb >& ../qpb/qpbss.output
	cat ../qpb/qpbss.output
	rm ../qpb/run_qpb

qpbst: $(QPBST)
	echo " Exhaustive test of subroutine interface to qpb"
	cd ../qpb ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_qpb $(RQPBST)
	- ../qpb/run_qpb >& ../qpb/qpbst.output
	cat ../qpb/qpbst.output
	rm ../qpb/run_qpb

qpcds: $(QPCDS)
	cd ../qpc ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_qpc $(RQPCDS)
#	- ../qpc/run_qpc
	- ../qpc/run_qpc >& ../qpc/qpcds.output
	cat ../qpc/qpcds.output
	rm ../qpc/run_qpc

qpcds2: $(QPCDS2)
	cd ../qpc ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_qpc $(RQPCDS2)
	- ../qpc/run_qpc
#	rm ../qpc/run_qpc

qpcdt: $(QPCDT)
	echo " Exhaustive test of subroutine interface to qpc"
	cd ../qpc ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_qpc $(RQPCDT)
#	- valgrind -v --tool=memcheck --leak-check=full --show-reachable=yes ../qpc/run_qpc
	- ../qpc/run_qpc >& ../qpc/qpcdt.output
	cat ../qpc/qpcdt.output
	rm ../qpc/run_qpc

qpcss: $(QPCSS)
	cd ../qpc ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_qpc $(RQPCSS)
	- ../qpc/run_qpc >& ../qpc/qpcss.output
	cat ../qpc/qpcss.output
	rm ../qpc/run_qpc

qpcst: $(QPCST)
	echo " Exhaustive test of subroutine interface to qpc"
	cd ../qpc ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_qpc $(RQPCST)
	- ../qpc/run_qpc >& ../qpc/qpcst.output
	cat ../qpc/qpcst.output
	rm ../qpc/run_qpc

qpeds: $(QPEDS)
	cd ../qpe ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_qpe $(RQPEDS)
	cd ../qpe ; $(RMOOC)
	- ../qpe/run_qpe >& ../qpe/qpeds.output
	cat ../qpe/qpeds.output
	rm ../qpe/run_qpe

qpeds2: $(QPEDS2)
	cd ../qpe ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_qpe $(RQPEDS2)
	cd ../qpe ; $(RMOOC)
	- ../qpe/run_qpe
	rm ../qpe/run_qpe

qpedt: $(QPEDT)
	echo " Exhaustive test of subroutine interface to qpe"
	cd ../qpe ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_qpe $(RQPEDT)
	cd ../qpe ; $(RMOOC)
	- ../qpe/run_qpe >& ../qpe/qpedt.output
	cat ../qpe/qpedt.output
	rm ../qpe/run_qpe

qpess: $(QPESS)
	cd ../qpe ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_qpe $(RQPESS)
	cd ../qpe ; $(RMOOC)
	- ../qpe/run_qpe >& ../qpe/qpess.output
	cat ../qpe/qpess.output
	rm ../qpe/run_qpe

qpest: $(QPEST)
	echo " Exhaustive test of subroutine interface to qpe"
	cd ../qpe ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_qpe $(RQPEST)
	cd ../qpe ; $(RMOOC)
	- ../qpe/run_qpe >& ../qpe/qpest.output
	cat ../qpe/qpest.output
	rm ../qpe/run_qpe

qpds: $(QPDS)
	cd ../qp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_qp $(RQPDS)
#	- ../qp/run_qp
	- ../qp/run_qp >& ../qp/qp_specd.output
	cat ../qp/qp_specd.output
	rm ../qp/run_qp

qpds2: $(QPDS2)
	cd ../qp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_qp $(RQPDS2)
	- ../qp/run_qp
#	rm ../qp/run_qp

qpdt: $(QPDT)
	echo " Exhaustive test of subroutine interface to qp"
	cd ../qp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_qp $(RQPDT)
#	- valgrind -v --tool=memcheck --leak-check=full --show-reachable=yes--track-origins=yes ./run_qp
	- ../qp/run_qp >& ../qp/qp_testd.output
	cat ../qp/qp_testd.output
	rm ../qp/run_qp

qpdt_valgrind: $(QPDT)
	echo " Exhaustive test of subroutine interface to qp"
	cd ../qp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_qp $(RQPDT)
	- valgrind -v --tool=memcheck --leak-check=yes \
            --show-reachable=yes ../qp/run_qp
	rm ../qp/run_qp

qpss: $(QPSS)
	cd ../qp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_qp $(RQPSS)
	- ../qp/run_qp >& ../qp/qp_specs.output
	cat ../qp/qp_specs.output
	rm ../qp/run_qp

qpst: $(QPST)
	echo " Exhaustive test of subroutine interface to qp"
	cd ../qp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_qp $(RQPST)
	- ../qp/run_qp >& ../qp/qp_tests.output
	cat ../qp/qp_tests.output
	rm ../qp/run_qp

bqpds: $(BQPDS)
	cd ../bqp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_bqp $(RBQPDS)
	cd ../bqp ; $(RMOOC)
	- ../bqp/run_bqp >& ../bqp/bqpds.output
	cat ../bqp/bqpds.output
	rm ../bqp/run_bqp

bqpds4: $(BQPDS4)
	cd ../bqp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_bqp $(RBQPDS4)
	cd ../bqp ; $(RMOOC)
	- ../bqp/run_bqp >& ../bqp/bqpds4.output
	cat ../bqp/bqpds4.output
	rm ../bqp/run_bqp

bqpbds: $(BQPBDS)
	cd ../bqpb ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) \
                       -o run_bqpb $(RBQPBDS)
	cd ../bqpb ; $(RMOOC)
	- ../bqpb/run_bqpb >& ../bqpb/bqpbds.output
	cat ../bqpb/bqpbds.output
	rm ../bqpb/run_bqpb

bqpbds2: $(BQPBDS2)
	cd ../bqpb ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) \
                      -o run_bqpb $(RBQPBDS2)
	cd ../bqpb ; $(RMOOC)
	- ../bqpb/run_bqpb >& ../bqpb/bqpbds2.output
	cat ../bqpb/bqpbds2.output
	rm ../bqpb/run_bqpb

bqpbds3: $(BQPBDS3)
	cd ../bqpb ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) \
                      -o run_bqpb $(RBQPBDS3)
	cd ../bqpb ; $(RMOOC)
	- ../bqpb/run_bqpb >& ../bqpb/bqpbds3.output
	cat ../bqpb/bqpbds3.output
	rm ../bqpb/run_bqpb

bqpbdt: $(BQPBDT)
	echo " Exhaustive test of subroutine interface to bqpb"
	cd ../bqpb ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) \
                      -o run_bqpb $(RBQPBDT)
	cd ../bqpb ; $(RMOOC)
	- ../bqpb/run_bqpb >& ../bqpb/bqpbdt.output
	cat ../bqpb/bqpbdt.output
	rm ../bqpb/run_bqpb

bqpbss: $(BQPBSS)
	cd ../bqpb ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) \
                       -o run_bqpb $(RBQPBSS)
	cd ../bqpb ; $(RMOOC)
	- ../bqpb/run_bqpb >& ../bqpb/bqpbss.output
	cat ../bqpb/bqpbss.output
	rm ../bqpb/run_bqpb

bqpbss2: $(BQPBSS2)
	cd ../bqpb ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) \
                      -o run_bqpb $(RBQPBSS2)
	cd ../bqpb ; $(RMOOC)
	- ../bqpb/run_bqpb >& ../bqpb/bqpbss2.output
	cat ../bqpb/bqpbss2.output
	rm ../bqpb/run_bqpb

bqpbss3: $(BQPBSS3)
	cd ../bqpb ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) \
                       -o run_bqpb $(RBQPBSS3)
	cd ../bqpb ; $(RMOOC)
	- ../bqpb/run_bqpb >& ../bqpb/bqpbss3.output
	cat ../bqpb/bqpbss3.output
	rm ../bqpb/run_bqpb

bqpbst: $(BQPBST)
	echo " Exhaustive test of subroutine interface to bqpb"
	cd ../bqpb ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) \
                      -o run_bqpb $(RBQPBST)
	cd ../bqpb ; $(RMOOC)
	- ../bqpb/run_bqpb >& ../bqpb/bqpbst.output
	cat ../bqpb/bqpbst.output
	rm ../bqpb/run_bqpb

cqpds: $(CQPDS)
	cd ../cqp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_cqp $(RCQPDS)
	cd ../cqp ; $(RMOOC)
#	- ../cqp/run_cqp
	- ../cqp/run_cqp >& ../cqp/cqpds.output
	cat ../cqp/cqpds.output
	rm ../cqp/run_cqp

cqpds2: $(CQPDS2)
	cd ../cqp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_cqp $(RCQPDS2)
	cd ../cqp ; $(RMOOC)
	- ../cqp/run_cqp >& ../cqp/cqpds2.output
	cat ../cqp/cqpds2.output
	rm ../cqp/run_cqp

cqpds3: $(CQPDS3)
	cd ../cqp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_cqp $(RCQPDS3)
	cd ../cqp ; $(RMOOC)
	- ../cqp/run_cqp >& ../cqp/cqpds3.output
	cat ../cqp/cqpds3.output
	rm ../cqp/run_cqp

cqpds_cuda: $(CQPDS)
	cd ../cqp ; $(CUDACOMP) $(CUDAOPENMP) -o run_cqp \
                      $(RCQPDS) $(CUDALIBS) $(RUNFFLAGSCUDA) $(SPECIAL)
	cd ../cqp ; $(RMOOC)
	- ../cqp//run_cqp
#	- ../cqp//run_cqp >& ../cqp/cqpds.output
#	cat ../cqp/cqpds.output
#	rm ../cqp/run_cqp

cqpdt: $(CQPDT)
	echo " Exhaustive test of subroutine interface to cqp"
	cd ../cqp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_cqp $(RCQPDT)
	cd ../cqp ; $(RMOOC)
	- ../cqp/run_cqp >& ../cqp/cqpdt.output
	cat ../cqp/cqpdt.output
#	- ../cqp/run_cqp
	rm ../cqp/run_cqp

cqpdt_cuda: $(CQPDT)
	cd ../cqp ; $(CUDACOMP) $(CUDAOPENMP) -o run_cqp \
                      $(RCQPDT) $(CUDALIBS) $(RUNFFLAGSCUDA) $(SPECIAL)
	cd ../cqp ; $(RMOOC)
	- ../cqp//run_cqp
#	- ../cqp//run_cqp >& ../cqp/cqpdt.output
#	cat ../cqp/cqpdt.output
	rm ../cqp/run_cqp

cqpss: $(CQPSS)
	cd ../cqp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_cqp $(RCQPSS)
	cd ../cqp ; $(RMOOC)
	- ../cqp/run_cqp >& ../cqp/cqpss.output
	cat ../cqp/cqpss.output
	rm ../cqp/run_cqp

cqpss2: $(CQPSS2)
	cd ../cqp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_cqp $(RCQPSS2)
	cd ../cqp ; $(RMOOC)
	- ../cqp/run_cqp >& ../cqp/cqpss2.output
	cat ../cqp/cqpss2.output
	rm ../cqp/run_cqp

cqpss3: $(CQPSS3)
	cd ../cqp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_cqp $(RCQPSS3)
	cd ../cqp ; $(RMOOC)
	- ../cqp/run_cqp >& ../cqp/cqpss3.output
	cat ../cqp/cqpss3.output
	rm ../cqp/run_cqp

cqpst: $(CQPST)
	echo " Exhaustive test of subroutine interface to cqp"
	cd ../cqp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_cqp $(RCQPST)
	cd ../cqp ; $(RMOOC)
	- ../cqp/run_cqp >& ../cqp/cqpst.output
	cat ../cqp/cqpst.output
	rm ../cqp/run_cqp

ccqpds: $(CCQPDS)
	cd ../ccqp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_ccqp \
                                $(RCCQPDS)
	cd ../ccqp ; $(RMOOC)
	- ../ccqp/run_ccqp >& ../ccqp/ccqpds.output
	cat ../ccqp/ccqpds.output
	rm ../ccqp/run_ccqp

ccqpds2: $(CCQPDS2)
	cd ../ccqp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_ccqp \
                     $(RCCQPDS2)
	cd ../ccqp ; $(RMOOC)
	- ../ccqp/run_ccqp >& ../ccqp/ccqpds2.output
	cat ../ccqp/ccqpds2.output
	rm ../ccqp/run_ccqp

ccqpds3: $(CCQPDS3)
	cd ../ccqp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_ccqp \
                     $(RCCQPDS3)
	cd ../ccqp ; $(RMOOC)
	- ../ccqp/run_ccqp >& ../ccqp/ccqpds3.output
	cat ../ccqp/ccqpds3.output
	rm ../ccqp/run_ccqp

ccqpdt: $(CCQPDT)
	echo " Exhaustive test of subroutine interface to ccqp"
	cd ../ccqp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_ccqp \
                     $(RCCQPDT)
	cd ../ccqp ; $(RMOOC)
	- ../ccqp/run_ccqp >& ../ccqp/ccqpdt.output
	cat ../ccqp/ccqpdt.output
	rm ../ccqp/run_ccqp

ccqpss: $(CCQPSS)
	cd ../ccqp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_ccqp \
                     $(RCCQPSS)
	cd ../ccqp ; $(RMOOC)
	- ../ccqp/run_ccqp >& ../ccqp/ccqpss.output
	cat ../ccqp/ccqpss.output
	rm ../ccqp/run_ccqp

ccqpss2: $(CCQPSS2)
	cd ../ccqp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_ccqp \
                     $(RCCQPSS2)
	cd ../ccqp ; $(RMOOC)
	- ../ccqp/run_ccqp >& ../ccqp/ccqpss2.output
	cat ../ccqp/ccqpss2.output
	rm ../ccqp/run_ccqp

ccqpss3: $(CCQPSS3)
	cd ../ccqp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_ccqp \
                     $(RCCQPSS3)
	cd ../ccqp ; $(RMOOC)
	- ../ccqp/run_ccqp >& ../ccqp/ccqpss3.output
	cat ../ccqp/ccqpss3.output
	rm ../ccqp/run_ccqp

ccqpst: $(CCQPST)
	echo " Exhaustive test of subroutine interface to ccqp"
	cd ../ccqp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_ccqp \
                     $(RCCQPST)
	cd ../ccqp ; $(RMOOC)
	- ../ccqp/run_ccqp >& ../ccqp/ccqpst.output
	cat ../ccqp/ccqpst.output
	rm ../ccqp/run_ccqp

cqpsds: $(CQPSDS)
	cd ../cqps ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_cqps \
                                $(RCQPSDS)
	cd ../cqps ; $(RMOOC)
	- ../cqps/run_cqps >& ../cqps/cqpsds.output
	cat ../cqps/cqpsds.output
	rm ../cqps/run_cqps

cqpsds2: $(CQPSDS2)
	cd ../cqps ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_cqps \
                     $(RCQPSDS2)
	cd ../cqps ; $(RMOOC)
	- ../cqps/run_cqps >& ../cqps/cqpsds2.output
	cat ../cqps/cqpsds2.output
	rm ../cqps/run_cqps

cqpsds3: $(CQPSDS3)
	cd ../cqps ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_cqps \
                     $(RCQPSDS3)
	cd ../cqps ; $(RMOOC)
	- ../cqps/run_cqps >& ../cqps/cqpsds3.output
	cat ../cqps/cqpsds3.output
	rm ../cqps/run_cqps

cqpsdt: $(CQPSDT)
	echo " Exhaustive test of subroutine interface to cqps"
	cd ../cqps ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_cqps \
                     $(RCQPSDT)
	cd ../cqps ; $(RMOOC)
	- ../cqps/run_cqps >& ../cqps/cqpsdt.output
	cat ../cqps/cqpsdt.output
	rm ../cqps/run_cqps

cqpsss: $(CQPSSS)
	cd ../cqps ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_cqps \
                     $(RCQPSSS)
	cd ../cqps ; $(RMOOC)
	- ../cqps/run_cqps >& ../cqps/cqpsss.output
	cat ../cqps/cqpsss.output
	rm ../cqps/run_cqps

cqpsss2: $(CQPSSS2)
	cd ../cqps ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_cqps \
                     $(RCQPSSS2)
	cd ../cqps ; $(RMOOC)
	- ../cqps/run_cqps >& ../cqps/cqpsss2.output
	cat ../cqps/cqpsss2.output
	rm ../cqps/run_cqps

cqpsss3: $(CQPSSS3)
	cd ../cqps ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_cqps \
                     $(RCQPSSS3)
	cd ../cqps ; $(RMOOC)
	- ../cqps/run_cqps >& ../cqps/cqpsss3.output
	cat ../cqps/cqpsss3.output
	rm ../cqps/run_cqps

cqpsst: $(CQPSST)
	echo " Exhaustive test of subroutine interface to cqps"
	cd ../cqps ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_cqps \
                     $(RCQPSST)
	cd ../cqps ; $(RMOOC)
	- ../cqps/run_cqps >& ../cqps/cqpsst.output
	cat ../cqps/cqpsst.output
	rm ../cqps/run_cqps

dqpds: $(DQPDS)
	cd ../dqp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_dqp $(RDQPDS)
	cd ../dqp ; $(RMOOC)
#	- ../dqp/run_dqp
	- ../dqp/run_dqp >& ../dqp/dqpds.output
	cat ../dqp/dqpds.output
	rm ../dqp/run_dqp

dqpds2: $(DQPDS2)
	cd ../dqp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_dqp $(RDQPDS2)
	cd ../dqp ; $(RMOOC)
	- ../dqp/run_dqp >& ../dqp/dqpds2.output
	cat ../dqp/dqpds2.output
	rm ../dqp/run_dqp

dqpds3: $(DQPDS3)
	cd ../dqp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_dqp $(RDQPDS3)
	cd ../dqp ; $(RMOOC)
	- ../dqp/run_dqp >& ../dqp/dqpds3.output
	cat ../dqp/dqpds3.output
	rm ../dqp/run_dqp

dqpds4: $(DQPDS4)
	cd ../dqp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_dqp $(RDQPDS4)
	cd ../dqp ; $(RMOOC)
	- ../dqp/run_dqp >& ../dqp/dqpds4.output
	cat ../dqp/dqpds4.output
	rm ../dqp/run_dqp

dqpdt: $(DQPDT)
	echo " Exhaustive test of subroutine interface to dqp"
	cd ../dqp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_dqp $(RDQPDT)
	cd ../dqp ; $(RMOOC)
	- ../dqp/run_dqp >& ../dqp/dqpdt.output
	cat ../dqp/dqpdt.output
#	- ../dqp/run_dqp
	rm ../dqp/run_dqp

dqpss: $(DQPSS)
	cd ../dqp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_dqp $(RDQPSS)
	cd ../dqp ; $(RMOOC)
	- ../dqp/run_dqp >& ../dqp/dqpss.output
	cat ../dqp/dqpss.output
	rm ../dqp/run_dqp

dqpss2: $(DQPSS2)
	cd ../dqp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_dqp $(RDQPSS2)
	cd ../dqp ; $(RMOOC)
	- ../dqp/run_dqp >& ../dqp/dqpss2.output
	cat ../dqp/dqpss2.output
	rm ../dqp/run_dqp

dqpss3: $(DQPSS3)
	cd ../dqp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_dqp $(RDQPSS3)
	cd ../dqp ; $(RMOOC)
	- ../dqp/run_dqp >& ../dqp/dqpss3.output
	cat ../dqp/dqpss3.output
	rm ../dqp/run_dqp

dqpss4: $(DQPSS4)
	cd ../dqp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_dqp $(RDQPSS4)
	cd ../dqp ; $(RMOOC)
	- ../dqp/run_dqp >& ../dqp/dqpss4.output
	cat ../dqp/dqpss4.output
	rm ../dqp/run_dqp

dqpst: $(DQPST)
	echo " Exhaustive test of subroutine interface to dqp"
	cd ../dqp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_dqp $(RDQPST)
	cd ../dqp ; $(RMOOC)
	- ../dqp/run_dqp >& ../dqp/dqpst.output
	cat ../dqp/dqpst.output
	rm ../dqp/run_dqp

dlpds: $(DLPDS)
	cd ../dlp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_dlp $(RDLPDS)
	cd ../dlp ; $(RMOOC)
#	- ../dlp/run_dlp
	- ../dlp/run_dlp >& ../dlp/dlpds.output
	cat ../dlp/dlpds.output
	rm ../dlp/run_dlp

dlpds2: $(DLPDS2)
	cd ../dlp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_dlp $(RDLPDS2)
	cd ../dlp ; $(RMOOC)
	- ../dlp/run_dlp >& ../dlp/dlpds2.output
	cat ../dlp/dlpds2.output
	rm ../dlp/run_dlp

dlpds3: $(DLPDS3)
	cd ../dlp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_dlp $(RDLPDS3)
	cd ../dlp ; $(RMOOC)
	- ../dlp/run_dlp >& ../dlp/dlpds3.output
	cat ../dlp/dlpds3.output
	rm ../dlp/run_dlp

dlpds4: $(DLPDS4)
	cd ../dlp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_dlp $(RDLPDS4)
	cd ../dlp ; $(RMOOC)
	- ../dlp/run_dlp >& ../dlp/dlpds4.output
	cat ../dlp/dlpds4.output
	rm ../dlp/run_dlp

dlpdt: $(DLPDT)
	echo " Exhaustive test of subroutine interface to dlp"
	cd ../dlp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_dlp $(RDLPDT)
	cd ../dlp ; $(RMOOC)
	- ../dlp/run_dlp >& ../dlp/dlpdt.output
	cat ../dlp/dlpdt.output
#	- ../dlp/run_dlp
	rm ../dlp/run_dlp

dlpss: $(DLPSS)
	cd ../dlp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_dlp $(RDLPSS)
	cd ../dlp ; $(RMOOC)
	- ../dlp/run_dlp >& ../dlp/dlpss.output
	cat ../dlp/dlpss.output
	rm ../dlp/run_dlp

dlpss2: $(DLPSS2)
	cd ../dlp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_dlp $(RDLPSS2)
	cd ../dlp ; $(RMOOC)
	- ../dlp/run_dlp >& ../dlp/dlpss2.output
	cat ../dlp/dlpss2.output
	rm ../dlp/run_dlp

dlpss3: $(DLPSS3)
	cd ../dlp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_dlp $(RDLPSS3)
	cd ../dlp ; $(RMOOC)
	- ../dlp/run_dlp >& ../dlp/dlpss3.output
	cat ../dlp/dlpss3.output
	rm ../dlp/run_dlp

dlpss4: $(DLPSS4)
	cd ../dlp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_dlp $(RDLPSS4)
	cd ../dlp ; $(RMOOC)
	- ../dlp/run_dlp >& ../dlp/dlpss4.output
	cat ../dlp/dlpss4.output
	rm ../dlp/run_dlp

dlpst: $(DLPST)
	echo " Exhaustive test of subroutine interface to dlp"
	cd ../dlp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_dlp $(RDLPST)
	cd ../dlp ; $(RMOOC)
	- ../dlp/run_dlp >& ../dlp/dlpst.output
	cat ../dlp/dlpst.output
	rm ../dlp/run_dlp

l1qpds: $(L1QPDS)
	cd ../l1qp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_l1qp \
                                $(RL1QPDS)
	cd ../l1qp ; $(RMOOC)
	- ../l1qp/run_l1qp >& ../l1qp/l1qpds.output
	cat ../l1qp/l1qpds.output
	rm ../l1qp/run_l1qp

l1qpds2: $(L1QPDS2)
	cd ../l1qp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_l1qp \
                     $(RL1QPDS2)
	cd ../l1qp ; $(RMOOC)
	- ../l1qp/run_l1qp >& ../l1qp/l1qpds2.output
	cat ../l1qp/l1qpds2.output
	rm ../l1qp/run_l1qp

l1qpds3: $(L1QPDS3)
	cd ../l1qp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_l1qp \
                     $(RL1QPDS3)
	cd ../l1qp ; $(RMOOC)
	- ../l1qp/run_l1qp >& ../l1qp/l1qpds3.output
	cat ../l1qp/l1qpds3.output
	rm ../l1qp/run_l1qp

l1qpdt: $(L1QPDT)
	echo " Exhaustive test of subroutine interface to l1qp"
	cd ../l1qp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_l1qp \
                     $(RL1QPDT)
	cd ../l1qp ; $(RMOOC)
	- ../l1qp/run_l1qp >& ../l1qp/l1qpdt.output
	cat ../l1qp/l1qpdt.output
	rm ../l1qp/run_l1qp

l1qpss: $(L1QPSS)
	cd ../l1qp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_l1qp \
                     $(RL1QPSS)
	cd ../l1qp ; $(RMOOC)
	- ../l1qp/run_l1qp >& ../l1qp/l1qpss.output
	cat ../l1qp/l1qpss.output
	rm ../l1qp/run_l1qp

l1qpss2: $(L1QPSS2)
	cd ../l1qp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_l1qp \
                     $(RL1QPSS2)
	cd ../l1qp ; $(RMOOC)
	- ../l1qp/run_l1qp >& ../l1qp/l1qpss2.output
	cat ../l1qp/l1qpss2.output
	rm ../l1qp/run_l1qp

l1qpss3: $(L1QPSS3)
	cd ../l1qp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_l1qp \
                     $(RL1QPSS3)
	cd ../l1qp ; $(RMOOC)
	- ../l1qp/run_l1qp >& ../l1qp/l1qpss3.output
	cat ../l1qp/l1qpss3.output
	rm ../l1qp/run_l1qp

l1qpst: $(L1QPST)
	echo " Exhaustive test of subroutine interface to l1qp"
	cd ../l1qp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_l1qp \
                     $(RL1QPST)
	cd ../l1qp ; $(RMOOC)
	- ../l1qp/run_l1qp >& ../l1qp/l1qpst.output
	cat ../l1qp/l1qpst.output
	rm ../l1qp/run_l1qp

lsqpds: $(LSQPDS)
	cd ../lsqp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) \
                       -o run_lsqp $(RLSQPDS)
	- ../lsqp//run_lsqp >& ../lsqp/lsqpds.output
	cat ../lsqp/lsqpds.output
	rm ../lsqp/run_lsqp

lsqpdt: $(LSQPDT)
	echo " Exhaustive test of subroutine interface to lsqp"
	cd ../lsqp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) \
                       -o run_lsqp $(RLSQPDT)
	- ../lsqp/run_lsqp >& ../lsqp/lsqpdt.output
	cat ../lsqp/lsqpdt.output
	rm ../lsqp/run_lsqp

lsqpss: $(LSQPSS)
	cd ../lsqp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) \
                                 -o run_lsqp $(RLSQPSS)
	- ../lsqp//run_lsqp >& ../lsqp/lsqpss.output
	cat ../lsqp/lsqpss.output
	rm ../lsqp/run_lsqp

lsqpst: $(LSQPST)
	echo " Exhaustive test of subroutine interface to lsqp"
	cd ../lsqp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) \
                      -o run_lsqp $(RLSQPST)
	- ../lsqp/run_lsqp >& ../lsqp/lsqpst.output
	cat ../lsqp/lsqpst.output
	rm ../lsqp/run_lsqp

lpads: $(LPADS)
	cd ../lpa ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_lpa $(RLPADS)
	- ../lpa/run_lpa >& ../lpa/lpads.output
	cat ../lpa/lpads.output
	rm ../lpa/run_lpa

lpadt: $(LPADT)
	echo " Exhaustive test of subroutine interface to lpa"
	cd ../lpa ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_lpa $(RLPADT)
	- ../lpa/run_lpa >& ../lpa/lpadt.output
	cat ../lpa/lpadt.output
	rm ../lpa/run_lpa

lpass: $(LPASS)
	cd ../lpa ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_lpa $(RLPASS)
	- ../lpa/run_lpa >& ../lpa/lpass.output
	cat ../lpa/lpass.output
	rm ../lpa/run_lpa

lpast: $(LPAST)
	echo " Exhaustive test of subroutine interface to lpa"
	cd ../lpa ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_lpa $(RLPAST)
	- ../lpa/run_lpa >& ../lpa/lpast.output
	cat ../lpa/lpast.output
	rm ../lpa/run_lpa

lpbds: $(LPBDS)
	cd ../lpb ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_lpb $(RLPBDS)
	- ../lpb/run_lpb >& ../lpb/lpbds.output
	cat ../lpb/lpbds.output
	rm ../lpb/run_lpb

lpbdt: $(LPBDT)
	echo " Exhaustive test of subroutine interface to lpb"
	cd ../lpb ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_lpb $(RLPBDT)
	- ../lpb/run_lpb >& ../lpb/lpbdt.output
	cat ../lpb/lpbdt.output
	rm ../lpb/run_lpb

lpbss: $(LPBSS)
	cd ../lpb ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_lpb $(RLPBSS)
	- ../lpb/run_lpb >& ../lpb/lpbss.output
	cat ../lpb/lpbss.output
	rm ../lpb/run_lpb

lpbst: $(LPBST)
	echo " Exhaustive test of subroutine interface to lpb"
	cd ../lpb ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_lpb $(RLPBST)
	- ../lpb/run_lpb >& ../lpb/lpbst.output
	cat ../lpb/lpbst.output
	rm ../lpb/run_lpb

eqpds: $(EQPDS)
	cd ../eqp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_eqp $(REQPDS)
	- ../eqp/run_eqp >& ../eqp/eqpds.output
	cat ../eqp/eqpds.output
	rm ../eqp//run_eqp

eqpds2: $(EQPDS2)
	cd ../eqp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_eqp $(REQPDS2)
	- ../eqp//run_eqp
	rm ../eqp/run_eqp

eqpdt: $(EQPDT)
	echo " Exhaustive test of subroutine interface to eqp"
	cd ../eqp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_eqp $(REQPDT)
#	- ../eqp/run_eqp
	- ../eqp//run_eqp >& ../eqp/eqpdt.output
	cat ../eqp/eqpdt.output
	rm ../eqp/run_eqp

eqpss: $(EQPSS)
	cd ../eqp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_eqp $(REQPSS)
	- ../eqp/run_eqp >& ../eqp/eqpss.output
	cat ../eqp/eqpss.output
	rm ../eqp/run_eqp

eqpst: $(EQPST)
	echo " Exhaustive test of subroutine interface to eqp"
	cd ../eqp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_eqp $(REQPST)
	- ../eqp/run_eqp >& ../eqp/eqpst.output
	cat ../eqp/eqpst.output
	rm ../eqp/run_eqp

llsds: $(LLSDS)
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_lls $(RLLSDS)
	- ./run_lls >& llsds.output
	cat llsds.output
	rm ./run_lls

llsdt: $(LLSDT)
	echo " Exhaustive test of subroutine interface to lls"
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_lls $(RLLSDT)
	- ./run_lls >& llsdt.output
	cat llsdt.output
	rm ./run_lls

llsss: $(LLSSS)
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_lls $(RLLSSS)
	- ./run_lls >& llsss.output
	cat llsss.output
	rm ./run_lls

llsst: $(LLSST)
	echo " Exhaustive test of subroutine interface to lls"
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_lls $(RLLSST)
	- ./run_lls >& llsst.output
	cat llsst.output
	rm ./run_lls

rpdds: $(RPDDS)
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_rpd $(RRPDDS)
	- ./run_rpd >& rpdds.output
	cat rpdds.output
	rm ./run_rpd

rpddt: $(RPDDT)
	echo " Exhaustive test of subroutine interface to rpd"
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_rpd $(RRPDDT)
	- ./run_rpd >& rpddt.output
	cat rpddt.output
	rm ./run_rpd

rpdss: $(RPDSS)
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_rpd $(RRPDSS)
	- ./run_rpd >& rpdss.output
	cat rpdss.output
	rm ./run_rpd

rpdst: $(RPDST)
	echo " Exhaustive test of subroutine interface to rpd"
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_rpd $(RRPDST)
	- ./run_rpd >& rpdst.output
	cat rpdst.output
	rm ./run_rpd

qppds: $(QPPDS)
	cd ../qpp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_qpp $(RQPPDS)
	- ../qpp/run_qpp >& ../qpp/qppds.output
	cat ../qpp/qppds.output
	rm ../qpp/run_qpp

qppdt: $(QPPDT)
	echo " Exhaustive test of subroutine interface to qpp"
	cd ../qpp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_qpp $(RQPPDT)
	- ../qpp/run_qpp
#	- ../qpp/run_qpp >& ../qpp/qppdt.output
#	cat ../qpp/qppdt.output
	rm ../qpp/run_qpp

qppss: $(QPPSS)
	cd ../qpp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_qpp $(RQPPSS)
	- ../qpp/run_qpp >& ../qpp/qppss.output
	cat ../qpp/qppss.output
	rm ../qpp/run_qpp

qppst: $(QPPST)
	echo " Exhaustive test of subroutine interface to qpp"
	cd ../qpp ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_qpp $(RQPPST)
	- ../qpp/run_qpp >& ../qpp/qppst.output
	cat ../qpp/qppst.output
	rm ../qpp/run_qpp

presolveds: $(PRESOLVEDS)
	cd ../presolve ; \
          $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_presolve $(RPRESOLVEDS)
	- ../presolve/run_presolve >& ../presolve/presolveds.output
	cat ../presolve/presolveds.output
	rm ../presolve/run_presolve

presolvess: $(PRESOLVESS)
	cd ../presolve ; \
          $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_presolve $(RPRESOLVESS)
	- ../presolve/run_presolve >& ../presolve/presolvess.output
	cat ../presolve/presolvess.output
	rm ../presolve/run_presolve

qptds: $(QPTDS)
	cd ../qpt ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_qpt $(RQPTDS)
	 - ../qpt/run_qpt >& ../qpt/qptds.output
	cat ../qpt/qptds.output
	rm ../qpt/run_qpt

qptdt: $(QPTDT)
	echo " Exhaustive test of subroutine interface to qpt"
	cd ../qpt ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_qpt $(RQPTDT)
	- ../qpt/run_qpt >& ../qpt/qptdt.output
	cat ../qpt/qptdt.output
	rm ../qpt/run_qpt

qptss: $(QPTSS)
	cd ../qpt ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_qpt $(RQPTSS)
	- ../qpt/run_qpt >& ../qpt/qptss.output
	cat ../qpt/qptss.output
	rm ../qpt/run_qpt

qptst: $(QPTST)
	echo " Exhaustive test of subroutine interface to qpt"
	cd ../qpt ; $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_qpt $(RQPTST)
	- ../qpt/run_qpt >& ../qpt/qptst.output
	cat ../qpt/qptst.output
	rm ../qpt/run_qpt

#  Substantial GALAHAD packages

qpt.o: $(LG)(qpt.o)

$(LG)(qpt.o): ../qpt/qpt.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "qpt   "
	$(SED) -f $(SEDS) ../qpt/qpt.f90 > $(OBJ)/qpt1.f90
	$(SED) -f $(LSEDS) $(OBJ)/qpt1.f90 > $(OBJ)/qpt.f90
	cd $(OBJ) ; $(FORTRAN) -o qpt.o $(FFLAGSS) qpt.f90 \
                 || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o qpt.o $(FFLAGSN) qpt.f90 )
	cd $(OBJ) ; $(ARR) qpt.o ; $(RM) qpt.f90 qpt1.f90 qpt.o
	$(RMARFILE) scale.o
	$(RMARFILE) presolve.o
	$(RMARFILE) sbls.o
	$(RMARFILE) qpp.o
	$(RMARFILE) cro.o
	$(RMARFILE) rpd.o
	$(RMARFILE) qpa.o
	$(MVMODS)
	@printf '[ OK ]\n'

qpp.o: $(LG)(qpp.o)

$(LG)(qpp.o): ../qpp/qpp.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "qpp   "
	$(SED) -f $(SEDS) ../qpp/qpp.f90 > $(OBJ)/qpp1.f90
	$(SED) -f $(LSEDS) $(OBJ)/qpp1.f90 > $(OBJ)/qpp.f90
	cd $(OBJ) ; $(FORTRAN) -o qpp.o $(FFLAGSS) qpp.f90 \
                 || ( printf ' %-26s' "=> Disabling optimization " ; \
                    $(FORTRAN) -o qpp.o $(FFLAGSN) qpp.f90 )
	cd $(OBJ) ; $(ARR) qpp.o ; $(RM) qpp.f90 qpp1.f90 qpp.o
	$(RMARFILE) qpd.o
	$(MVMODS)
	@printf '[ OK ]\n'

cro.o: $(LG)(cro.o)

$(LG)(cro.o): ../cro/cro.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "cro   "
	$(SED) -f $(SEDS) ../cro/cro.f90 > $(OBJ)/cro1.f90
	$(SED) -f $(LSEDS) $(OBJ)/cro1.f90 > $(OBJ)/cro.f90
	cd $(OBJ) ; $(FORTRAN) -o cro.o $(FFLAGSS) cro.f90 \
                 || ( printf ' %-26s' "=> Disabling optimization " ; \
                    $(FORTRAN) -o cro.o $(FFLAGSN) cro.f90 )
	cd $(OBJ) ; $(ARR) cro.o ; $(RM) cro.f90 cro1.f90 cro.o
	$(RMARFILE) qpd.o
	$(RMOBFILE) cros.o
	$(RMOBFILE) crot.o
	$(MVMODS)
	@printf '[ OK ]\n'

lsqp.o: $(LG)(lsqp.o)

$(LG)(lsqp.o):  ../lsqp/lsqp.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "lsqp  "
	$(SED) -f $(SEDS)  ../lsqp/lsqp.f90 > $(OBJ)/lsqp1.f90
	$(SED) -f $(LSEDS) $(OBJ)/lsqp1.f90 > $(OBJ)/lsqp2.f90
	$(SED) -f $(LPSEDS) $(OBJ)/lsqp2.f90 > $(OBJ)/lsqp3.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/lsqp3.f90 > $(OBJ)/lsqp.f90
	cd $(OBJ); $(FORTRAN) -o lsqp.o $(FFLAGSS) lsqp.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o lsqp.o $(FFLAGSN) lsqp.f90 )
	cd $(OBJ); $(ARR) lsqp.o ; $(RM) lsqp.f90 lsqp1.f90 lsqp2.f90 \
                                         lsqp3.f90 lsqp.o
	$(RMARFILE) qpb.o
	$(RMARFILE) superb.o
	$(RMOBFILE) lsqps.o
	$(RMOBFILE) lsqpt.o
	$(MVMODS)
	@printf '[ OK ]\n'

qp.o: $(LG)(qp.o)

$(LG)(qp.o): ../qp/qp.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "qp   "
	$(SED) -f $(SEDS) ../qp/qp.f90 > $(OBJ)/qp1.f90
	$(SED) -f $(LSEDS) $(OBJ)/qp1.f90 > $(OBJ)/qp2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/qp2.f90 > $(OBJ)/qp.f90
	cd $(OBJ); $(FORTRAN) -o qp.o $(FFLAGSS) qp.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o qp.o $(FFLAGSN) qp.f90 )
	cd $(OBJ); $(ARR) qp.o ; $(RM) qp.f90 qp1.f90 qp2.f90 qp.o
	$(RMARFILE) useqp.o
	$(RMOBFILE) inqp.o
	$(RMOBFILE) galahad_ampl.o
	$(RMOBFILE) qp_spec.o
	$(RMOBFILE) qp_test.o
	$(MVMODS)
	@printf '[ OK ]\n'

qpa.o: $(LG)(qpa.o)

$(LG)(qpa.o): ../qpa/qpa.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "qpa   "
	$(SED) -f $(SEDS) ../qpa/qpa.f90 > $(OBJ)/qpa1.f90
	$(SED) -f $(LSEDS) $(OBJ)/qpa1.f90 > $(OBJ)/qpa2.f90
	$(SED) -f $(LPSEDS) $(OBJ)/qpa2.f90 > $(OBJ)/qpa3.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/qpa3.f90 > $(OBJ)/qpa.f90
	cd $(OBJ); $(FORTRAN) -o qpa.o $(FFLAGSS) qpa.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o qpa.o $(FFLAGSN) qpa.f90 )
	cd $(OBJ); $(ARR) qpa.o ; $(RM) qpa.f90 qpa1.f90 qpa2.f90 qpa3.f90 qpa.o
	$(RMARFILE) qpc.o
	$(RMARFILE) lpqpa.o
	$(RMARFILE) pqp.o
	$(RMARFILE) usepresolve.o
	$(RMARFILE) useqpa.o
	$(RMOBFILE) inqpa.o
	$(RMOBFILE) galahad_ampl.o
	$(RMOBFILE) qpas.o
	$(RMOBFILE) qpat.o
	$(MVMODS)
	@printf '[ OK ]\n'

qpb.o: $(LG)(qpb.o)

$(LG)(qpb.o): ../qpb/qpb.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "qpb   "
	$(SED) -f $(SEDS) ../qpb/qpb.f90 > $(OBJ)/qpb1.f90
	$(SED) -f $(LSEDS) $(OBJ)/qpb1.f90 > $(OBJ)/qpb2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/qpb2.f90 > $(OBJ)/qpb.f90
	cd $(OBJ); $(FORTRAN) -o qpb.o $(FFLAGSS) qpb.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o qpb.o $(FFLAGSN) qpb.f90 )
	cd $(OBJ); $(ARR) qpb.o ; $(RM) qpb.f90 qpb1.f90 qpb2.f90 qpb.o
	$(RMARFILE) qpc.o
	$(RMARFILE) lpqpb.o
	$(RMARFILE) usepresolve.o
	$(RMARFILE) useqpb.o
	$(RMOBFILE) inqpb.o
	$(RMOBFILE) galahad_ampl.o
	$(RMOBFILE) qpbs.o
	$(RMOBFILE) qpbt.o
	$(MVMODS)
	@printf '[ OK ]\n'

qpc.o: $(LG)(qpc.o)

$(LG)(qpc.o): ../qpc/qpc.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "qpc   "
	$(SED) -f $(SEDS) ../qpc/qpc.f90 > $(OBJ)/qpc1.f90
	$(SED) -f $(LSEDS) $(OBJ)/qpc1.f90 > $(OBJ)/qpc2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/qpc2.f90 > $(OBJ)/qpc.f90
	cd $(OBJ); $(FORTRAN) -o qpc.o $(FFLAGSS) qpc.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o qpc.o $(FFLAGSN) qpc.f90 )
	cd $(OBJ); $(ARR) qpc.o ; $(RM) qpc.f90 qpc1.f90 qpc2.f90 qpc.o
	$(RMARFILE) usesqp.o
	$(RMARFILE) trimsqp.o
	$(RMARFILE) qp.o
	$(RMARFILE) s2qp.o
	$(RMARFILE) usepresolve.o
	$(RMARFILE) useqpc.o
	$(RMOBFILE) inqpc.o
	$(RMOBFILE) galahad_ampl.o
	$(RMOBFILE) qpcs.o
	$(RMOBFILE) qpct.o
	$(MVMODS)
	@printf '[ OK ]\n'

qpd.o: $(LG)(qpd.o)

$(LG)(qpd.o): ../qpd/qpd.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "qpd   "
	$(SED) -f $(SEDS) ../qpd/qpd.f90 > $(OBJ)/qpd1.f90
	$(SED) -f $(LSEDS) $(OBJ)/qpd1.f90 > $(OBJ)/qpd2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/qpd2.f90 > $(OBJ)/qpd.f90
	cd $(OBJ); $(FORTRAN) -o qpd.o $(FFLAGSS) qpd.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o qpd.o $(FFLAGSN) qpd.f90 )
	cd $(OBJ); $(ARR) qpd.o ; $(RM) qpd.f90 qpd1.f90 qpd2.f90 qpd.o
	$(RMARFILE) eqp.o
	$(RMARFILE) qpa.o
	$(RMARFILE) lsqp.o
	$(RMARFILE) wcp.o
	$(RMARFILE) cqp.o
	$(RMARFILE) dqp.o
	$(MVMODS)
	@printf '[ OK ]\n'

qpe.o: $(LG)(qpe.o)

$(LG)(qpe.o): ../qpe/qpe.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "qpe   "
	$(SED) -f $(SEDS) ../qpe/qpe.f90 > $(OBJ)/qpe1.f90
	$(SED) -f $(LSEDS) $(OBJ)/qpe1.f90 > $(OBJ)/qpe2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/qpe2.f90 > $(OBJ)/qpe.f90
	cd $(OBJ); $(FORTRAN) -o qpe.o $(FFLAGSS) qpe.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o qpe.o $(FFLAGSN) qpe.f90 )
	cd $(OBJ); $(ARR) qpe.o ; $(RM) qpe.f90 qpe1.f90 qpe2.f90 qpe.o
	$(RMARFILE) useqpe.o
	$(RMOBFILE) inqpe.o
	$(RMOBFILE) galahad_ampl.o
	$(RMOBFILE) qpes.o
	$(RMOBFILE) qpet.o
	$(MVMODS)
	@printf '[ OK ]\n'

bqp.o: $(LG)(bqp.o)

$(LG)(bqp.o): ../bqp/bqp.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "bqp   "
	$(SED) -f $(SEDS) ../bqp/bqp.f90 > $(OBJ)/bqp1.f90
	$(SED) -f $(LSEDS) $(OBJ)/bqp1.f90 > $(OBJ)/bqp2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/bqp2.f90 > $(OBJ)/bqp.f90
	cd $(OBJ); $(FORTRAN) -o bqp.o $(FFLAGSS) bqp.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o bqp.o $(FFLAGSN) bqp.f90 )
	cd $(OBJ); $(ARR) bqp.o ; $(RM) bqp.f90 bqp1.f90 bqp2.f90 bqp.o
	$(RMARFILE) cqps.o
	$(RMARFILE) usebqp.o
	$(RMOBFILE) inbqp.o
	$(RMOBFILE) galahad_ampl.o
	$(RMOBFILE) bqps.o
	$(RMOBFILE) bqps2.o
	$(RMOBFILE) bqps3.o
	$(RMOBFILE) bqpt.o
	$(MVMODS)
	@printf '[ OK ]\n'

bqpb.o: $(LG)(bqpb.o)

$(LG)(bqpb.o): ../bqpb/bqpb.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "bqpb   "
	$(SED) -f $(SEDS) ../bqpb/bqpb.f90 > $(OBJ)/bqpb1.f90
	$(SED) -f $(LSEDS) $(OBJ)/bqpb1.f90 > $(OBJ)/bqpb2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/bqpb2.f90 > $(OBJ)/bqpb.f90
	cd $(OBJ); $(FORTRAN) -o bqpb.o $(FFLAGSS) bqpb.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o bqpb.o $(FFLAGSN) bqpb.f90 )
	cd $(OBJ); $(ARR) bqpb.o ; $(RM) bqpb.f90 bqpb1.f90 bqpb2.f90 bqpb.o
	$(RMARFILE) usebqpb.o
	$(RMOBFILE) inbqpb.o
	$(RMOBFILE) galahad_ampl.o
	$(RMOBFILE) bqpbs.o
	$(RMOBFILE) bqpbs2.o
	$(RMOBFILE) bqpbs3.o
	$(RMOBFILE) bqpbt.o
	$(MVMODS)
	@printf '[ OK ]\n'

cqp.o: $(LG)(cqp.o)

$(LG)(cqp.o): ../cqp/cqp.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "cqp   "
	$(SED) -f $(SEDS) ../cqp/cqp.f90 > $(OBJ)/cqp1.f90
	$(SED) -f $(LSEDS) $(OBJ)/cqp1.f90 > $(OBJ)/cqp2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/cqp2.f90 > $(OBJ)/cqp.f90
	cd $(OBJ); $(FORTRAN) -o cqp.o $(FFLAGSOMP) cqp.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o cqp.o $(FFLAGSNOMP) cqp.f90 )
	cd $(OBJ); $(ARR) cqp.o ; $(RM) cqp.f90 cqp1.f90 cqp2.f90 cqp.o
	$(RMARFILE) fastr.o
	$(RMARFILE) ccqp.o
	$(RMARFILE) l1qp.o
	$(RMARFILE) usecqp.o
	$(RMOBFILE) incqp.o
	$(RMOBFILE) galahad_ampl.o
	$(RMOBFILE) cqps.o
	$(RMOBFILE) cqps2.o
	$(RMOBFILE) cqps3.o
	$(RMOBFILE) cqpt.o
	$(MVMODS)
	@printf '[ OK ]\n'

ccqp.o: $(LG)(ccqp.o)

$(LG)(ccqp.o): ../ccqp/ccqp.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "ccqp   "
	$(SED) -f $(SEDS) ../ccqp/ccqp.f90 > $(OBJ)/ccqp1.f90
	$(SED) -f $(LSEDS) $(OBJ)/ccqp1.f90 > $(OBJ)/ccqp2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/ccqp2.f90 > $(OBJ)/ccqp.f90
	cd $(OBJ); $(FORTRAN) -o ccqp.o $(FFLAGSOMP) ccqp.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o ccqp.o $(FFLAGSNOMP) ccqp.f90 )
	cd $(OBJ); $(ARR) ccqp.o ; $(RM) ccqp.f90 ccqp1.f90 ccqp2.f90 ccqp.o
	$(RMARFILE) qp.o
	$(RMARFILE) useccqp.o
	$(RMOBFILE) inccqp.o
	$(RMOBFILE) galahad_ampl.o
	$(RMOBFILE) ccqps.o
	$(RMOBFILE) ccqps2.o
	$(RMOBFILE) ccqps3.o
	$(RMOBFILE) ccqpt.o
	$(MVMODS)
	@printf '[ OK ]\n'

l1qp.o: $(LG)(l1qp.o)

$(LG)(l1qp.o): ../l1qp/l1qp.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "l1qp   "
	$(SED) -f $(SEDS) ../l1qp/l1qp.f90 > $(OBJ)/l1qp1.f90
	$(SED) -f $(LSEDS) $(OBJ)/l1qp1.f90 > $(OBJ)/l1qp2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/l1qp2.f90 > $(OBJ)/l1qp.f90
	cd $(OBJ); $(FORTRAN) -o l1qp.o $(FFLAGSOMP) l1qp.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o l1qp.o $(FFLAGSNOMP) l1qp.f90 )
	cd $(OBJ); $(ARR) l1qp.o ; $(RM) l1qp.f90 l1qp1.f90 l1qp2.f90 l1qp.o
#	$(RMARFILE) qp.o
	$(RMARFILE) usel1qp.o
	$(RMOBFILE) inl1qp.o
	$(RMOBFILE) galahad_ampl.o
	$(RMOBFILE) l1qps.o
	$(RMOBFILE) l1qps2.o
	$(RMOBFILE) l1qps3.o
	$(RMOBFILE) l1qpt.o
	$(MVMODS)
	@printf '[ OK ]\n'

cqps.o: $(LG)(cqps.o)

$(LG)(cqps.o): ../cqps/cqps.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "cqps   "
	$(SED) -f $(SEDS) ../cqps/cqps.f90 > $(OBJ)/cqps1.f90
	$(SED) -f $(LSEDS) $(OBJ)/cqps1.f90 > $(OBJ)/cqps2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/cqps2.f90 > $(OBJ)/cqps.f90
	cd $(OBJ); $(FORTRAN) -o cqps.o $(FFLAGSS) cqps.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o cqps.o $(FFLAGSN) cqps.f90 )
	cd $(OBJ); $(ARR) cqps.o ; $(RM) cqps.f90 cqps1.f90 cqps2.f90 cqps.o
	$(RMARFILE) usecqps.o
	$(RMOBFILE) incqps.o
	$(RMOBFILE) galahad_ampl.o
	$(RMOBFILE) cqpss.o
	$(RMOBFILE) cqpss2.o
	$(RMOBFILE) cqpss3.o
	$(RMOBFILE) cqpst.o
	$(MVMODS)
	@printf '[ OK ]\n'

dqp.o: $(LG)(dqp.o)

$(LG)(dqp.o): ../dqp/dqp.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "dqp   "
	$(SED) -f $(SEDS) ../dqp/dqp.f90 > $(OBJ)/dqp1.f90
	$(SED) -f $(LSEDS) $(OBJ)/dqp1.f90 > $(OBJ)/dqp2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/dqp2.f90 > $(OBJ)/dqp.f90
	cd $(OBJ); $(FORTRAN) -o dqp.o $(FFLAGSOMP) dqp.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o dqp.o $(FFLAGSNOMP) dqp.f90 )
	cd $(OBJ); $(ARR) dqp.o ; $(RM) dqp.f90 dqp1.f90 dqp2.f90 dqp.o
	$(RMARFILE) fastr.o
	$(RMARFILE) ccqp.o
	$(RMARFILE) l1qp.o
	$(RMARFILE) dlp.o
	$(RMARFILE) qp.o
	$(RMARFILE) usedqp.o
	$(RMARFILE) usewarm.o
	$(RMOBFILE) indqp.o
	$(RMOBFILE) galahad_ampl.o
	$(RMOBFILE) dqps.o
	$(RMOBFILE) dqps2.o
	$(RMOBFILE) dqps3.o
	$(RMOBFILE) dqps4.o
	$(RMOBFILE) dqpt.o
	$(MVMODS)
	@printf '[ OK ]\n'

dlp.o: $(LG)(dlp.o)

$(LG)(dlp.o): ../dlp/dlp.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "dlp   "
	$(SED) -f $(SEDS) ../dlp/dlp.f90 > $(OBJ)/dlp1.f90
	$(SED) -f $(LSEDS) $(OBJ)/dlp1.f90 > $(OBJ)/dlp2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/dlp2.f90 > $(OBJ)/dlp.f90
	cd $(OBJ); $(FORTRAN) -o dlp.o $(FFLAGSOMP) dlp.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o dlp.o $(FFLAGSNOMP) dlp.f90 )
	cd $(OBJ); $(ARR) dlp.o ; $(RM) dlp.f90 dlp1.f90 dlp2.f90 dlp.o
	$(RMARFILE) usedlp.o
	$(RMARFILE) usewarm.o
	$(RMOBFILE) indlp.o
	$(RMOBFILE) galahad_ampl.o
	$(RMOBFILE) dlps.o
	$(RMOBFILE) dlps2.o
	$(RMOBFILE) dlps3.o
	$(RMOBFILE) dlps4.o
	$(RMOBFILE) dlpt.o
	$(MVMODS)
	@printf '[ OK ]\n'

lpa.o: $(LG)(lpa.o)

$(LG)(lpa.o): ../lpa/lpa.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "lpa   "
	$(SED) -f $(SEDS) ../lpa/lpa.f90 > $(OBJ)/lpa1.f90
	$(SED) -f $(LSEDS) $(OBJ)/lpa1.f90 > $(OBJ)/lpa2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/lpa2.f90 > $(OBJ)/lpa.f90
	cd $(OBJ); $(FORTRAN) -o lpa.o $(FFLAGSS) lpa.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o lpa.o $(FFLAGSN) lpa.f90 )
	cd $(OBJ); $(ARR) lpa.o ; $(RM) lpa.f90 lpa1.f90 lpa2.f90 lpa.o
	$(RMARFILE) uselpa.o
	$(RMOBFILE) inlpa.o
	$(RMOBFILE) lpas.o
	$(RMOBFILE) lpat.o
	$(MVMODS)
	@printf '[ OK ]\n'

lpb.o: $(LG)(lpb.o)

$(LG)(lpb.o): ../lpb/lpb.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "lpb   "
	$(SED) -f $(SEDS) ../lpb/lpb.f90 > $(OBJ)/lpb1.f90
	$(SED) -f $(LSEDS) $(OBJ)/lpb1.f90 > $(OBJ)/lpb2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/lpb2.f90 > $(OBJ)/lpb.f90
	cd $(OBJ); $(FORTRAN) -o lpb.o $(FFLAGSS) lpb.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o lpb.o $(FFLAGSN) lpb.f90 )
	cd $(OBJ); $(ARR) lpb.o ; $(RM) lpb.f90 lpb1.f90 lpb2.f90 lpb.o
	$(RMARFILE) uselpb.o
	$(RMOBFILE) inlpb.o
	$(RMOBFILE) lpbs.o
	$(RMOBFILE) lpbt.o
	$(MVMODS)
	@printf '[ OK ]\n'

eqp.o: $(LG)(eqp.o)

$(LG)(eqp.o): ../eqp/eqp.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "eqp   "
	$(SED) -f $(SEDS) ../eqp/eqp.f90 > $(OBJ)/eqp1.f90
	$(SED) -f $(LSEDS) $(OBJ)/eqp1.f90 > $(OBJ)/eqp2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/eqp2.f90 > $(OBJ)/eqp.f90
	cd $(OBJ); $(FORTRAN) -o eqp.o $(FFLAGSS) eqp.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o eqp.o $(FFLAGSN) eqp.f90 )
	cd $(OBJ); $(ARR) eqp.o ; $(RM) eqp.f90 eqp1.f90 eqp2.f90 eqp.o
	$(RMARFILE) qpc.o
	$(RMARFILE) funnel.o
	$(RMARFILE) fastr.o
	$(RMARFILE) fisqp.o
	$(RMARFILE) useeqp.o
	$(RMOBFILE) eqps.o
	$(RMOBFILE) eqpt.o
	$(MVMODS)
	@printf '[ OK ]\n'

lls.o: $(LG)(lls.o)

$(LG)(lls.o): ../lls/lls.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "lls   "
	$(SED) -f $(SEDS) ../lls/lls.f90 > $(OBJ)/lls1.f90
	$(SED) -f $(LSEDS) $(OBJ)/lls1.f90 > $(OBJ)/lls2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/lls2.f90 > $(OBJ)/lls.f90
	cd $(OBJ); $(FORTRAN) -o lls.o $(FFLAGSS) lls.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o lls.o $(FFLAGSN) lls.f90 )
	cd $(OBJ); $(ARR) lls.o ; $(RM) lls.f90 lls1.f90 lls2.f90 lls.o
	$(RMARFILE) funnel.o
	$(RMARFILE) usells.o
	$(RMOBFILE) llss.o
	$(RMOBFILE) llst.o
	$(MVMODS)
	@printf '[ OK ]\n'

presolve.o: $(LG)(presolve.o)

$(LG)(presolve.o): ../presolve/presolve.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "presolve"
#	$(CP) ../presolve/presolve.f90 $(OBJ)/presolve.f90
	$(SED) -f $(SEDS) ../presolve/presolve.f90 > $(OBJ)/presolve1.f90
	$(SED) -f $(LSEDS) $(OBJ)/presolve1.f90 > $(OBJ)/presolve.f90
	cd $(OBJ); $(FORTRAN) -o presolve.o $(FFLAGSS) presolve.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o presolve.o $(FFLAGSN) presolve.f90 )
	cd $(OBJ); $(ARR) presolve.o ; \
          $(RM) presolve.f90 presolve1.f90 presolve.o
	$(RMARFILE) qpd.o
	$(MVMODS)
	@printf '[ OK ]\n'

rpd.o: $(LG)(rpd.o)

$(LG)(rpd.o): ../rpd/rpd.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "rpd   "
	$(SED) -f $(SEDS) ../rpd/rpd.f90 > $(OBJ)/rpd1.f90
	$(SED) -f $(LSEDS) $(OBJ)/rpd1.f90 > $(OBJ)/rpd.f90
	cd $(OBJ) ; $(FORTRAN) -o rpd.o $(FFLAGSS) rpd.f90 \
                 || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o rpd.o $(FFLAGSN) rpd.f90 )
	cd $(OBJ) ; $(ARR) rpd.o ; $(RM) rpd.f90 rpd1.f90 rpd.o
	$(RMOBFILE) inqpa.o
	$(RMOBFILE) inqpb.o
	$(RMOBFILE) inqpc.o
	$(RMOBFILE) inqpe.o
	$(RMOBFILE) ineqp.o
	$(RMOBFILE) inbqp.o
	$(RMOBFILE) inbqpb.o
	$(RMOBFILE) incqp.o
	$(RMOBFILE) indqp.o
	$(RMOBFILE) indlp.o
	$(RMOBFILE) inccqp.o
	$(RMOBFILE) inl1qp.o
	$(RMOBFILE) incqps.o
	$(MVMODS)
	@printf '[ OK ]\n'

# CUTEst/AMPL interfaces

useqpa.o: $(LG)(useqpa.o)

$(LG)(useqpa.o): ../qpa/useqpa.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "useqpa   "
	$(SED) -f $(SEDS) ../qpa/useqpa.f90 > $(OBJ)/useqpa1.f90
	$(SED) -f $(LSEDS) $(OBJ)/useqpa1.f90 > $(OBJ)/useqpa2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/useqpa2.f90 > $(OBJ)/useqpa.f90
	cd $(OBJ); $(FORTRAN) -o useqpa.o $(FFLAGSOMP) useqpa.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o useqpa.o $(FFLAGSN) useqpa.f90 )
	cd $(OBJ); $(ARR) useqpa.o ; $(RM) useqpa.f90 useqpa1.f90 \
                                           useqpa2.f90 useqpa.o
	$(RMOBFILE) runqpa_sif.o
	$(MVMODS)
	@printf '[ OK ]\n'

useqpb.o: $(LG)(useqpb.o)

$(LG)(useqpb.o): ../qpb/useqpb.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "useqpb   "
	$(SED) -f $(SEDS) ../qpb/useqpb.f90 > $(OBJ)/useqpb1.f90
	$(SED) -f $(LSEDS) $(OBJ)/useqpb1.f90 > $(OBJ)/useqpb2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/useqpb2.f90 > $(OBJ)/useqpb.f90
	cd $(OBJ); $(FORTRAN) -o useqpb.o $(FFLAGSOMP) useqpb.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o useqpb.o $(FFLAGSN) useqpb.f90 )
	cd $(OBJ); $(ARR) useqpb.o ; $(RM) useqpb.f90 useqpb1.f90 \
                                           useqpb2.f90 useqpb.o
	$(RMOBFILE) runqpb_sif.o
	$(MVMODS)
	@printf '[ OK ]\n'

useqpc.o: $(LG)(useqpc.o)

$(LG)(useqpc.o): ../qpc/useqpc.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "useqpc   "
	$(SED) -f $(SEDS) ../qpc/useqpc.f90 > $(OBJ)/useqpc1.f90
	$(SED) -f $(LSEDS) $(OBJ)/useqpc1.f90 > $(OBJ)/useqpc2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/useqpc2.f90 > $(OBJ)/useqpc.f90
	cd $(OBJ); $(FORTRAN) -o useqpc.o $(FFLAGSOMP) useqpc.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o useqpc.o $(FFLAGSN) useqpc.f90 )
	cd $(OBJ); $(ARR) useqpc.o ; $(RM) useqpc.f90 useqpc1.f90 \
                                           useqpc2.f90 useqpc.o
	$(RMOBFILE) runqpc_sif.o
	$(MVMODS)
	@printf '[ OK ]\n'

useqpe.o: $(LG)(useqpe.o)

$(LG)(useqpe.o): ../qpe/useqpe.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "useqpe   "
	$(SED) -f $(SEDS) ../qpe/useqpe.f90 > $(OBJ)/useqpe1.f90
	$(SED) -f $(LSEDS) $(OBJ)/useqpe1.f90 > $(OBJ)/useqpe2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/useqpe2.f90 > $(OBJ)/useqpe.f90
	cd $(OBJ); $(FORTRAN) -o useqpe.o $(FFLAGSS) useqpe.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o useqpe.o $(FFLAGSN) useqpe.f90 )
	cd $(OBJ); $(ARR) useqpe.o ; $(RM) useqpe.f90 useqpe1.f90 \
                                           useqpe2.f90 useqpe.o
	$(RMOBFILE) runqpe_sif.o
	$(MVMODS)
	@printf '[ OK ]\n'

useqp.o: $(LG)(useqp.o)

$(LG)(useqp.o): ../qp/useqp.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "useqp   "
	$(SED) -f $(SEDS) ../qp/useqp.f90 > $(OBJ)/useqp1.f90
	$(SED) -f $(LSEDS) $(OBJ)/useqp1.f90 > $(OBJ)/useqp2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/useqp2.f90 > $(OBJ)/useqp.f90
	cd $(OBJ); $(FORTRAN) -o useqp.o $(FFLAGSOMP) useqp.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o useqp.o $(FFLAGSN) useqp.f90 )
	cd $(OBJ); $(ARR) useqp.o ; $(RM) useqp.f90 useqp1.f90 \
                                           useqp2.f90 useqp.o
	$(RMOBFILE) runqp_sif.o
	$(MVMODS)
	@printf '[ OK ]\n'

usebqp.o: $(LG)(usebqp.o)

$(LG)(usebqp.o): ../bqp/usebqp.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "usebqp   "
	$(SED) -f $(SEDS) ../bqp/usebqp.f90 > $(OBJ)/usebqp1.f90
	$(SED) -f $(LSEDS) $(OBJ)/usebqp1.f90 > $(OBJ)/usebqp2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/usebqp2.f90 > $(OBJ)/usebqp.f90
	cd $(OBJ); $(FORTRAN) -o usebqp.o $(FFLAGSOMP) usebqp.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o usebqp.o $(FFLAGSN) usebqp.f90 )
	cd $(OBJ); $(ARR) usebqp.o ; $(RM) usebqp.f90 usebqp1.f90 \
                                           usebqp2.f90 usebqp.o
	$(RMOBFILE) runbqp_sif.o
	$(MVMODS)
	@printf '[ OK ]\n'

usebqpb.o: $(LG)(usebqpb.o)

$(LG)(usebqpb.o): ../bqpb/usebqpb.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "usebqpb   "
	$(SED) -f $(SEDS) ../bqpb/usebqpb.f90 > $(OBJ)/usebqpb1.f90
	$(SED) -f $(LSEDS) $(OBJ)/usebqpb1.f90 > $(OBJ)/usebqpb2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/usebqpb2.f90 > $(OBJ)/usebqpb.f90
	cd $(OBJ); $(FORTRAN) -o usebqpb.o $(FFLAGSS) usebqpb.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o usebqpb.o $(FFLAGSN) usebqpb.f90 )
	cd $(OBJ); $(ARR) usebqpb.o ; $(RM) usebqpb.f90 usebqpb1.f90 \
                                           usebqpb2.f90 usebqpb.o
	$(RMOBFILE) runbqpb_sif.o
	$(MVMODS)
	@printf '[ OK ]\n'

usecqp.o: $(LG)(usecqp.o)

$(LG)(usecqp.o): ../cqp/usecqp.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "usecqp   "
	$(SED) -f $(SEDS) ../cqp/usecqp.f90 > $(OBJ)/usecqp1.f90
	$(SED) -f $(LSEDS) $(OBJ)/usecqp1.f90 > $(OBJ)/usecqp2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/usecqp2.f90 > $(OBJ)/usecqp.f90
	cd $(OBJ); $(FORTRAN) -o usecqp.o $(FFLAGSOMP) usecqp.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o usecqp.o $(FFLAGSN) usecqp.f90 )
	cd $(OBJ); $(ARR) usecqp.o ; $(RM) usecqp.f90 usecqp1.f90 \
                                           usecqp2.f90 usecqp.o
	$(RMOBFILE) runcqp_sif.o
	$(MVMODS)
	@printf '[ OK ]\n'

useccqp.o: $(LG)(useccqp.o)

$(LG)(useccqp.o): ../ccqp/useccqp.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "useccqp   "
	$(SED) -f $(SEDS) ../ccqp/useccqp.f90 > $(OBJ)/useccqp1.f90
	$(SED) -f $(LSEDS) $(OBJ)/useccqp1.f90 > $(OBJ)/useccqp2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/useccqp2.f90 > $(OBJ)/useccqp.f90
	cd $(OBJ); $(FORTRAN) -o useccqp.o $(FFLAGSOMP) useccqp.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o useccqp.o $(FFLAGSN) useccqp.f90 )
	cd $(OBJ); $(ARR) useccqp.o ; $(RM) useccqp.f90 useccqp1.f90 \
                                           useccqp2.f90 useccqp.o
	$(RMOBFILE) runccqp_sif.o
	$(MVMODS)
	@printf '[ OK ]\n'

usel1qp.o: $(LG)(usel1qp.o)

$(LG)(usel1qp.o): ../l1qp/usel1qp.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "usel1qp   "
	$(SED) -f $(SEDS) ../l1qp/usel1qp.f90 > $(OBJ)/usel1qp1.f90
	$(SED) -f $(LSEDS) $(OBJ)/usel1qp1.f90 > $(OBJ)/usel1qp2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/usel1qp2.f90 > $(OBJ)/usel1qp.f90
	cd $(OBJ); $(FORTRAN) -o usel1qp.o $(FFLAGSOMP) usel1qp.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o usel1qp.o $(FFLAGSN) usel1qp.f90 )
	cd $(OBJ); $(ARR) usel1qp.o ; $(RM) usel1qp.f90 usel1qp1.f90 \
                                           usel1qp2.f90 usel1qp.o
	$(RMOBFILE) runl1qp_sif.o
	$(MVMODS)
	@printf '[ OK ]\n'

usecqps.o: $(LG)(usecqps.o)

$(LG)(usecqps.o): ../cqps/usecqps.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "usecqps   "
	$(SED) -f $(SEDS) ../cqps/usecqps.f90 > $(OBJ)/usecqps1.f90
	$(SED) -f $(LSEDS) $(OBJ)/usecqps1.f90 > $(OBJ)/usecqps2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/usecqps2.f90 > $(OBJ)/usecqps.f90
	cd $(OBJ); $(FORTRAN) -o usecqps.o $(FFLAGSS) usecqps.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o usecqps.o $(FFLAGSN) usecqps.f90 )
	cd $(OBJ); $(ARR) usecqps.o ; $(RM) usecqps.f90 usecqps1.f90 \
                                           usecqps2.f90 usecqps.o
	$(RMOBFILE) runcqps_sif.o
	$(MVMODS)
	@printf '[ OK ]\n'

usedqp.o: $(LG)(usedqp.o)

$(LG)(usedqp.o): ../dqp/usedqp.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "usedqp   "
	$(SED) -f $(SEDS) ../dqp/usedqp.f90 > $(OBJ)/usedqp1.f90
	$(SED) -f $(LSEDS) $(OBJ)/usedqp1.f90 > $(OBJ)/usedqp2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/usedqp2.f90 > $(OBJ)/usedqp.f90
	cd $(OBJ); $(FORTRAN) -o usedqp.o $(FFLAGSOMP) usedqp.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o usedqp.o $(FFLAGSN) usedqp.f90 )
	cd $(OBJ); $(ARR) usedqp.o ; $(RM) usedqp.f90 usedqp1.f90 \
                                           usedqp2.f90 usedqp.o
	$(RMOBFILE) rundqp_sif.o
	$(MVMODS)
	@printf '[ OK ]\n'

usedlp.o: $(LG)(usedlp.o)

$(LG)(usedlp.o): ../dlp/usedlp.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "usedlp   "
	$(SED) -f $(SEDS) ../dlp/usedlp.f90 > $(OBJ)/usedlp1.f90
	$(SED) -f $(LSEDS) $(OBJ)/usedlp1.f90 > $(OBJ)/usedlp2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/usedlp2.f90 > $(OBJ)/usedlp.f90
	cd $(OBJ); $(FORTRAN) -o usedlp.o $(FFLAGSOMP) usedlp.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o usedlp.o $(FFLAGSN) usedlp.f90 )
	cd $(OBJ); $(ARR) usedlp.o ; $(RM) usedlp.f90 usedlp1.f90 \
                                           usedlp2.f90 usedlp.o
	$(RMOBFILE) rundlp_sif.o
	$(MVMODS)
	@printf '[ OK ]\n'

uselpa.o: $(LG)(uselpa.o)

$(LG)(uselpa.o): ../lpa/uselpa.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "uselpa   "
	$(SED) -f $(SEDS) ../lpa/uselpa.f90 > $(OBJ)/uselpa1.f90
	$(SED) -f $(LSEDS) $(OBJ)/uselpa1.f90 > $(OBJ)/uselpa2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/uselpa2.f90 > $(OBJ)/uselpa.f90
	cd $(OBJ); $(FORTRAN) -o uselpa.o $(FFLAGSS) uselpa.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o uselpa.o $(FFLAGSN) uselpa.f90 )
	cd $(OBJ); $(ARR) uselpa.o ; $(RM) uselpa.f90 uselpa1.f90 \
                                           uselpa2.f90 uselpa.o
	$(RMOBFILE) runlpa_sif.o
	$(MVMODS)
	@printf '[ OK ]\n'

uselpb.o: $(LG)(uselpb.o)

$(LG)(uselpb.o): ../lpb/uselpb.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "uselpb   "
	$(SED) -f $(SEDS) ../lpb/uselpb.f90 > $(OBJ)/uselpb1.f90
	$(SED) -f $(LSEDS) $(OBJ)/uselpb1.f90 > $(OBJ)/uselpb2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/uselpb2.f90 > $(OBJ)/uselpb.f90
	cd $(OBJ); $(FORTRAN) -o uselpb.o $(FFLAGSS) uselpb.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o uselpb.o $(FFLAGSN) uselpb.f90 )
	cd $(OBJ); $(ARR) uselpb.o ; $(RM) uselpb.f90 uselpb1.f90 \
                                           uselpb2.f90 uselpb.o
	$(RMOBFILE) runlpb_sif.o
	$(MVMODS)
	@printf '[ OK ]\n'

useeqp.o: $(LG)(useeqp.o)

$(LG)(useeqp.o): ../eqp/useeqp.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "useeqp   "
	$(SED) -f $(SEDS) ../eqp/useeqp.f90 > $(OBJ)/useeqp1.f90
	$(SED) -f $(LSEDS) $(OBJ)/useeqp1.f90 > $(OBJ)/useeqp2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/useeqp2.f90 > $(OBJ)/useeqp.f90
	cd $(OBJ); $(FORTRAN) -o useeqp.o $(FFLAGSOMP) useeqp.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o useeqp.o $(FFLAGSN) useeqp.f90 )
	cd $(OBJ); $(ARR) useeqp.o ; $(RM) useeqp.f90 useeqp1.f90 \
                                           useeqp2.f90 useeqp.o
	$(RMOBFILE) runeqp_sif.o
	$(MVMODS)
	@printf '[ OK ]\n'

usells.o: $(LG)(usells.o)

$(LG)(usells.o): ../lls/usells.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "usells   "
	$(SED) -f $(SEDS) ../lls/usells.f90 > $(OBJ)/usells1.f90
	$(SED) -f $(LSEDS) $(OBJ)/usells1.f90 > $(OBJ)/usells2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/usells2.f90 > $(OBJ)/usells.f90
	cd $(OBJ); $(FORTRAN) -o usells.o $(FFLAGSS) usells.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o usells.o $(FFLAGSN) usells.f90 )
	cd $(OBJ); $(ARR) usells.o ; $(RM) usells.f90 usells1.f90 \
                                           usells2.f90 usells.o
	$(RMOBFILE) runlls_sif.o
	$(MVMODS)
	@printf '[ OK ]\n'

usepresolve.o: $(LG)(usepresolve.o)

$(LG)(usepresolve.o): ../presolve/usepresolve.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "usepresolve   "
	$(SED) -f $(SEDS) ../presolve/usepresolve.f90 > $(OBJ)/usepresolve1.f90
	$(SED) -f $(LSEDS) $(OBJ)/usepresolve1.f90 > $(OBJ)/usepresolve2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/usepresolve2.f90 \
          > $(OBJ)/usepresolve.f90
	cd $(OBJ); $(FORTRAN) -o usepresolve.o $(FFLAGSS) usepresolve.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o usepresolve.o $(FFLAGSN) usepresolve.f90 )
	cd $(OBJ); $(ARR) usepresolve.o ; $(RM) usepresolve.f90 \
           usepresolve1.f90 usepresolve2.f90 usepresolve.o
	$(RMOBFILE) runpresolve_sif.o
	$(MVMODS)
	@printf '[ OK ]\n'

usewarm.o: $(LG)(usewarm.o)

$(LG)(usewarm.o): ../warm/usewarm.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "usewarm   "
	$(SED) -f $(SEDS) ../warm/usewarm.f90 > $(OBJ)/usewarm1.f90
	$(SED) -f $(LSEDS) $(OBJ)/usewarm1.f90 > $(OBJ)/usewarm2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/usewarm2.f90 \
          > $(OBJ)/usewarm.f90
	cd $(OBJ); $(FORTRAN) -o usewarm.o $(FFLAGSOMP) usewarm.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o usewarm.o $(FFLAGSN) usewarm.f90 )
	cd $(OBJ); $(ARR) usewarm.o ; $(RM) usewarm.f90 usewarm1.f90 \
                                           usewarm2.f90 usewarm.o
	$(RMOBFILE) runwarm_sif.o
	$(MVMODS)
	@printf '[ OK ]\n'

#  main programs

runqpa_sif.o: $(OBJ)/runqpa_sif.o

$(OBJ)/runqpa_sif.o: ../qpa/runqpa_sif.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "runqpa_sif"
	$(SED) -f $(SEDS) ../qpa/runqpa_sif.f90 > $(OBJ)/runqpa_sif.f90
	cd $(OBJ); $(FORTRAN) -o runqpa_sif.o $(FFLAGSS) runqpa_sif.f90
	rm $(OBJ)/runqpa_sif.f90
	@printf '[ OK ]\n'

runqpb_sif.o: $(OBJ)/runqpb_sif.o

$(OBJ)/runqpb_sif.o: ../qpb/runqpb_sif.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "runqpb_sif"
	$(SED) -f $(SEDS) ../qpb/runqpb_sif.f90 > $(OBJ)/runqpb_sif.f90
	cd $(OBJ); $(FORTRAN) -o runqpb_sif.o $(FFLAGSS) runqpb_sif.f90
	rm $(OBJ)/runqpb_sif.f90
	@printf '[ OK ]\n'

runqpc_sif.o: $(OBJ)/runqpc_sif.o

$(OBJ)/runqpc_sif.o: ../qpc/runqpc_sif.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "runqpc_sif"
	$(SED) -f $(SEDS) ../qpc/runqpc_sif.f90 > $(OBJ)/runqpc_sif.f90
	cd $(OBJ); $(FORTRAN) -o runqpc_sif.o $(FFLAGSS) runqpc_sif.f90
	rm $(OBJ)/runqpc_sif.f90
	@printf '[ OK ]\n'

runqpe_sif.o: $(OBJ)/runqpe_sif.o

$(OBJ)/runqpe_sif.o: ../qpe/runqpe_sif.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "runqpe_sif"
	$(SED) -f $(SEDS) ../qpe/runqpe_sif.f90 > $(OBJ)/runqpe_sif.f90
	cd $(OBJ); $(FORTRAN) -o runqpe_sif.o $(FFLAGSS) runqpe_sif.f90
	rm $(OBJ)/runqpe_sif.f90
	@printf '[ OK ]\n'

runqp_sif.o: $(OBJ)/runqp_sif.o

$(OBJ)/runqp_sif.o: ../qp/runqp_sif.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "runqp_sif"
	$(SED) -f $(SEDS) ../qp/runqp_sif.f90 > $(OBJ)/runqp_sif.f90
	cd $(OBJ); $(FORTRAN) -o runqp_sif.o $(FFLAGSS) runqp_sif.f90
	rm $(OBJ)/runqp_sif.f90
	@printf '[ OK ]\n'

runbqp_sif.o: $(OBJ)/runbqp_sif.o

$(OBJ)/runbqp_sif.o: ../bqp/runbqp_sif.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "runbqp_sif"
	$(SED) -f $(SEDS) ../bqp/runbqp_sif.f90 > $(OBJ)/runbqp_sif.f90
	cd $(OBJ); $(FORTRAN) -o runbqp_sif.o $(FFLAGSS) runbqp_sif.f90
	rm $(OBJ)/runbqp_sif.f90
	@printf '[ OK ]\n'

runbqpb_sif.o: $(OBJ)/runbqpb_sif.o

$(OBJ)/runbqpb_sif.o: ../bqpb/runbqpb_sif.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "runbqpb_sif"
	$(SED) -f $(SEDS) ../bqpb/runbqpb_sif.f90 > $(OBJ)/runbqpb_sif.f90
	cd $(OBJ); $(FORTRAN) -o runbqpb_sif.o $(FFLAGSS) runbqpb_sif.f90
	rm $(OBJ)/runbqpb_sif.f90
	@printf '[ OK ]\n'

runcqp_sif.o: $(OBJ)/runcqp_sif.o

$(OBJ)/runcqp_sif.o: ../cqp/runcqp_sif.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "runcqp_sif"
	$(SED) -f $(SEDS) ../cqp/runcqp_sif.f90 > $(OBJ)/runcqp_sif.f90
	cd $(OBJ); $(FORTRAN) -o runcqp_sif.o $(FFLAGSS) runcqp_sif.f90
	rm $(OBJ)/runcqp_sif.f90
	@printf '[ OK ]\n'

runccqp_sif.o: $(OBJ)/runccqp_sif.o

$(OBJ)/runccqp_sif.o: ../ccqp/runccqp_sif.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "runccqp_sif"
	$(SED) -f $(SEDS) ../ccqp/runccqp_sif.f90 > $(OBJ)/runccqp_sif.f90
	cd $(OBJ); $(FORTRAN) -o runccqp_sif.o $(FFLAGSS) runccqp_sif.f90
	rm $(OBJ)/runccqp_sif.f90
	@printf '[ OK ]\n'

runl1qp_sif.o: $(OBJ)/runl1qp_sif.o

$(OBJ)/runl1qp_sif.o: ../l1qp/runl1qp_sif.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "runl1qp_sif"
	$(SED) -f $(SEDS) ../l1qp/runl1qp_sif.f90 > $(OBJ)/runl1qp_sif.f90
	cd $(OBJ); $(FORTRAN) -o runl1qp_sif.o $(FFLAGSS) runl1qp_sif.f90
	rm $(OBJ)/runl1qp_sif.f90
	@printf '[ OK ]\n'

runcqps_sif.o: $(OBJ)/runcqps_sif.o

$(OBJ)/runcqps_sif.o: ../cqps/runcqps_sif.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "runcqps_sif"
	$(SED) -f $(SEDS) ../cqps/runcqps_sif.f90 > $(OBJ)/runcqps_sif.f90
	cd $(OBJ); $(FORTRAN) -o runcqps_sif.o $(FFLAGSS) runcqps_sif.f90
	rm $(OBJ)/runcqps_sif.f90
	@printf '[ OK ]\n'

rundqp_sif.o: $(OBJ)/rundqp_sif.o

$(OBJ)/rundqp_sif.o: ../dqp/rundqp_sif.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "rundqp_sif"
	$(SED) -f $(SEDS) ../dqp/rundqp_sif.f90 > $(OBJ)/rundqp_sif.f90
	cd $(OBJ); $(FORTRAN) -o rundqp_sif.o $(FFLAGSS) rundqp_sif.f90
	rm $(OBJ)/rundqp_sif.f90
	@printf '[ OK ]\n'

rundlp_sif.o: $(OBJ)/rundlp_sif.o

$(OBJ)/rundlp_sif.o: ../dlp/rundlp_sif.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "rundlp_sif"
	$(SED) -f $(SEDS) ../dlp/rundlp_sif.f90 \
          > $(OBJ)/rundlp_sif.f90
	cd $(OBJ); $(FORTRAN) -o rundlp_sif.o $(FFLAGSS) rundlp_sif.f90
	rm $(OBJ)/rundlp_sif.f90
	@printf '[ OK ]\n'

runlpa_sif.o: $(OBJ)/runlpa_sif.o

$(OBJ)/runlpa_sif.o: ../lpa/runlpa_sif.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "runlpa_sif"
	$(SED) -f $(SEDS) ../lpa/runlpa_sif.f90 \
           > $(OBJ)/runlpa_sif.f90
	cd $(OBJ); $(FORTRAN) -o runlpa_sif.o $(FFLAGSS) runlpa_sif.f90
	rm $(OBJ)/runlpa_sif.f90
	@printf '[ OK ]\n'

runlpb_sif.o: $(OBJ)/runlpb_sif.o

$(OBJ)/runlpb_sif.o: ../lpb/runlpb_sif.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "runlpb_sif"
	$(SED) -f $(SEDS) ../lpb/runlpb_sif.f90 \
           > $(OBJ)/runlpb_sif.f90
	cd $(OBJ); $(FORTRAN) -o runlpb_sif.o $(FFLAGSS) runlpb_sif.f90
	rm $(OBJ)/runlpb_sif.f90
	@printf '[ OK ]\n'

runeqp_sif.o: $(OBJ)/runeqp_sif.o

$(OBJ)/runeqp_sif.o: ../eqp/runeqp_sif.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "runeqp_sif"
	$(SED) -f $(SEDS) ../eqp/runeqp_sif.f90 > $(OBJ)/runeqp_sif.f90
	cd $(OBJ); $(FORTRAN) -o runeqp_sif.o $(FFLAGSS) runeqp_sif.f90
	rm $(OBJ)/runeqp_sif.f90
	@printf '[ OK ]\n'

runlls_sif.o: $(OBJ)/runlls_sif.o

$(OBJ)/runlls_sif.o: ../lls/runlls_sif.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "runlls_sif"
	$(SED) -f $(SEDS) ../lls/runlls_sif.f90 > $(OBJ)/runlls_sif.f90
	cd $(OBJ); $(FORTRAN) -o runlls_sif.o $(FFLAGSS) runlls_sif.f90
	rm $(OBJ)/runlls_sif.f90
	@printf '[ OK ]\n'

runpresolve_sif.o: $(OBJ)/runpresolve_sif.o

$(OBJ)/runpresolve_sif.o: ../presolve/runpresolve_sif.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "runpresolve_sif"
	$(SED) -f $(SEDS) ../presolve/runpresolve_sif.f90 \
           > $(OBJ)/runpresolve_sif.f90
	cd $(OBJ); $(FORTRAN) -o runpresolve_sif.o $(FFLAGSS) \
            runpresolve_sif.f90
	rm $(OBJ)/runpresolve_sif.f90
	@printf '[ OK ]\n'

runwarm_sif.o: $(OBJ)/runwarm_sif.o

$(OBJ)/runwarm_sif.o: ../warm/runwarm_sif.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "runwarm_sif"
	$(SED) -f $(SEDS) ../warm/runwarm_sif.f90 > $(OBJ)/runwarm_sif.f90
	cd $(OBJ); $(FORTRAN) -o runwarm_sif.o $(FFLAGSS) runwarm_sif.f90
	rm $(OBJ)/runwarm_sif.f90
	@printf '[ OK ]\n'

# main progarms for data-file interfaces

inqpa.o: $(OBJ)/inqpa.o

$(OBJ)/inqpa.o: ../qpa/inqpa.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "inqpa"
	$(SED) -f $(SEDS) ../qpa/inqpa.f90 > $(OBJ)/inqpa1.f90
	$(SED) -f $(LSEDS) $(OBJ)/inqpa1.f90 > $(OBJ)/inqpa.f90
	cd $(OBJ); $(FORTRAN) -o inqpa.o $(FFLAGSOMP) inqpa.f90
	rm $(OBJ)/inqpa.f90 $(OBJ)/inqpa1.f90
	@printf '[ OK ]\n'

inqpb.o: $(OBJ)/inqpb.o

$(OBJ)/inqpb.o: ../qpb/inqpb.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "inqpb"
	$(SED) -f $(SEDS) ../qpb/inqpb.f90 > $(OBJ)/inqpb1.f90
	$(SED) -f $(LSEDS) $(OBJ)/inqpb1.f90 > $(OBJ)/inqpb.f90
	cd $(OBJ); $(FORTRAN) -o inqpb.o $(FFLAGSOMP) inqpb.f90
	rm $(OBJ)/inqpb.f90 $(OBJ)/inqpb1.f90
	@printf '[ OK ]\n'

inqpc.o: $(OBJ)/inqpc.o

$(OBJ)/inqpc.o: ../qpc/inqpc.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "inqpc"
	$(SED) -f $(SEDS) ../qpc/inqpc.f90 > $(OBJ)/inqpc1.f90
	$(SED) -f $(LSEDS) $(OBJ)/inqpc1.f90 > $(OBJ)/inqpc.f90
	cd $(OBJ); $(FORTRAN) -o inqpc.o $(FFLAGSOMP) inqpc.f90
	rm $(OBJ)/inqpc.f90 $(OBJ)/inqpc1.f90
	@printf '[ OK ]\n'

inqpe.o: $(OBJ)/inqpe.o

$(OBJ)/inqpe.o: ../qpe/inqpe.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "inqpe"
	$(SED) -f $(SEDS) ../qpe/inqpe.f90 > $(OBJ)/inqpe1.f90
	$(SED) -f $(LSEDS) $(OBJ)/inqpe1.f90 > $(OBJ)/inqpe.f90
	cd $(OBJ); $(FORTRAN) -o inqpe.o $(FFLAGSOMP) inqpe.f90
	rm $(OBJ)/inqpe.f90 $(OBJ)/inqpe1.f90
	@printf '[ OK ]\n'

inqp.o: $(OBJ)/inqp.o

$(OBJ)/inqp.o: ../qp/inqp.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "inqp"
	$(SED) -f $(SEDS) ../qp/inqp.f90 > $(OBJ)/inqp1.f90
	$(SED) -f $(LSEDS) $(OBJ)/inqp1.f90 > $(OBJ)/inqp.f90
	cd $(OBJ); $(FORTRAN) -o inqp.o $(FFLAGSOMP) inqp.f90
	rm $(OBJ)/inqp.f90 $(OBJ)/inqp1.f90
	@printf '[ OK ]\n'

inbqp.o: $(OBJ)/inbqp.o

$(OBJ)/inbqp.o: ../bqp/inbqp.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "inbqp"
	$(SED) -f $(SEDS) ../bqp/inbqp.f90 > $(OBJ)/inbqp1.f90
	$(SED) -f $(LSEDS) $(OBJ)/inbqp1.f90 > $(OBJ)/inbqp.f90
	cd $(OBJ); $(FORTRAN) -o inbqp.o $(FFLAGSOMP) inbqp.f90
	rm $(OBJ)/inbqp.f90 $(OBJ)/inbqp1.f90
	@printf '[ OK ]\n'

inbqpb.o: $(OBJ)/inbqpb.o

$(OBJ)/inbqpb.o: ../bqpb/inbqpb.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "inbqpb"
	$(SED) -f $(SEDS) ../bqpb/inbqpb.f90 > $(OBJ)/inbqpb1.f90
	$(SED) -f $(LSEDS) $(OBJ)/inbqpb1.f90 > $(OBJ)/inbqpb.f90
	cd $(OBJ); $(FORTRAN) -o inbqpb.o $(FFLAGSOMP) inbqpb.f90
	rm $(OBJ)/inbqpb.f90 $(OBJ)/inbqpb1.f90
	@printf '[ OK ]\n'

incqp.o: $(OBJ)/incqp.o

$(OBJ)/incqp.o: ../cqp/incqp.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "incqp"
	$(SED) -f $(SEDS) ../cqp/incqp.f90 > $(OBJ)/incqp1.f90
	$(SED) -f $(LSEDS) $(OBJ)/incqp1.f90 > $(OBJ)/incqp.f90
	cd $(OBJ); $(FORTRAN) -o incqp.o $(FFLAGSOMP) incqp.f90
	rm $(OBJ)/incqp.f90 $(OBJ)/incqp1.f90
	@printf '[ OK ]\n'

inccqp.o: $(OBJ)/inccqp.o

$(OBJ)/inccqp.o: ../ccqp/inccqp.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "inccqp"
	$(SED) -f $(SEDS) ../ccqp/inccqp.f90 > $(OBJ)/inccqp1.f90
	$(SED) -f $(LSEDS) $(OBJ)/inccqp1.f90 > $(OBJ)/inccqp.f90
	cd $(OBJ); $(FORTRAN) -o inccqp.o $(FFLAGSOMP) inccqp.f90
	rm $(OBJ)/inccqp.f90 $(OBJ)/inccqp1.f90
	@printf '[ OK ]\n'

inl1qp.o: $(OBJ)/inl1qp.o

$(OBJ)/inl1qp.o: ../l1qp/inl1qp.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "inl1qp"
	$(SED) -f $(SEDS) ../l1qp/inl1qp.f90 > $(OBJ)/inl1qp1.f90
	$(SED) -f $(LSEDS) $(OBJ)/inl1qp1.f90 > $(OBJ)/inl1qp.f90
	cd $(OBJ); $(FORTRAN) -o inl1qp.o $(FFLAGSOMP) inl1qp.f90
	rm $(OBJ)/inl1qp.f90 $(OBJ)/inl1qp1.f90
	@printf '[ OK ]\n'

incqps.o: $(OBJ)/incqps.o

$(OBJ)/incqps.o: ../cqps/incqps.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "incqps"
	$(SED) -f $(SEDS) ../cqps/incqps.f90 > $(OBJ)/incqps1.f90
	$(SED) -f $(LSEDS) $(OBJ)/incqps1.f90 > $(OBJ)/incqps.f90
	cd $(OBJ); $(FORTRAN) -o incqps.o $(FFLAGSOMP) incqps.f90
	rm $(OBJ)/incqps.f90 $(OBJ)/incqps1.f90
	@printf '[ OK ]\n'

indqp.o: $(OBJ)/indqp.o

$(OBJ)/indqp.o: ../dqp/indqp.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "indqp"
	$(SED) -f $(SEDS) ../dqp/indqp.f90 > $(OBJ)/indqp1.f90
	$(SED) -f $(LSEDS) $(OBJ)/indqp1.f90 > $(OBJ)/indqp.f90
	cd $(OBJ); $(FORTRAN) -o indqp.o $(FFLAGSOMP) indqp.f90
	rm $(OBJ)/indqp.f90 $(OBJ)/indqp1.f90
	@printf '[ OK ]\n'

indlp.o: $(OBJ)/indlp.o

$(OBJ)/indlp.o: ../dlp/indlp.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "indlp"
	$(SED) -f $(SEDS) ../dlp/indlp.f90 > $(OBJ)/indlp1.f90
	$(SED) -f $(LSEDS) $(OBJ)/indlp1.f90 > $(OBJ)/indlp.f90
	cd $(OBJ); $(FORTRAN) -o indlp.o $(FFLAGSOMP) indlp.f90
	rm $(OBJ)/indlp.f90 $(OBJ)/indlp1.f90
	@printf '[ OK ]\n'

inlpa.o: $(OBJ)/inlpa.o

$(OBJ)/inlpa.o: ../lpa/inlpa.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "inlpa"
	$(SED) -f $(SEDS) ../lpa/inlpa.f90 > $(OBJ)/inlpa1.f90
	$(SED) -f $(LSEDS) $(OBJ)/inlpa1.f90 > $(OBJ)/inlpa.f90
	cd $(OBJ); $(FORTRAN) -o inlpa.o $(FFLAGSOMP) inlpa.f90
	rm $(OBJ)/inlpa.f90 $(OBJ)/inlpa1.f90
	@printf '[ OK ]\n'

inlpb.o: $(OBJ)/inlpb.o

$(OBJ)/inlpb.o: ../lpb/inlpb.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "inlpb"
	$(SED) -f $(SEDS) ../lpb/inlpb.f90 > $(OBJ)/inlpb1.f90
	$(SED) -f $(LSEDS) $(OBJ)/inlpb1.f90 > $(OBJ)/inlpb.f90
	cd $(OBJ); $(FORTRAN) -o inlpb.o $(FFLAGSOMP) inlpb.f90
	rm $(OBJ)/inlpb.f90 $(OBJ)/inlpb1.f90
	@printf '[ OK ]\n'

#  test decks

cros.o: $(OBJ)/cros.o

$(OBJ)/cros.o: ../cro/cros.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "cros  "
	$(SED) -f $(SEDS) ../cro/cros.f90 > $(OBJ)/cros1.f90
	$(SED) -f $(LSEDS) $(OBJ)/cros1.f90 > $(OBJ)/cros.f90
	cd $(OBJ) ; $(FORTRAN) -o cros.o $(FFLAGS) cros.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

crot.o: $(OBJ)/crot.o

$(OBJ)/crot.o: ../cro/crot.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "crot  "
	$(SED) -f $(SEDS) ../cro/crot.f90 > $(OBJ)/crot1.f90
	$(SED) -f $(LSEDS) $(OBJ)/crot1.f90 > $(OBJ)/crot.f90
	cd $(OBJ) ; $(FORTRAN) -o crot.o $(FFLAGSS) crot.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

qpas.o: $(OBJ)/qpas.o

$(OBJ)/qpas.o: ../qpa/qpas.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "qpas  "
	$(SED) -f $(SEDS) ../qpa/qpas.f90 > $(OBJ)/qpas1.f90
	$(SED) -f $(LSEDS) $(OBJ)/qpas1.f90 > $(OBJ)/qpas.f90
	cd $(OBJ) ; $(FORTRAN) -o qpas.o $(FFLAGS) qpas.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

qpat.o: $(OBJ)/qpat.o

$(OBJ)/qpat.o: ../qpa/qpat.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "qpat  "
	$(SED) -f $(SEDS) ../qpa/qpat.f90 > $(OBJ)/qpat1.f90
	$(SED) -f $(LSEDS) $(OBJ)/qpat1.f90 > $(OBJ)/qpat.f90
	cd $(OBJ) ; $(FORTRAN) -o qpat.o $(FFLAGSS) qpat.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

qpbs.o: $(OBJ)/qpbs.o

$(OBJ)/qpbs.o: ../qpb/qpbs.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "qpbs  "
	$(SED) -f $(SEDS) ../qpb/qpbs.f90 > $(OBJ)/qpbs1.f90
	$(SED) -f $(LSEDS) $(OBJ)/qpbs1.f90 > $(OBJ)/qpbs.f90
	cd $(OBJ) ; $(FORTRAN) -o qpbs.o $(FFLAGS) qpbs.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

qpbs2.o: $(OBJ)/qpbs2.o

$(OBJ)/qpbs2.o: ../qpb/qpbs2.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "qpbs2  "
	$(SED) -f $(SEDS) ../qpb/qpbs2.f90 > $(OBJ)/qpbs21.f90
	$(SED) -f $(LSEDS) $(OBJ)/qpbs21.f90 > $(OBJ)/qpbs2.f90
	cd $(OBJ) ; $(FORTRAN) -o qpbs2.o $(FFLAGS) qpbs2.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

qpbt.o: $(OBJ)/qpbt.o

$(OBJ)/qpbt.o: ../qpb/qpbt.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "qpbt  "
	$(SED) -f $(SEDS) ../qpb/qpbt.f90 > $(OBJ)/qpbt1.f90
	$(SED) -f $(LSEDS) $(OBJ)/qpbt1.f90 > $(OBJ)/qpbt.f90
	cd $(OBJ) ; $(FORTRAN) -o qpbt.o $(FFLAGSS) qpbt.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

qpcs.o: $(OBJ)/qpcs.o

$(OBJ)/qpcs.o: ../qpc/qpcs.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "qpcs  "
	$(SED) -f $(SEDS) ../qpc/qpcs.f90 > $(OBJ)/qpcs1.f90
	$(SED) -f $(LSEDS) $(OBJ)/qpcs1.f90 > $(OBJ)/qpcs.f90
	cd $(OBJ) ; $(FORTRAN) -o qpcs.o $(FFLAGS) qpcs.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

qpcs2.o: $(OBJ)/qpcs2.o

$(OBJ)/qpcs2.o: ../qpc/qpcs2.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "qpcs2  "
	$(SED) -f $(SEDS) ../qpc/qpcs2.f90 > $(OBJ)/qpcs21.f90
	$(SED) -f $(LSEDS) $(OBJ)/qpcs21.f90 > $(OBJ)/qpcs2.f90
	cd $(OBJ) ; $(FORTRAN) -o qpcs2.o $(FFLAGS) qpcs2.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

qpct.o: $(OBJ)/qpct.o

$(OBJ)/qpct.o: ../qpc/qpct.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "qpct  "
	$(SED) -f $(SEDS) ../qpc/qpct.f90 > $(OBJ)/qpct1.f90
	$(SED) -f $(LSEDS) $(OBJ)/qpct1.f90 > $(OBJ)/qpct.f90
	cd $(OBJ) ; $(FORTRAN) -o qpct.o $(FFLAGSS) qpct.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

qpes.o: $(OBJ)/qpes.o

$(OBJ)/qpes.o: ../qpe/qpes.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "qpes  "
	$(SED) -f $(SEDS) ../qpe/qpes.f90 > $(OBJ)/qpes1.f90
	$(SED) -f $(LSEDS) $(OBJ)/qpes1.f90 > $(OBJ)/qpes.f90
	cd $(OBJ) ; $(FORTRAN) -o qpes.o $(FFLAGS) qpes.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

qpes2.o: $(OBJ)/qpes2.o

$(OBJ)/qpes2.o: ../qpe/qpes2.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "qpes2  "
	$(SED) -f $(SEDS) ../qpe/qpes2.f90 > $(OBJ)/qpes21.f90
	$(SED) -f $(LSEDS) $(OBJ)/qpes21.f90 > $(OBJ)/qpes2.f90
	cd $(OBJ) ; $(FORTRAN) -o qpes2.o $(FFLAGS) qpes2.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

qpet.o: $(OBJ)/qpet.o

$(OBJ)/qpet.o: ../qpe/qpet.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "qpet  "
	$(SED) -f $(SEDS) ../qpe/qpet.f90 > $(OBJ)/qpet1.f90
	$(SED) -f $(LSEDS) $(OBJ)/qpet1.f90 > $(OBJ)/qpet.f90
	cd $(OBJ) ; $(FORTRAN) -o qpet.o $(FFLAGSS) qpet.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

qp_spec.o: $(OBJ)/qp_spec.o

$(OBJ)/qp_spec.o: ../qp/qp_spec.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "qp_spec  "
	$(SED) -f $(SEDS) ../qp/qp_spec.f90 > $(OBJ)/qp_spec1.f90
	$(SED) -f $(LSEDS) $(OBJ)/qp_spec1.f90 > $(OBJ)/qp_spec.f90
	cd $(OBJ) ; $(FORTRAN) -o qp_spec.o $(FFLAGS) qp_spec.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

qp_spec2.o: $(OBJ)/qp_spec2.o

$(OBJ)/qp_spec2.o: ../qp/qp_spec2.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "qp_spec2  "
	$(SED) -f $(SEDS) ../qp/qp_spec2.f90 > $(OBJ)/qp_spec21.f90
	$(SED) -f $(LSEDS) $(OBJ)/qp_spec21.f90 > $(OBJ)/qp_spec2.f90
	cd $(OBJ) ; $(FORTRAN) -o qp_spec2.o $(FFLAGS) qp_spec2.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

qp_test.o: $(OBJ)/qp_tset.o

$(OBJ)/qp_test.o: ../qp/qp_test.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "qp_test  "
	$(SED) -f $(SEDS) ../qp/qp_test.f90 > $(OBJ)/qp_test1.f90
	$(SED) -f $(LSEDS) $(OBJ)/qp_test1.f90 > $(OBJ)/qp_test.f90
	cd $(OBJ) ; $(FORTRAN) -o qp_test.o $(FFLAGSS) qp_test.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

bqps.o: $(OBJ)/bqps.o

$(OBJ)/bqps.o: ../bqp/bqps.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "bqps  "
	$(SED) -f $(SEDS) ../bqp/bqps.f90 > $(OBJ)/bqps1.f90
	$(SED) -f $(LSEDS) $(OBJ)/bqps1.f90 > $(OBJ)/bqps.f90
	cd $(OBJ) ; $(FORTRAN) -o bqps.o $(FFLAGS) bqps.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

bqps2.o: $(OBJ)/bqps2.o

$(OBJ)/bqps2.o: ../bqp/bqps2.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "bqps2  "
	$(SED) -f $(SEDS) ../bqp/bqps2.f90 > $(OBJ)/bqps21.f90
	$(SED) -f $(LSEDS) $(OBJ)/bqps21.f90 > $(OBJ)/bqps2.f90
	cd $(OBJ) ; $(FORTRAN) -o bqps2.o $(FFLAGS) bqps2.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

bqps3.o: $(OBJ)/bqps3.o

$(OBJ)/bqps3.o: ../bqp/bqps3.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "bqps3  "
	$(SED) -f $(SEDS) ../bqp/bqps3.f90 > $(OBJ)/bqps31.f90
	$(SED) -f $(LSEDS) $(OBJ)/bqps31.f90 > $(OBJ)/bqps3.f90
	cd $(OBJ) ; $(FORTRAN) -o bqps3.o $(FFLAGS) bqps3.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

bqps4.o: $(OBJ)/bqps4.o

$(OBJ)/bqps4.o: ../bqp/bqps4.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "bqps4  "
	$(SED) -f $(SEDS) ../bqp/bqps4.f90 > $(OBJ)/bqps41.f90
	$(SED) -f $(LSEDS) $(OBJ)/bqps41.f90 > $(OBJ)/bqps4.f90
	cd $(OBJ) ; $(FORTRAN) -o bqps4.o $(FFLAGS) bqps4.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

bqpt.o: $(OBJ)/bqpt.o

$(OBJ)/bqpt.o: ../bqp/bqpt.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "bqpt  "
	$(SED) -f $(SEDS) ../bqp/bqpt.f90 > $(OBJ)/bqpt1.f90
	$(SED) -f $(LSEDS) $(OBJ)/bqpt1.f90 > $(OBJ)/bqpt.f90
	cd $(OBJ) ; $(FORTRAN) -o bqpt.o $(FFLAGSS) bqpt.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

bqpbs.o: $(OBJ)/bqpbs.o

$(OBJ)/bqpbs.o: ../bqpb/bqpbs.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "bqpbs  "
	$(SED) -f $(SEDS) ../bqpb/bqpbs.f90 > $(OBJ)/bqpbs1.f90
	$(SED) -f $(LSEDS) $(OBJ)/bqpbs1.f90 > $(OBJ)/bqpbs.f90
	cd $(OBJ) ; $(FORTRAN) -o bqpbs.o $(FFLAGS) bqpbs.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

bqpbs2.o: $(OBJ)/bqpbs2.o

$(OBJ)/bqpbs2.o: ../bqpb/bqpbs2.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "bqpbs2  "
	$(SED) -f $(SEDS) ../bqpb/bqpbs2.f90 > $(OBJ)/bqpbs21.f90
	$(SED) -f $(LSEDS) $(OBJ)/bqpbs21.f90 > $(OBJ)/bqpbs2.f90
	cd $(OBJ) ; $(FORTRAN) -o bqpbs2.o $(FFLAGS) bqpbs2.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

bqpbs3.o: $(OBJ)/bqpbs3.o

$(OBJ)/bqpbs3.o: ../bqpb/bqpbs3.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "bqpbs3  "
	$(SED) -f $(SEDS) ../bqpb/bqpbs3.f90 > $(OBJ)/bqpbs31.f90
	$(SED) -f $(LSEDS) $(OBJ)/bqpbs31.f90 > $(OBJ)/bqpbs3.f90
	cd $(OBJ) ; $(FORTRAN) -o bqpbs3.o $(FFLAGS) bqpbs3.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

bqpbt.o: $(OBJ)/bqpbt.o

$(OBJ)/bqpbt.o: ../bqpb/bqpbt.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "bqpbt  "
	$(SED) -f $(SEDS) ../bqpb/bqpbt.f90 > $(OBJ)/bqpbt1.f90
	$(SED) -f $(LSEDS) $(OBJ)/bqpbt1.f90 > $(OBJ)/bqpbt.f90
	cd $(OBJ) ; $(FORTRAN) -o bqpbt.o $(FFLAGSS) bqpbt.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

cqps.o: $(OBJ)/cqps.o

$(OBJ)/cqps.o: ../cqp/cqps.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "cqps  "
	$(SED) -f $(SEDS) ../cqp/cqps.f90 > $(OBJ)/cqps1.f90
	$(SED) -f $(LSEDS) $(OBJ)/cqps1.f90 > $(OBJ)/cqps.f90
	cd $(OBJ) ; $(FORTRAN) -o cqps.o $(FFLAGS) cqps.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

cqps2.o: $(OBJ)/cqps2.o

$(OBJ)/cqps2.o: ../cqp/cqps2.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "cqps2  "
	$(SED) -f $(SEDS) ../cqp/cqps2.f90 > $(OBJ)/cqps21.f90
	$(SED) -f $(LSEDS) $(OBJ)/cqps21.f90 > $(OBJ)/cqps2.f90
	cd $(OBJ) ; $(FORTRAN) -o cqps2.o $(FFLAGS) cqps2.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

cqps3.o: $(OBJ)/cqps3.o

$(OBJ)/cqps3.o: ../cqp/cqps3.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "cqps3  "
	$(SED) -f $(SEDS) ../cqp/cqps3.f90 > $(OBJ)/cqps31.f90
	$(SED) -f $(LSEDS) $(OBJ)/cqps31.f90 > $(OBJ)/cqps3.f90
	cd $(OBJ) ; $(FORTRAN) -o cqps3.o $(FFLAGS) cqps3.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

cqpt.o: $(OBJ)/cqpt.o

$(OBJ)/cqpt.o: ../cqp/cqpt.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "cqpt  "
	$(SED) -f $(SEDS) ../cqp/cqpt.f90 > $(OBJ)/cqpt1.f90
	$(SED) -f $(LSEDS) $(OBJ)/cqpt1.f90 > $(OBJ)/cqpt.f90
	cd $(OBJ) ; $(FORTRAN) -o cqpt.o $(FFLAGSS) cqpt.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

ccqps.o: $(OBJ)/ccqps.o

$(OBJ)/ccqps.o: ../ccqp/ccqps.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "ccqps  "
	$(SED) -f $(SEDS) ../ccqp/ccqps.f90 > $(OBJ)/ccqps1.f90
	$(SED) -f $(LSEDS) $(OBJ)/ccqps1.f90 > $(OBJ)/ccqps.f90
	cd $(OBJ) ; $(FORTRAN) -o ccqps.o $(FFLAGS) ccqps.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

ccqps2.o: $(OBJ)/ccqps2.o

$(OBJ)/ccqps2.o: ../ccqp/ccqps2.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "ccqps2  "
	$(SED) -f $(SEDS) ../ccqp/ccqps2.f90 > $(OBJ)/ccqps21.f90
	$(SED) -f $(LSEDS) $(OBJ)/ccqps21.f90 > $(OBJ)/ccqps2.f90
	cd $(OBJ) ; $(FORTRAN) -o ccqps2.o $(FFLAGS) ccqps2.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

ccqps3.o: $(OBJ)/ccqps3.o

$(OBJ)/ccqps3.o: ../ccqp/ccqps3.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "ccqps3  "
	$(SED) -f $(SEDS) ../ccqp/ccqps3.f90 > $(OBJ)/ccqps31.f90
	$(SED) -f $(LSEDS) $(OBJ)/ccqps31.f90 > $(OBJ)/ccqps3.f90
	cd $(OBJ) ; $(FORTRAN) -o ccqps3.o $(FFLAGS) ccqps3.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

ccqpt.o: $(OBJ)/ccqpt.o

$(OBJ)/ccqpt.o: ../ccqp/ccqpt.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "ccqpt  "
	$(SED) -f $(SEDS) ../ccqp/ccqpt.f90 > $(OBJ)/ccqpt1.f90
	$(SED) -f $(LSEDS) $(OBJ)/ccqpt1.f90 > $(OBJ)/ccqpt.f90
	cd $(OBJ) ; $(FORTRAN) -o ccqpt.o $(FFLAGSS) ccqpt.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

l1qps.o: $(OBJ)/l1qps.o

$(OBJ)/l1qps.o: ../l1qp/l1qps.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "l1qps  "
	$(SED) -f $(SEDS) ../l1qp/l1qps.f90 > $(OBJ)/l1qps1.f90
	$(SED) -f $(LSEDS) $(OBJ)/l1qps1.f90 > $(OBJ)/l1qps.f90
	cd $(OBJ) ; $(FORTRAN) -o l1qps.o $(FFLAGS) l1qps.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

l1qps2.o: $(OBJ)/l1qps2.o

$(OBJ)/l1qps2.o: ../l1qp/l1qps2.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "l1qps2  "
	$(SED) -f $(SEDS) ../l1qp/l1qps2.f90 > $(OBJ)/l1qps21.f90
	$(SED) -f $(LSEDS) $(OBJ)/l1qps21.f90 > $(OBJ)/l1qps2.f90
	cd $(OBJ) ; $(FORTRAN) -o l1qps2.o $(FFLAGS) l1qps2.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

l1qps3.o: $(OBJ)/l1qps3.o

$(OBJ)/l1qps3.o: ../l1qp/l1qps3.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "l1qps3  "
	$(SED) -f $(SEDS) ../l1qp/l1qps3.f90 > $(OBJ)/l1qps31.f90
	$(SED) -f $(LSEDS) $(OBJ)/l1qps31.f90 > $(OBJ)/l1qps3.f90
	cd $(OBJ) ; $(FORTRAN) -o l1qps3.o $(FFLAGS) l1qps3.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

l1qpt.o: $(OBJ)/l1qpt.o

$(OBJ)/l1qpt.o: ../l1qp/l1qpt.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "l1qpt  "
	$(SED) -f $(SEDS) ../l1qp/l1qpt.f90 > $(OBJ)/l1qpt1.f90
	$(SED) -f $(LSEDS) $(OBJ)/l1qpt1.f90 > $(OBJ)/l1qpt.f90
	cd $(OBJ) ; $(FORTRAN) -o l1qpt.o $(FFLAGSS) l1qpt.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

cqpss.o: $(OBJ)/cqpss.o

$(OBJ)/cqpss.o: ../cqps/cqpss.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "cqpss  "
	$(SED) -f $(SEDS) ../cqps/cqpss.f90 > $(OBJ)/cqpss1.f90
	$(SED) -f $(LSEDS) $(OBJ)/cqpss1.f90 > $(OBJ)/cqpss.f90
	cd $(OBJ) ; $(FORTRAN) -o cqpss.o $(FFLAGS) cqpss.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

cqpss2.o: $(OBJ)/cqpss2.o

$(OBJ)/cqpss2.o: ../cqps/cqpss2.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "cqpss2  "
	$(SED) -f $(SEDS) ../cqps/cqpss2.f90 > $(OBJ)/cqpss21.f90
	$(SED) -f $(LSEDS) $(OBJ)/cqpss21.f90 > $(OBJ)/cqpss2.f90
	cd $(OBJ) ; $(FORTRAN) -o cqpss2.o $(FFLAGS) cqpss2.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

cqpss3.o: $(OBJ)/cqpss3.o

$(OBJ)/cqpss3.o: ../cqps/cqpss3.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "cqpss3  "
	$(SED) -f $(SEDS) ../cqps/cqpss3.f90 > $(OBJ)/cqpss31.f90
	$(SED) -f $(LSEDS) $(OBJ)/cqpss31.f90 > $(OBJ)/cqpss3.f90
	cd $(OBJ) ; $(FORTRAN) -o cqpss3.o $(FFLAGS) cqpss3.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

cqpst.o: $(OBJ)/cqpst.o

$(OBJ)/cqpst.o: ../cqps/cqpst.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "cqpst  "
	$(SED) -f $(SEDS) ../cqps/cqpst.f90 > $(OBJ)/cqpst1.f90
	$(SED) -f $(LSEDS) $(OBJ)/cqpst1.f90 > $(OBJ)/cqpst.f90
	cd $(OBJ) ; $(FORTRAN) -o cqpst.o $(FFLAGSS) cqpst.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

dqps.o: $(OBJ)/dqps.o

$(OBJ)/dqps.o: ../dqp/dqps.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "dqps  "
	$(SED) -f $(SEDS) ../dqp/dqps.f90 > $(OBJ)/dqps1.f90
	$(SED) -f $(LSEDS) $(OBJ)/dqps1.f90 > $(OBJ)/dqps.f90
	cd $(OBJ) ; $(FORTRAN) -o dqps.o $(FFLAGS) dqps.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

dqps2.o: $(OBJ)/dqps2.o

$(OBJ)/dqps2.o: ../dqp/dqps2.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "dqps2  "
	$(SED) -f $(SEDS) ../dqp/dqps2.f90 > $(OBJ)/dqps21.f90
	$(SED) -f $(LSEDS) $(OBJ)/dqps21.f90 > $(OBJ)/dqps2.f90
	cd $(OBJ) ; $(FORTRAN) -o dqps2.o $(FFLAGS) dqps2.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

dqps3.o: $(OBJ)/dqps3.o

$(OBJ)/dqps3.o: ../dqp/dqps3.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "dqps3  "
	$(SED) -f $(SEDS) ../dqp/dqps3.f90 > $(OBJ)/dqps31.f90
	$(SED) -f $(LSEDS) $(OBJ)/dqps31.f90 > $(OBJ)/dqps3.f90
	cd $(OBJ) ; $(FORTRAN) -o dqps3.o $(FFLAGS) dqps3.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

dqps4.o: $(OBJ)/dqps4.o

$(OBJ)/dqps4.o: ../dqp/dqps4.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "dqps4  "
	$(SED) -f $(SEDS) ../dqp/dqps4.f90 > $(OBJ)/dqps41.f90
	$(SED) -f $(LSEDS) $(OBJ)/dqps41.f90 > $(OBJ)/dqps4.f90
	cd $(OBJ) ; $(FORTRAN) -o dqps4.o $(FFLAGS) dqps4.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

dqpt.o: $(OBJ)/dqpt.o

$(OBJ)/dqpt.o: ../dqp/dqpt.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "dqpt  "
	$(SED) -f $(SEDS) ../dqp/dqpt.f90 > $(OBJ)/dqpt1.f90
	$(SED) -f $(LSEDS) $(OBJ)/dqpt1.f90 > $(OBJ)/dqpt.f90
	cd $(OBJ) ; $(FORTRAN) -o dqpt.o $(FFLAGSS) dqpt.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

dlps.o: $(OBJ)/dlps.o

$(OBJ)/dlps.o: ../dlp/dlps.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "dlps  "
	$(SED) -f $(SEDS) ../dlp/dlps.f90 > $(OBJ)/dlps1.f90
	$(SED) -f $(LSEDS) $(OBJ)/dlps1.f90 > $(OBJ)/dlps.f90
	cd $(OBJ) ; $(FORTRAN) -o dlps.o $(FFLAGS) dlps.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

dlps2.o: $(OBJ)/dlps2.o

$(OBJ)/dlps2.o: ../dlp/dlps2.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "dlps2  "
	$(SED) -f $(SEDS) ../dlp/dlps2.f90 > $(OBJ)/dlps21.f90
	$(SED) -f $(LSEDS) $(OBJ)/dlps21.f90 > $(OBJ)/dlps2.f90
	cd $(OBJ) ; $(FORTRAN) -o dlps2.o $(FFLAGS) dlps2.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

dlps3.o: $(OBJ)/dlps3.o

$(OBJ)/dlps3.o: ../dlp/dlps3.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "dlps3  "
	$(SED) -f $(SEDS) ../dlp/dlps3.f90 > $(OBJ)/dlps31.f90
	$(SED) -f $(LSEDS) $(OBJ)/dlps31.f90 > $(OBJ)/dlps3.f90
	cd $(OBJ) ; $(FORTRAN) -o dlps3.o $(FFLAGS) dlps3.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

dlps4.o: $(OBJ)/dlps4.o

$(OBJ)/dlps4.o: ../dlp/dlps4.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "dlps4  "
	$(SED) -f $(SEDS) ../dlp/dlps4.f90 > $(OBJ)/dlps41.f90
	$(SED) -f $(LSEDS) $(OBJ)/dlps41.f90 > $(OBJ)/dlps4.f90
	cd $(OBJ) ; $(FORTRAN) -o dlps4.o $(FFLAGS) dlps4.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

dlpt.o: $(OBJ)/dlpt.o

$(OBJ)/dlpt.o: ../dlp/dlpt.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "dlpt  "
	$(SED) -f $(SEDS) ../dlp/dlpt.f90 > $(OBJ)/dlpt1.f90
	$(SED) -f $(LSEDS) $(OBJ)/dlpt1.f90 > $(OBJ)/dlpt.f90
	cd $(OBJ) ; $(FORTRAN) -o dlpt.o $(FFLAGSS) dlpt.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

lpas.o: $(OBJ)/lpas.o

$(OBJ)/lpas.o: ../lpa/lpas.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "lpas  "
	$(SED) -f $(SEDS) ../lpa/lpas.f90 > $(OBJ)/lpas1.f90
	$(SED) -f $(LSEDS) $(OBJ)/lpas1.f90 > $(OBJ)/lpas.f90
	cd $(OBJ) ; $(FORTRAN) -o lpas.o $(FFLAGS) lpas.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

lpat.o: $(OBJ)/lpat.o

$(OBJ)/lpat.o: ../lpa/lpat.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "lpat  "
	$(SED) -f $(SEDS) ../lpa/lpat.f90 > $(OBJ)/lpat1.f90
	$(SED) -f $(LSEDS) $(OBJ)/lpat1.f90 > $(OBJ)/lpat.f90
	cd $(OBJ) ; $(FORTRAN) -o lpat.o $(FFLAGSS) lpat.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

lpbs.o: $(OBJ)/lpbs.o

$(OBJ)/lpbs.o: ../lpb/lpbs.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "lpbs  "
	$(SED) -f $(SEDS) ../lpb/lpbs.f90 > $(OBJ)/lpbs1.f90
	$(SED) -f $(LSEDS) $(OBJ)/lpbs1.f90 > $(OBJ)/lpbs.f90
	cd $(OBJ) ; $(FORTRAN) -o lpbs.o $(FFLAGS) lpbs.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

lpbt.o: $(OBJ)/lpbt.o

$(OBJ)/lpbt.o: ../lpb/lpbt.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "lpbt  "
	$(SED) -f $(SEDS) ../lpb/lpbt.f90 > $(OBJ)/lpbt1.f90
	$(SED) -f $(LSEDS) $(OBJ)/lpbt1.f90 > $(OBJ)/lpbt.f90
	cd $(OBJ) ; $(FORTRAN) -o lpbt.o $(FFLAGSS) lpbt.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

lsqps.o: $(OBJ)/lsqps.o

$(OBJ)/lsqps.o: ../lsqp/lsqps.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "lsqps  "
	$(SED) -f $(SEDS) ../lsqp/lsqps.f90 > $(OBJ)/lsqps1.f90
	$(SED) -f $(LSEDS) $(OBJ)/lsqps1.f90 > $(OBJ)/lsqps.f90
	cd $(OBJ) ; $(FORTRAN) -o lsqps.o $(FFLAGS) lsqps.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

lsqps2.o: $(OBJ)/lsqps2.o

$(OBJ)/lsqps2.o: ../lsqp/lsqps2.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "lsqps2  "
	$(SED) -f $(SEDS) ../lsqp/lsqps2.f90 > $(OBJ)/lsqps21.f90
	$(SED) -f $(LSEDS) $(OBJ)/lsqps21.f90 > $(OBJ)/lsqps2.f90
	cd $(OBJ) ; $(FORTRAN) -o lsqps2.o $(FFLAGS) lsqps2.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

lsqpt.o: $(OBJ)/lsqpt.o

$(OBJ)/lsqpt.o: ../lsqp/lsqpt.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "lsqpt  "
	$(SED) -f $(SEDS) ../lsqp/lsqpt.f90 > $(OBJ)/lsqpt1.f90
	$(SED) -f $(LSEDS) $(OBJ)/lsqpt1.f90 > $(OBJ)/lsqpt.f90
	cd $(OBJ) ; $(FORTRAN) -o lsqpt.o $(FFLAGSS) lsqpt.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

lsqpt1.o: $(OBJ)/lsqpt1.o

$(OBJ)/lsqpt1.o: ../lsqp/lsqpt1.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "lsqpt1  "
	$(SED) -f $(SEDS) ../lsqp/lsqpt1.f90 > $(OBJ)/lsqpt11.f90
	$(SED) -f $(LSEDS) $(OBJ)/lsqpt11.f90 > $(OBJ)/lsqpt1.f90
	cd $(OBJ) ; $(FORTRAN) -o lsqpt1.o $(FFLAGSS) lsqpt1.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

eqps.o: $(OBJ)/eqps.o

$(OBJ)/eqps.o: ../eqp/eqps.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "eqps  "
	$(SED) -f $(SEDS) ../eqp/eqps.f90 > $(OBJ)/eqps1.f90
	$(SED) -f $(LSEDS) $(OBJ)/eqps1.f90 > $(OBJ)/eqps.f90
	cd $(OBJ) ; $(FORTRAN) -o eqps.o $(FFLAGS) eqps.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

eqps2.o: $(OBJ)/eqps2.o

$(OBJ)/eqps2.o: ../eqp/eqps2.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "eqps2  "
	$(SED) -f $(SEDS) ../eqp/eqps2.f90 > $(OBJ)/eqps1.f90
	$(SED) -f $(LSEDS) $(OBJ)/eqps1.f90 > $(OBJ)/eqps2.f90
	cd $(OBJ) ; $(FORTRAN) -o eqps2.o $(FFLAGS) eqps2.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

eqpt.o: $(OBJ)/eqpt.o

$(OBJ)/eqpt.o: ../eqp/eqpt.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "eqpt  "
	$(SED) -f $(SEDS) ../eqp/eqpt.f90 > $(OBJ)/eqpt1.f90
	$(SED) -f $(LSEDS) $(OBJ)/eqpt1.f90 > $(OBJ)/eqpt.f90
	cd $(OBJ) ; $(FORTRAN) -o eqpt.o $(FFLAGSS) eqpt.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

llss.o: $(OBJ)/llss.o

$(OBJ)/llss.o: ../lls/llss.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "llss  "
	$(SED) -f $(SEDS) ../lls/llss.f90 > $(OBJ)/llss1.f90
	$(SED) -f $(LSEDS) $(OBJ)/llss1.f90 > $(OBJ)/llss.f90
	cd $(OBJ) ; $(FORTRAN) -o llss.o $(FFLAGS) llss.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

llst.o: $(OBJ)/llst.o

$(OBJ)/llst.o: ../lls/llst.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "llst  "
	$(SED) -f $(SEDS) ../lls/llst.f90 > $(OBJ)/llst1.f90
	$(SED) -f $(LSEDS) $(OBJ)/llst1.f90 > $(OBJ)/llst.f90
	cd $(OBJ) ; $(FORTRAN) -o llst.o $(FFLAGSS) llst.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

rpds.o: $(OBJ)/rpds.o

$(OBJ)/rpds.o: ../rpd/rpds.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "rpds  "
	$(SED) -f $(SEDS) ../rpd/rpds.f90 > $(OBJ)/rpds1.f90
	$(SED) -f $(LSEDS) $(OBJ)/rpds1.f90 > $(OBJ)/rpds.f90
	cd $(OBJ) ; $(FORTRAN) -o rpds.o $(FFLAGS) rpds.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

rpdt.o: $(OBJ)/rpdt.o

$(OBJ)/rpdt.o: ../rpd/rpdt.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "rpdt  "
	$(SED) -f $(SEDS) ../rpd/rpdt.f90 > $(OBJ)/rpdt1.f90
	$(SED) -f $(LSEDS) $(OBJ)/rpdt1.f90 > $(OBJ)/rpdt.f90
	cd $(OBJ) ; $(FORTRAN) -o rpdt.o $(FFLAGSS) rpdt.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

qpps.o: $(OBJ)/qpps.o

$(OBJ)/qpps.o: ../qpp/qpps.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "qpps  "
	$(SED) -f $(SEDS) ../qpp/qpps.f90 > $(OBJ)/qpps1.f90
	$(SED) -f $(LSEDS) $(OBJ)/qpps1.f90 > $(OBJ)/qpps.f90
	cd $(OBJ) ; $(FORTRAN) -o qpps.o $(FFLAGS) qpps.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

qppt.o: $(OBJ)/qppt.o

$(OBJ)/qppt.o: ../qpp/qppt.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "qppt  "
	$(SED) -f $(SEDS) ../qpp/qppt.f90 > $(OBJ)/qppt1.f90
	$(SED) -f $(LSEDS) $(OBJ)/qppt1.f90 > $(OBJ)/qppt.f90
	cd $(OBJ) ; $(FORTRAN) -o qppt.o $(FFLAGSS) qppt.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

qpts.o: $(OBJ)/qpts.o

$(OBJ)/qpts.o: ../qpt/qpts.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "qpts  "
	$(SED) -f $(SEDS) ../qpt/qpts.f90 > $(OBJ)/qpts1.f90
	$(SED) -f $(LSEDS) $(OBJ)/qpts1.f90 > $(OBJ)/qpts.f90
	cd $(OBJ) ; $(FORTRAN) -o qpts.o $(FFLAGS) qpts.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

qptt.o: $(OBJ)/qptt.o

$(OBJ)/qptt.o: ../qpt/qptt.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "qptt  "
	$(SED) -f $(SEDS) ../qpt/qptt.f90 > $(OBJ)/qptt1.f90
	$(SED) -f $(LSEDS) $(OBJ)/qptt1.f90 > $(OBJ)/qptt.f90
	cd $(OBJ) ; $(FORTRAN) -o qptt.o $(FFLAGSS) qptt.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

presolves.o: $(OBJ)/presolves.o

$(OBJ)/presolves.o: ../presolve/presolves.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "presolves  "
	$(SED) -f $(SEDS) ../presolve/presolves.f90 > $(OBJ)/presolves1.f90
	$(SED) -f $(LSEDS) $(OBJ)/presolves1.f90 > $(OBJ)/presolves.f90
	cd $(OBJ) ; $(FORTRAN) -o presolves.o $(FFLAGS) presolves.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

#  generate HSL codes from GALAHAD ones

hslgen:
	$(SED) -f ../hsl/gal2hsl ../qpa/qpa.f90 > ../hsl/hsl_ve19/ve19d.f90
	$(SED) -f ../hsl/gal2hsl ../qpb/qpb.f90 > ../hsl/hsl_ve12/ve12d.f90
	$(SED) -f ../hsl/gal2hsl ../qpp/qpp.f90 > ../hsl/hsl_ve15/ve15d.f90
	$(SED) -f ../hsl/gal2hsl ../lpb/lpb.f90 > ../hsl/hsl_la06/la06d.f90
	$(SED) -f ../hsl/gal2hsl ../qpa/qpas.f90 > ../hsl/hsl_ve19/ve19ds.f90
	$(SED) -f ../hsl/gal2hsl ../qpa/qpat.f90 > ../hsl/hsl_ve19/ve19dt.f90
	$(SED) -f ../hsl/gal2hsl ../qpb/qpbs.f90 > ../hsl/hsl_ve12/ve12ds.f90
	$(SED) -f ../hsl/gal2hsl ../qpb/qpbt.f90 > ../hsl/hsl_ve12/ve12dt.f90
	$(SED) -f ../hsl/gal2hsl ../lpb/lpbs.f90 > ../hsl/hsl_la06/la06ds.f90
	$(SED) -f ../hsl/gal2hsl ../lpb/lpbt.f90 > ../hsl/hsl_la06/la06dt.f90
	$(SED) -f ../hsl/gal2hsl ../lls/lls.f90 > ../hsl/hsl_ve20/ve20d.f90
	$(SED) -f ../hsl/gal2hsl ../eqp/eqp.f90 > ../hsl/hsl_ve18/ve18d.f90
	$(SED) -f ../hsl/gal2hsl ../specs/src/qpb.tex > ../hsl/hsl_ve12/hsl_ve12.tex
	$(SED) -f ../hsl/gal2hsl ../specs/src/qpa.tex > ../hsl/hsl_ve19/hsl_ve19.tex
	$(SED) -f ../hsl/gal2hsl ../specs/src/lpb.tex > ../hsl/hsl_ve12/hsl_la06.tex
#  book keeping

clean:
	@printf ' %-9s\t\t' "Cleaning"
	$(RM) $(LGS) $(LGD) $(OBJ)/qpbdt.o $(OBJ)/qpbs.o $(OBJ)/qpbt.o \
           $(OBJ)/qpbst.o
	@printf '[ OK ]\n'

cleanall:
	@printf ' %-14s\t\t' "Removing all $(PRECIS) precision object and module files"
	$(RM) $(OBJ)/* $(MOD)/*
	@printf '[ OK ]\n'

rmlsqp:
	@printf ' %-9s %-15s\t\t' "Removing" "lsqp from archive "
	$(RMARFILE) lsqp.o
	@printf '[ OK ]\n'

rmqpa:
	@printf ' %-9s %-15s\t\t' "Removing" "qpa from archive "
	$(RMARFILE) qpa.o
	@printf '[ OK ]\n'

rmqpb:
	@printf ' %-9s %-15s\t\t' "Removing" "qpb from archive "
	$(RMARFILE) qpb.o
	@printf '[ OK ]\n'

rmqpc:
	@printf ' %-9s %-15s\t\t' "Removing" "qpc from archive "
	$(RMARFILE) qpc.o
	@printf '[ OK ]\n'

rmqpd:
	@printf ' %-9s %-15s\t\t' "Removing" "qpd from archive "
	$(RMARFILE) qpd.o
	@printf '[ OK ]\n'

rmqpe:
	@printf ' %-9s %-15s\t\t' "Removing" "qpe from archive "
	$(RMARFILE) qpe.o
	@printf '[ OK ]\n'

rmqp:
	@printf ' %-9s %-15s\t\t' "Removing" "qp from archive "
	$(RMARFILE) qp.o
	@printf '[ OK ]\n'

rmbqp:
	@printf ' %-9s %-15s\t\t' "Removing" "bqp from archive "
	$(RMARFILE) bqp.o
	@printf '[ OK ]\n'

rmbqpb:
	@printf ' %-9s %-15s\t\t' "Removing" "bqpb from archive "
	$(RMARFILE) bqpb.o
	@printf '[ OK ]\n'

rmcqp:
	@printf ' %-9s %-15s\t\t' "Removing" "cqp from archive "
	$(RMARFILE) cqp.o
	@printf '[ OK ]\n'

rmccqp:
	@printf ' %-9s %-15s\t\t' "Removing" "ccqp from archive "
	$(RMARFILE) ccqp.o
	@printf '[ OK ]\n'

rml1qp:
	@printf ' %-9s %-15s\t\t' "Removing" "l1qp from archive "
	$(RMARFILE) l1qp.o
	@printf '[ OK ]\n'

rmcqps:
	@printf ' %-9s %-15s\t\t' "Removing" "cqps from archive "
	$(RMARFILE) cqps.o
	@printf '[ OK ]\n'

rmdqp:
	@printf ' %-9s %-15s\t\t' "Removing" "dqp from archive "
	$(RMARFILE) dqp.o
	@printf '[ OK ]\n'

rmdlp:
	@printf ' %-9s %-15s\t\t' "Removing" "dlp from archive "
	$(RMARFILE) dlp.o
	@printf '[ OK ]\n'

rmlpa:
	@printf ' %-9s %-15s\t\t' "Removing" "lpa from archive "
	$(RMARFILE) lpa.o
	@printf '[ OK ]\n'

rmlpb:
	@printf ' %-9s %-15s\t\t' "Removing" "lpb from archive "
	$(RMARFILE) lpb.o
	@printf '[ OK ]\n'

rmeqp:
	@printf ' %-9s %-15s\t\t' "Removing" "eqp from archive "
	$(RMARFILE) eqp.o
	@printf '[ OK ]\n'

rmlls:
	@printf ' %-9s %-15s\t\t' "Removing" "lls from archive "
	$(RMARFILE) lls.o
	@printf '[ OK ]\n'

rmqpp:
	@printf ' %-9s %-15s\t\t' "Removing" "qpp from archive "
	$(RMARFILE) qpp.o
	@printf '[ OK ]\n'
