#  Main body of the installation makefile for the GALAHAD
#  regularised quadratic subbroblem-solving packages which
#  include TRS, RQS, DPS, LLST, RLLS, GLTR, GLRT, GMTR, LSTR, LSRT and L2RT

#  N. I. M. Gould, D. Orban and Ph. L. Toint.
#  This version: 24 VI 2014

SHELL = /bin/$(BINSHELL)

#  compiler flags

FFLAGS       = $(BASIC) $(OPTIMIZATION)   $(DEBUG) $(MODULES) $(F90) $(USUAL)
FFLAGSS      = $(BASIC) $(OPTIMIZATION)   $(DEBUG) $(MODULES) $(F90) $(SPECIAL)
FFLAGSN      = $(BASIC) $(NOOPTIMIZATION) $(DEBUG) $(MODULES) $(F90)
FFLAGS77     = $(BASIC) $(OPTIMIZATION)   $(DEBUG) $(MODULES) $(F77) $(USUAL)
FFLAGS77S    = $(BASIC) $(OPTIMIZATION)   $(DEBUG) $(MODULES) $(F77) $(SPECIAL)
FFLAGSOMP    = $(BASIC) $(OPTIMIZATION)   $(DEBUG) $(MODULES) $(F90) $(USUAL) \
               $(OPENMP)
FFLAGSNOMP   = $(BASIC) $(NOOPTIMIZATION) $(DEBUG) $(MODULES) $(F90) $(OPENMP)
RUNFFLAGS    =          $(OPTIMIZATION)   $(DEBUG) $(MODULES)
RUNFFLAGSOMP =          $(OPTIMIZATION)   $(DEBUG) $(MODULES) $(OPENMP)

#  coverage flags

COVERAGE = -fprofile-arcs -ftest-coverage

#  names of random libraries

LG  = $(OBJ)/libgalahad.a
LGS = $(OBJS)/libgalahad.a
LGD = $(OBJD)/libgalahad.a

BLG  = $(OBJ)/libgalahad_blas.a
BLGS = $(OBJS)/libgalahad_blas.a
BLGD = $(OBJD)/libgalahad_blas.a

LLG  = $(OBJ)/libgalahad_lapack.a
LLGS = $(OBJS)/libgalahad_lapack.a
LLGD = $(OBJD)/libgalahad_lapack.a

HLG  = $(OBJ)/libgalahad_hsl.a
HLGS = $(OBJS)/libgalahad_hsl.a
HLGD = $(OBJD)/libgalahad_hsl.a

MLG  = $(OBJ)/libgalahad_metis.a
MLGS = $(OBJS)/libgalahad_metis.a
MLGD = $(OBJD)/libgalahad_metis.a

#  Libraries used

LIBS = -lgalahad $(HSL) $(SPRAL) $(PARDISO) $(WSMP) $(METIS) $(LAPACK) $(BLAS)
MLIBS = -lgalahad $(HSL) $(SPRAL) $(PARDISO) $(WSMP) $(METIS) \
        -lgalahad_minpack $(LAPACK) $(BLAS)

#  Archive manipulation strings

ARR = $(AR) $(ARREPFLAGS) $(LG)
RMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $(LG)
RMOBFILE = $(GALAHAD)/bin/rmobfile $(RM) $(OBJ)

BARR = $(AR) $(ARREPFLAGS) $(BLG)
BRMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $(BLG)

LARR = $(AR) $(ARREPFLAGS) $(LLG)
LRMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $(LLG)

HARR = $(AR) $(ARREPFLAGS) $(HLG)
HRMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $(HLG)

MARR = $(AR) $(ARREPFLAGS) $(MLG)
MRMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $MHLG)

MINARR = $(AR) $(ARREPFLAGS) $(MINLG)
MINRMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $MINLG)

#  sed scripts

LSEDS = $(GALAHAD)/seds/$(LINEARSOLVER).sed
LPSEDS = $(GALAHAD)/seds/$(LINEARSOLVER)_precon.sed

#  compilation agenda

SIR = basics sls qpt $(LGS)(ir.o)
DIR = basics sls qpt $(LGD)(ir.o)
STRS = $(SIR) mop $(LGS)(trs.o)
DTRS = $(DIR) mop $(LGD)(trs.o)
SRQS = $(SIR) mop $(LGS)(rqs.o)
DRQS = $(DIR) mop $(LGD)(rqs.o)
SDPS = $(STRS) $(SRQS) $(LGS)(dps.o)
DDPS = $(DTRS) $(DRQS) $(LGD)(dps.o)
SLLST = $(SIR) mop sbls $(LGS)(llst.o)
DLLST = $(DIR) mop sbls $(LGD)(llst.o)
SRLLS = $(SIR) mop $(LGS)(rlls.o)
DRLLS = $(DIR) mop $(LGD)(rlls.o)
SGLTR =  basics $(LGS)(gltr.o)
DGLTR =  basics $(LGD)(gltr.o)
SGLRT =  $(SGLTR) $(LGS)(glrt.o)
DGLRT =  $(DGLTR) $(LGD)(glrt.o)
SGMTR =  $(SGLTR) $(LGS)(gmtr.o)
DGMTR =  $(DGLTR) $(LGD)(gmtr.o)
#SLSTR =  basics spqr $(LGS)(lstr.o)
#DLSTR =  basics spqr $(LGD)(lstr.o)
SLSTR =  basics $(LGS)(lstr.o)
DLSTR =  basics $(LGD)(lstr.o)
SLSRT =  $(SLSTR) $(LGS)(lsrt.o)
DLSRT =  $(DLSTR) $(LGD)(lsrt.o)
SL2RT =  $(SLSTR) $(LGS)(l2rt.o)
DL2RT =  $(DLSTR) $(LGD)(l2rt.o)

IROBJECTSS = $(SIR)
IROBJECTSD = $(DIR)
TRSOBJECTSS = $(STRS)
TRSOBJECTSD = $(DTRS)
RQSOBJECTSS = $(SRQS)
RQSOBJECTSD = $(DRQS)
DPSOBJECTSS = $(SDPS)
DPSOBJECTSD = $(DDPS)

LLSTOBJECTSS = $(SLLST)
LLSTOBJECTSD = $(DLLST)
RLLSOBJECTSS = $(SRLLS)
RLLSOBJECTSD = $(DRLLS)

GLTROBJECTSS = $(SGLTR)
GLTROBJECTSD = $(DGLTR)
GLRTOBJECTSS = $(SGLRT)
GLRTOBJECTSD = $(DGLRT)

TRSOBJECTSS_CUTEST = $(STRS) $(SRUNTRS)
TRSOBJECTSD_CUTEST = $(DTRS) $(DRUNTRS)
RQSOBJECTSS_CUTEST = $(SRQS) $(SRUNRQS)
RQSOBJECTSD_CUTEST = $(DRQS) $(DRUNRQS)
DPSOBJECTSS_CUTEST = $(SDPS) $(SRUNDPS)
DPSOBJECTSD_CUTEST = $(DDPS) $(DRUNDPS)

LLSTOBJECTSS_CUTEST = $(SLLST) $(SRUNLLST)
LLSTOBJECTSD_CUTEST = $(DLLST) $(DRUNLLST)
RLLSOBJECTSS_CUTEST = $(SRLLS) $(SRUNRLLS)
RLLSOBJECTSD_CUTEST = $(DRLLS) $(DRUNRLLS)

GLTROBJECTSS_CUTEST = $(SGLTR) $(SRUNGLTR)
GLTROBJECTSD_CUTEST = $(DGLTR) $(DRUNGLTR)
GLRTOBJECTSS_CUTEST = $(SGLRT) $(SRUNGLRT)
GLRTOBJECTSD_CUTEST = $(DGLRT) $(DRUNGLRT)

LSTROBJECTSS_CUTEST = $(SLSTR) $(SRUNLSTR)
LSTROBJECTSD_CUTEST = $(DLSTR) $(DRUNLSTR)
LSRTOBJECTSS_CUTEST = $(SLSRT) $(SRUNLSRT)
LSRTOBJECTSD_CUTEST = $(DLSRT) $(DRUNLSRT)
L2RTOBJECTSS_CUTEST = $(SL2RT) $(SRUNL2RT)
L2RTOBJECTSD_CUTEST = $(DL2RT) $(DRUNL2RT)

OBJECTSS_CUTEST = $(TRSOBJECTSS_CUTEST) $(RQSOBJECTSS_CUTEST) \
                  $(DPSOBJECTSS_CUTEST)
OBJECTSD_CUTEST = $(TRSOBJECTSD_CUTEST) $(RQSOBJECTSD_CUTEST) \
                  $(DPSOBJECTSD_CUTEST)

IRDS = $(DIR) $(OBJD)/irs.o
IRDT = $(DIR) $(OBJD)/irt.o
IRSS = $(SIR) $(OBJS)/irs.o
IRST = $(SIR) $(OBJS)/irt.o

TRSDS = $(DTRS) $(OBJD)/trss.o
TRSDS2 = $(DTRS) $(OBJD)/trss2.o
TRSDS3 = $(DTRS) $(OBJD)/trss3.o
TRSDS4 = $(DTRS) $(OBJD)/trss4.o
TRSDT = $(DTRS) $(OBJD)/trst.o
TRSSS = $(STRS) $(OBJS)/trss.o
TRSST = $(STRS) $(OBJS)/trst.o

RQSDS = $(DRQS) $(OBJD)/rqss.o
RQSDS2 = $(DRQS) $(OBJD)/rqss2.o
RQSDT = $(DRQS) $(OBJD)/rqst.o
RQSSS = $(SRQS) $(OBJS)/rqss.o
RQSST = $(SRQS) $(OBJS)/rqst.o

DPSDS = $(DDPS) $(OBJD)/dpss.o
DPSDS2 = $(DDPS) $(OBJD)/dpss2.o
DPSDT = $(DDPS) $(OBJD)/dpst.o
DPSSS = $(SDPS) $(OBJS)/dpss.o
DPSST = $(SDPS) $(OBJS)/dpst.o

LLSTDS = $(DLLST) $(OBJD)/llsts.o
LLSTDS2 = $(DLLST) $(OBJD)/llsts2.o
LLSTDS3 = $(DLLST) $(OBJD)/llsts3.o
LLSTDS4 = $(DLLST) $(OBJD)/llsts4.o
LLSTDT = $(DLLST) $(OBJD)/llstt.o
LLSTSS = $(SLLST) $(OBJS)/llsts.o
LLSTST = $(SLLST) $(OBJS)/llstt.o

RLLSDS = $(DRLLS) $(OBJD)/rllss.o
RLLSDS2 = $(DRLLS) $(OBJD)/rllss2.o
RLLSDT = $(DRLLS) $(OBJD)/rllst.o
RLLSSS = $(SRLLS) $(OBJS)/rllss.o
RLLSST = $(SRLLS) $(OBJS)/rllst.o

GLTRDS2 = $(DGLTR) $(OBJD)/gltrs2.o
GLTRDS3 = $(DGLTR) $(OBJD)/gltrs3.o
GLTRDS = $(DGLTR) $(OBJD)/gltrs.o
GLTRDT = $(DGLTR) $(OBJD)/gltrt.o
GLTRSS = $(SGLTR) $(OBJS)/gltrs.o
GLTRST = $(SGLTR) $(OBJS)/gltrt.o

GLRTDS = $(DGLRT) $(OBJD)/glrts.o
GLRTDT = $(DGLRT) $(OBJD)/glrtt.o
GLRTSS = $(SGLRT) $(OBJS)/glrts.o
GLRTST = $(SGLRT) $(OBJS)/glrtt.o

GMTRDS2 = $(DGMTR) $(OBJD)/gmtrs2.o
GMTRDS3 = $(DGMTR) $(OBJD)/gmtrs3.o
GMTRDS = $(DGMTR) $(OBJD)/gmtrs.o
GMTRDT = $(DGMTR) $(OBJD)/gmtrt.o
GMTRSS = $(SGMTR) $(OBJS)/gmtrs.o
GMTRST = $(SGMTR) $(OBJS)/gmtrt.o

LSTRDS = $(DLSTR) $(OBJD)/lstrs.o
LSTRDS2 = $(DLSTR) $(OBJD)/lstrs2.o
LSTRDSE = $(DLSTR) $(OBJD)/lstrse.o
LSTRDT = $(DLSTR) $(OBJD)/lstrt.o
LSTRSS = $(SLSTR) $(OBJS)/lstrs.o
LSTRST = $(SLSTR) $(OBJS)/lstrt.o

LSRTDS = $(DLSRT) $(OBJD)/lsrts.o
LSRTDS2 = $(DLSRT) $(OBJD)/lsrts2.o
LSRTDSE = $(DLSRT) $(OBJD)/lsrtse.o
LSRTDT = $(DLSRT) $(OBJD)/lsrtt.o
LSRTSS = $(SLSRT) $(OBJS)/lsrts.o
LSRTST = $(SLSRT) $(OBJS)/lsrtt.o

L2RTDS = $(DL2RT) $(OBJD)/l2rts.o
L2RTDS2 = $(DL2RT) $(OBJD)/l2rts2.o
L2RTDT = $(DL2RT) $(OBJD)/l2rtt.o
L2RTSS = $(SL2RT) $(OBJS)/l2rts.o
L2RTST = $(SL2RT) $(OBJS)/l2rtt.o

RIRDS = $(OBJD)/irs.o -L$(OBJD) $(LIBS)
RIRDT = $(OBJD)/irt.o -L$(OBJD) $(LIBS)
RIRSS = $(OBJS)/irs.o -L$(OBJS) $(LIBS)
RIRST = $(OBJS)/irt.o -L$(OBJS) $(LIBS)

RTRSDS = $(OBJD)/trss.o -L$(OBJD) $(LIBS)
RTRSDS2 = $(OBJD)/trss2.o -L$(OBJD) $(LIBS)
RTRSDS3 = $(OBJD)/trss3.o -L$(OBJD) $(LIBS)
RTRSDS4 = $(OBJD)/trss4.o -L$(OBJD) $(LIBS)
RTRSDT = $(OBJD)/trst.o -L$(OBJD) $(LIBS)
RTRSSS = $(OBJS)/trss.o -L$(OBJS) $(LIBS)
RTRSST = $(OBJS)/trst.o -L$(OBJS) $(LIBS)

RRQSDS = $(OBJD)/rqss.o -L$(OBJD) $(LIBS)
RRQSDS2 = $(OBJD)/rqss2.o -L$(OBJD) $(LIBS)
RRQSDT = $(OBJD)/rqst.o -L$(OBJD) $(LIBS)
RRQSSS = $(OBJS)/rqss.o -L$(OBJS) $(LIBS)
RRQSST = $(OBJS)/rqst.o -L$(OBJS) $(LIBS)

RDPSDS = $(OBJD)/dpss.o -L$(OBJD) $(LIBS)
RDPSDS2 = $(OBJD)/dpss2.o -L$(OBJD) $(LIBS)
RDPSDT = $(OBJD)/dpst.o -L$(OBJD) $(LIBS)
RDPSSS = $(OBJS)/dpss.o -L$(OBJS) $(LIBS)
RDPSST = $(OBJS)/dpst.o -L$(OBJS) $(LIBS)

RLLSTDS = $(OBJD)/llsts.o -L$(OBJD) $(LIBS)
RLLSTDS2 = $(OBJD)/llsts2.o -L$(OBJD) $(LIBS)
RLLSTDS3 = $(OBJD)/llsts3.o -L$(OBJD) $(LIBS)
RLLSTDS4 = $(OBJD)/llsts4.o -L$(OBJD) $(LIBS)
RLLSTDT = $(OBJD)/llstt.o -L$(OBJD) $(LIBS)
RLLSTSS = $(OBJS)/llsts.o -L$(OBJS) $(LIBS)
RLLSTST = $(OBJS)/llstt.o -L$(OBJS) $(LIBS)

RRLLSDS = $(OBJD)/rllss.o -L$(OBJD) $(LIBS)
RRLLSDS2 = $(OBJD)/rllss2.o -L$(OBJD) $(LIBS)
RRLLSDT = $(OBJD)/rllst.o -L$(OBJD) $(LIBS)
RRLLSSS = $(OBJS)/rllss.o -L$(OBJS) $(LIBS)
RRLLSST = $(OBJS)/rllst.o -L$(OBJS) $(LIBS)

RGLTRDS2 = $(OBJD)/gltrs2.o -L$(OBJD) $(LIBS)
RGLTRDS3 = $(OBJD)/gltrs3.o -L$(OBJD) $(LIBS)
RGLTRDS = $(OBJD)/gltrs.o -L$(OBJD) $(LIBS)
RGLTRDT = $(OBJD)/gltrt.o -L$(OBJD) $(LIBS)
RGLTRSS = $(OBJS)/gltrs.o -L$(OBJS) $(LIBS)
RGLTRST = $(OBJS)/gltrt.o -L$(OBJS) $(LIBS)

RGMTRDS2 = $(OBJD)/gmtrs2.o -L$(OBJD) $(LIBS)
RGMTRDS3 = $(OBJD)/gmtrs3.o -L$(OBJD) $(LIBS)
RGMTRDS = $(OBJD)/gmtrs.o -L$(OBJD) $(LIBS)
RGMTRDT = $(OBJD)/gmtrt.o -L$(OBJD) $(LIBS)
RGMTRSS = $(OBJS)/gmtrs.o -L$(OBJS) $(LIBS)
RGMTRST = $(OBJS)/gmtrt.o -L$(OBJS) $(LIBS)

RGLRTDS = $(OBJD)/glrts.o -L$(OBJD) $(LIBS)
RGLRTDT = $(OBJD)/glrtt.o -L$(OBJD) $(LIBS)
RGLRTSS = $(OBJS)/glrts.o -L$(OBJS) $(LIBS)
RGLRTST = $(OBJS)/glrtt.o -L$(OBJS) $(LIBS)

RLSTRDS = $(OBJD)/lstrs.o -L$(OBJD) $(LIBS)
RLSTRDS2 = $(OBJD)/lstrs2.o -L$(OBJD) $(LIBS)
RLSTRDSE = $(OBJD)/lstrse.o -L$(OBJD) $(LIBS)
RLSTRDT = $(OBJD)/lstrt.o -L$(OBJD) $(LIBS)
RLSTRSS = $(OBJS)/lstrs.o -L$(OBJS) $(LIBS)
RLSTRST = $(OBJS)/lstrt.o -L$(OBJS) $(LIBS)

RLSRTDS = $(OBJD)/lsrts.o -L$(OBJD) $(LIBS)
RLSRTDS2 = $(OBJD)/lsrts2.o -L$(OBJD) $(LIBS)
RLSRTDSE = $(OBJD)/lsrtse.o -L$(OBJD) $(LIBS)
RLSRTDT = $(OBJD)/lsrtt.o -L$(OBJD) $(LIBS)
RLSRTSS = $(OBJS)/lsrts.o -L$(OBJS) $(LIBS)
RLSRTST = $(OBJS)/lsrtt.o -L$(OBJS) $(LIBS)

RL2RTDS = $(OBJD)/l2rts.o -L$(OBJD) $(LIBS)
RL2RTDS2 = $(OBJD)/l2rts2.o -L$(OBJD) $(LIBS)
RL2RTDT = $(OBJD)/l2rtt.o -L$(OBJD) $(LIBS)
RL2RTSS = $(OBJS)/l2rts.o -L$(OBJS) $(LIBS)
RL2RTST = $(OBJS)/l2rtt.o -L$(OBJS) $(LIBS)

SRUNTRS = copyright minpack $(LGS)(usetrs.o) $(OBJS)/runtrs_sif.o
DRUNTRS = copyright minpack $(LGD)(usetrs.o) $(OBJD)/runtrs_sif.o
SRUNRQS = copyright $(LGS)(userqs.o) $(OBJS)/runrqs_sif.o
DRUNRQS = copyright $(LGD)(userqs.o) $(OBJD)/runrqs_sif.o
SRUNDPS = copyright $(LGS)(usedps.o) $(OBJS)/rundps_sif.o
DRUNDPS = copyright $(LGD)(usedps.o) $(OBJD)/rundps_sif.o

SRUNLLST = copyright minpack $(LGS)(usellst.o) $(OBJS)/runllst_sif.o
DRUNLLST = copyright minpack $(LGD)(usellst.o) $(OBJD)/runllst_sif.o
SRUNRLLS = copyright $(LGS)(userlls.o) $(OBJS)/runrlls_sif.o
DRUNRLLS = copyright $(LGD)(userlls.o) $(OBJD)/runrlls_sif.o

SRUNGLTR = copyright $(LGS)(usegltr.o) $(OBJS)/rungltr_sif.o
DRUNGLTR = copyright $(LGD)(usegltr.o) $(OBJD)/rungltr_sif.o
SRUNGLRT = copyright $(LGS)(useglrt.o) $(OBJS)/runglrt_sif.o
DRUNGLRT = copyright $(LGD)(useglrt.o) $(OBJD)/runglrt_sif.o

#SRUNLSTR = copyright miqr rif bsc ls27 ls28 ls29 mi35 bagmres lsmr \
#           $(LGS)(uselstr.o) $(OBJS)/runlstr_sif.o
#DRUNLSTR = copyright miqr rif bsc ls27 ls28 ls29 mi35 bagmres lsmr \
#           $(LGD)(uselstr.o) $(OBJD)/runlstr_sif.o

SRUNLSTR = copyright miqr mi35 $(LGS)(uselstr.o) $(OBJS)/runlstr_sif.o
DRUNLSTR = copyright miqr mi35 $(LGD)(uselstr.o) $(OBJD)/runlstr_sif.o
SRUNLSRT = copyright miqr mi35 $(LGS)(uselsrt.o) $(OBJS)/runlsrt_sif.o
DRUNLSRT = copyright miqr mi35 $(LGD)(uselsrt.o) $(OBJD)/runlsrt_sif.o
SRUNL2RT = copyright miqr mi35 $(LGS)(usel2rt.o) $(OBJS)/runl2rt_sif.o
DRUNL2RT = copyright miqr mi35 $(LGD)(usel2rt.o) $(OBJD)/runl2rt_sif.o

RQSOBJECTSS = $(SRQS)
RQSOBJECTSD = $(DRQS)
DPSOBJECTSS = $(SDPS)
DPSOBJECTSD = $(DDPS)

SUCC = precision version) compiled successfully
SUCC_CUTEST = precision version) for CUTEst compiled successfully

#  Main compilations and runs

rq: rq_$(PRECIS)
rq_single: all
	$(RANLIB) $(LGS)
rq_double: all
	$(RANLIB) $(LGD)

rq_cutest: ir_silent trs_cutest_silent rqs_cutest_silent \
          dps_cutest_silent gltr_cutest_silent glrt_cutest_silent \
          lstr_cutest_silent lsrt_cutest_silent l2rt_cutest_silent
#         gmtr_cutest_silent
rq_cutest_new: rq_cutest llst_cutest_silent rlls_cutest_silent

all: ir_silent trs_silent rqs_silent dps_silent gltr_silent glrt_silent \
        lstr_silent lsrt_silent l2rt_silent
#       gmtr_silent \
	@printf ' %-21s\n' "GALAHAD: RQ family ($(PRECIS) $(SUCC)"
all_new: all llst_silent rlls_silent

test: test_trs test_rqs test_dps test_gltr test_glrt \
      test_lstr test_lsrt test_l2rt
test_spec: test_spec_trs test_spec_rqs test_spec_dps \
           test_spec_gltr test_spec_glrt \
           test_spec_gmtr test_spec_lstr test_spec_lsrt test_spec_l2rt
test_nocutest: test_trs_nocutest test_rqs_nocutest test_dps_nocutest \
               test_gltr_nocutest test_glrt_nocutest \
               test_lstr_nocutest test_lsrt_nocutest test_l2rt_nocutest

# ir

ir_silent: ir_silent_$(PRECIS)
ir_silent_single: $(IROBJECTSS)
ir_silent_double: $(IROBJECTSD)

ir: ir_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: IR ($(PRECIS) $(SUCC)"
ir_single: $(IROBJECTSS)
	$(RANLIB) $(LGS)
ir_double: $(IROBJECTSD)
	$(RANLIB) $(LGD)

irsrunall: irss irst
irdrunall: irds irdt
irrunall: irdrunall irsrunall

# trs

trs_cutest_silent: trs_cutest_$(PRECIS)
trs_cutest: trs_cutest_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: TRS ($(PRECIS) $(SUCC_CUTEST)"
trs_cutest_single: $(TRSOBJECTSS_CUTEST)
	$(RANLIB) $(LGS)
trs_cutest_double: $(TRSOBJECTSD_CUTEST)
	$(RANLIB) $(LGD)

trs_silent: trs_silent_$(PRECIS)
trs_silent_single: $(TRSOBJECTSS)
trs_silent_double: $(TRSOBJECTSD)

trs: trs_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: TRS ($(PRECIS) $(SUCC)"
trs_single: $(TRSOBJECTSS)
	$(RANLIB) $(LGS)
trs_double: $(TRSOBJECTSD)
	$(RANLIB) $(LGD)

trssrunall: trsss trsst
trsdrunall: trsds trsdt
trsrunall: trsdrunall trssrunall

test_trs: test_trs_$(PRECIS)

test_trs_single: trsst $(SRUNTRS)
	echo ""
	echo " Testing CUTEst interface to trs"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) trs -s BQPBAND
	echo ""
	echo " Tests for trs complete"

test_trs_double: trsdt $(DRUNTRS)
	echo ""
	echo " Testing CUTEst interface to trs"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) trs BQPBAND
	echo ""
	echo " Tests for trs complete"

test_trs_nocutest: test_trs_nocutest_$(PRECIS)

test_trs_nocutest_single: trsst
	echo ""
	echo " Tests for trs complete"

test_trs_nocutest_double: trsdt
	echo ""
	echo " Tests for trs complete"

# rqs

rqs_cutest_silent: rqs_cutest_$(PRECIS)
rqs_cutest: rqs_cutest_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: RQS ($(PRECIS) $(SUCC_CUTEST)"
rqs_cutest_single: $(RQSOBJECTSS_CUTEST)
	$(RANLIB) $(LGS)
rqs_cutest_double: $(RQSOBJECTSD_CUTEST)
	$(RANLIB) $(LGD)

rqs_silent: rqs_silent_$(PRECIS)
rqs_silent_single: $(RQSOBJECTSS)
rqs_silent_double: $(RQSOBJECTSD)

rqs: rqs_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: RQS ($(PRECIS) $(SUCC)"
rqs_single: $(RQSOBJECTSS)
	$(RANLIB) $(LGS)
rqs_double: $(RQSOBJECTSD)
	$(RANLIB) $(LGD)

rqssrunall: rqsss rqsst
rqsdrunall: rqsds rqsdt
rqsrunall: rqsdrunall rqssrunall

test_rqs: test_rqs_$(PRECIS)

test_rqs_single: rqsst $(SRUNRQS)
	echo ""
	echo " Testing CUTEst interface to rqs"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) rqs -s BQPBAND
	echo ""
	echo " Tests for rqs complete"

test_rqs_double: rqsdt $(DRUNRQS)
	echo ""
	echo " Testing CUTEst interface to rqs"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) rqs BQPBAND
	echo ""
	echo " Tests for rqs complete"

test_rqs_nocutest: test_rqs_nocutest_$(PRECIS)

test_rqs_nocutest_single: rqsst
	echo ""
	echo " Tests for rqs complete"

test_rqs_nocutest_double: rqsdt
	echo ""
	echo " Tests for rqs complete"

# dps

dps_cutest_silent: dps_cutest_$(PRECIS)
dps_cutest: dps_cutest_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: DPS ($(PRECIS) $(SUCC_CUTEST)"
dps_cutest_single: $(DPSOBJECTSS_CUTEST)
	$(RANLIB) $(LGS)
dps_cutest_double: $(DPSOBJECTSD_CUTEST)
	$(RANLIB) $(LGD)

dps_silent: dps_silent_$(PRECIS)
dps_silent_single: $(DPSOBJECTSS)
dps_silent_double: $(DPSOBJECTSD)

dps: dps_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: DPS ($(PRECIS) $(SUCC)"
dps_single: $(DPSOBJECTSS)
	$(RANLIB) $(LGS)
dps_double: $(DPSOBJECTSD)
	$(RANLIB) $(LGD)

dpssrunall: dpsss dpsst
dpsdrunall: dpsds dpsdt
dpsrunall: dpsdrunall dpssrunall

test_dps: test_dps_$(PRECIS)

test_dps_single: dpsst $(SRUNDPS)
	echo ""
	echo " Testing CUTEst interface to dps"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) dps -s BQPBAND
	echo ""
	echo " Tests for dps complete"

test_dps_double: dpsdt $(DRUNDPS)
	echo ""
	echo " Testing CUTEst interface to dps"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) dps BQPBAND
	echo ""
	echo " Tests for dps complete"

test_dps_nocutest: test_dps_nocutest_$(PRECIS)

test_dps_nocutest_single: dpsst
	echo ""
	echo " Tests for dps complete"

test_dps_nocutest_double: dpsdt
	echo ""
	echo " Tests for dps complete"

# llst

llst_cutest_silent: llst_cutest_$(PRECIS)
llst_cutest: llst_cutest_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: LLST ($(PRECIS) $(SUCC_CUTEST)"
llst_cutest_single: $(LLSTOBJECTSS_CUTEST)
	$(RANLIB) $(LGS)
llst_cutest_double: $(LLSTOBJECTSD_CUTEST)
	$(RANLIB) $(LGD)

llst_silent: llst_silent_$(PRECIS)
llst_silent_single: $(LLSTOBJECTSS)
llst_silent_double: $(LLSTOBJECTSD)

llst: llst_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: LLST ($(PRECIS) $(SUCC)"
llst_single: $(LLSTOBJECTSS)
	$(RANLIB) $(LGS)
llst_double: $(LLSTOBJECTSD)
	$(RANLIB) $(LGD)

llstsrunall: llstss llstst
llstdrunall: llstds llstdt
llstrunall: llstdrunall llstsrunall

test_llst: test_llst_$(PRECIS)

test_llst_single: llstst $(SRUNLLST)
	echo ""
	echo " Testing CUTEst interface to llst"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) llst -s BQPBAND
	echo ""
	echo " Tests for llst complete"

test_llst_double: llstdt $(DRUNLLST)
	echo ""
	echo " Testing CUTEst interface to llst"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) llst BQPBAND
	echo ""
	echo " Tests for llst complete"

test_llst_nocutest: test_llst_nocutest_$(PRECIS)

test_llst_nocutest_single: llstst
	echo ""
	echo " Tests for llst complete"

test_llst_nocutest_double: llstdt
	echo ""
	echo " Tests for llst complete"

# rlls

rlls_cutest_silent: rlls_cutest_$(PRECIS)
rlls_cutest: rlls_cutest_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: RLLS ($(PRECIS) $(SUCC_CUTEST)"
rlls_cutest_single: $(RLLSOBJECTSS_CUTEST)
	$(RANLIB) $(LGS)
rlls_cutest_double: $(RLLSOBJECTSD_CUTEST)
	$(RANLIB) $(LGD)

rlls_silent: rlls_silent_$(PRECIS)
rlls_silent_single: $(RLLSOBJECTSS)
rlls_silent_double: $(RLLSOBJECTSD)

rlls: rlls_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: RLLS ($(PRECIS) $(SUCC)"
rlls_single: $(RLLSOBJECTSS)
	$(RANLIB) $(LGS)
rlls_double: $(RLLSOBJECTSD)
	$(RANLIB) $(LGD)

rllssrunall: rllsss rllsst
rllsdrunall: rllsds rllsdt
rllsrunall: rllsdrunall rllssrunall

test_rlls: test_rlls_$(PRECIS)

test_rlls_single: rllsst $(SRUNRLLS)
	echo ""
	echo " Testing CUTEst interface to rlls"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) rlls -s BQPBAND
	echo ""
	echo " Tests for rlls complete"

test_rlls_double: rllsdt $(DRUNRLLS)
	echo ""
	echo " Testing CUTEst interface to rlls"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) rlls BQPBAND
	echo ""
	echo " Tests for rlls complete"

test_rlls_nocutest: test_rlls_nocutest_$(PRECIS)

test_rlls_nocutest_single: rllsst
	echo ""
	echo " Tests for rlls complete"

test_rlls_nocutest_double: rllsdt
	echo ""
	echo " Tests for rlls complete"

#  gltr

gltr_cutest_silent: gltr_cutest_$(PRECIS)
gltr_cutest: gltr_cutest_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: GLTR ($(PRECIS) $(SUCC_CUTEST)"
gltr_cutest_single: $(GLTROBJECTSS_CUTEST)
	$(RANLIB) $(LGS)
gltr_cutest_double: $(GLTROBJECTSD_CUTEST)
	$(RANLIB) $(LGD)

gltr_silent: gltr_silent_$(PRECIS)
gltr_silent_single: $(SGLTR)
gltr_silent_double: $(DGLTR)

gltr: gltr_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: GLTR ($(PRECIS) $(SUCC)"
gltr_single: $(SGLTR)
	$(RANLIB) $(LGS)
gltr_double: $(DGLTR)
	$(RANLIB) $(LGD)

gltrsrunall: gltrss gltrst
gltrdrunall: gltrds gltrdt
gltrrunall: gltrdrunall gltrsrunall

test_gltr: test_gltr_$(PRECIS)

test_gltr_single: gltrst $(SRUNGLTR)
	echo ""
	echo " Testing CUTEst interface to gltr"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) gltr -s BQPBAND
	echo ""
	echo " Tests for gltr complete"

test_gltr_double: gltrdt $(DRUNGLTR)
	echo ""
	echo " Testing CUTEst interface to gltr"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) gltr BQPBAND
	echo ""
	echo " Tests for gltr complete"

test_gltr_nocutest: test_gltr_nocutest_$(PRECIS)

test_gltr_nocutest_single: gltrst
	echo ""
	echo " Tests for gltr complete"

test_gltr_nocutest_double: gltrdt
	echo ""
	echo " Tests for gltr complete"

#  glrt

glrt_cutest_silent: glrt_cutest_$(PRECIS)
glrt_cutest: glrt_cutest_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: GLRT ($(PRECIS) $(SUCC_CUTEST)"
glrt_cutest_single: $(GLRTOBJECTSS_CUTEST)
	$(RANLIB) $(LGS)
glrt_cutest_double: $(GLRTOBJECTSD_CUTEST)
	$(RANLIB) $(LGD)

glrt_silent: glrt_silent_$(PRECIS)
glrt_silent_single: $(SGLRT)
glrt_silent_double: $(DGLRT)

glrt: glrt_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: GLRT ($(PRECIS) $(SUCC)"
glrt_single: $(SGLRT)
	$(RANLIB) $(LGS)
glrt_double: $(DGLRT)
	$(RANLIB) $(LGD)

glrtsrunall: glrtss glrtst
glrtdrunall: glrtds glrtdt
glrtrunall: glrtdrunall glrtsrunall

test_glrt: test_glrt_$(PRECIS)

test_glrt_single: glrtst $(SRUNGLRT)
	echo ""
	echo " Testing CUTEst interface to glrt"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) glrt -s BQPBAND
	echo ""
	echo " Tests for glrt complete"

test_glrt_double: glrtdt $(DRUNGLRT)
	echo ""
	echo " Testing CUTEst interface to glrt"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) glrt BQPBAND
	echo ""
	echo " Tests for glrt complete"

test_glrt_nocutest: test_glrt_nocutest_$(PRECIS)

test_glrt_nocutest_single: glrtst
	echo ""
	echo " Tests for glrt complete"

test_glrt_nocutest_double: glrtdt
	echo ""
	echo " Tests for glrt complete"

#  gmtr

gmtr_cutest_silent: gmtr_cutest_$(PRECIS)
gmtr_cutest: gmtr_cutest_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: GMTR ($(PRECIS) $(SUCC_CUTEST)"
gmtr_cutest_single: $(SGMTR)
	$(RANLIB) $(LGS)
gmtr_cutest_double: $(DGMTR)
	$(RANLIB) $(LGD)

gmtr_silent: gmtr_silent_$(PRECIS)
gmtr_silent_single: $(SGMTR)
gmtr_silent_double: $(DGMTR)

gmtr: gmtr_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: GMTR ($(PRECIS) $(SUCC)"
gmtr_single: $(SGMTR)
	$(RANLIB) $(LGS)
gmtr_double: $(DGMTR)
	$(RANLIB) $(LGD)

gmtrsrunall: gmtrss gmtrst
gmtrdrunall: gmtrds gmtrdt
gmtrrunall: gmtrdrunall gmtrsrunall

#  lstr

lstr_cutest_silent: lstr_cutest_$(PRECIS)
lstr_cutest: lstr_cutest_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: LSTR ($(PRECIS) $(SUCC_CUTEST)"
lstr_cutest_single: $(LSTROBJECTSS_CUTEST)
	$(RANLIB) $(LGS)
lstr_cutest_double: $(LSTROBJECTSD_CUTEST)
	$(RANLIB) $(LGD)

lstr_silent: lstr_silent_$(PRECIS)
lstr_silent_single: $(SLSTR)
lstr_silent_double: $(DLSTR)

lstr: lstr_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: LSTR ($(PRECIS) $(SUCC)"
lstr_single: $(SLSTR)
	$(RANLIB) $(LGS)
lstr_double: $(DLSTR)
	$(RANLIB) $(LGD)

lstrsrunall: lstrss lstrst
lstrdrunall: lstrds lstrdt
lstrrunall: lstrdrunall lstrsrunall

test_lstr: test_lstr_$(PRECIS)

test_lstr_single: lstrst $(SRUNLSTR)
	echo ""
	echo " Testing CUTEst interface to lstr"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) lstr -s MGH09
	echo ""
	echo " Tests for lstr complete"

test_lstr_double: lstrdt $(DRUNLSTR)
	echo ""
	echo " Testing CUTEst interface to lstr"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) lstr MGH09
	echo ""
	echo " Tests for lstr complete"

test_lstr_nocutest: test_lstr_nocutest_$(PRECIS)

test_lstr_nocutest_single: lstrst
	echo ""
	echo " Tests for lstr complete"

test_lstr_nocutest_double: lstrdt
	echo ""
	echo " Tests for lstr complete"

#  lsrt

lsrt_cutest_silent: lsrt_cutest_$(PRECIS)
lsrt_cutest: lsrt_cutest_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: LSRT ($(PRECIS) $(SUCC_CUTEST)"
lsrt_cutest_single: $(SLSRT)
	$(RANLIB) $(LGS)
lsrt_cutest_double: $(DLSRT)
	$(RANLIB) $(LGD)

lsrt_silent: lsrt_silent_$(PRECIS)
lsrt_silent_single: $(SLSRTS)
lsrt_silent_double: $(DLSRT)

lsrt: lsrt_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: LSRT ($(PRECIS) $(SUCC)"
lsrt_single: $(SLSRTS)
	$(RANLIB) $(LGS)
lsrt_double: $(DLSRT)
	$(RANLIB) $(LGD)

lsrtsrunall: lsrtss lsrtst
lsrtdrunall: lsrtds lsrtdt
lsrtrunall: lsrtdrunall lsrtsrunall

test_lsrt: test_lsrt_$(PRECIS)

test_lsrt_single: lsrtst $(SRUNLSRT)
	echo ""
	echo " Testing CUTEst interface to lsrt"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) lsrt -s MGH09
	echo ""
	echo " Tests for lsrt complete"

test_lsrt_double: lsrtdt $(DRUNLSRT)
	echo ""
	echo " Testing CUTEst interface to lsrt"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) lsrt MGH09
	echo ""
	echo " Tests for lsrt complete"

test_lsrt_nocutest: test_lsrt_nocutest_$(PRECIS)

test_lsrt_nocutest_single: lsrtst
	echo ""
	echo " Tests for lsrt complete"

test_lsrt_nocutest_double: lsrtdt
	echo ""
	echo " Tests for lsrt complete"

#  l2rt

l2rt_cutest_silent: l2rt_cutest_$(PRECIS)
l2rt_cutest: l2rt_cutest_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: L2RT ($(PRECIS) $(SUCC_CUTEST)"
l2rt_cutest_single: $(SL2RT)
	$(RANLIB) $(LGS)
l2rt_cutest_double: $(DL2RT)
	$(RANLIB) $(LGD)

l2rt_silent: l2rt_silent_$(PRECIS)
l2rt_silent_single: $(SL2RT)
l2rt_silent_double: $(DL2RT)

l2rt: l2rt_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: L2RT ($(PRECIS) $(SUCC)"
l2rt_single: $(SL2RT)
	$(RANLIB) $(LGS)
l2rt_double: $(DL2RT)
	$(RANLIB) $(LGD)

l2rtsrunall: l2rtss l2rtst
l2rtdrunall: l2rtds l2rtdt
l2rtrunall: l2rtdrunall l2rtsrunall

test_l2rt: test_l2rt_$(PRECIS)

test_l2rt_single: l2rtst $(SRUNL2RT)
	echo ""
	echo " Testing CUTEst interface to l2rt"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) l2rt -s MGH09
	echo ""
	echo " Tests for l2rt complete"

test_l2rt_double: l2rtdt $(DRUNL2RT)
	echo ""
	echo " Testing CUTEst interface to l2rt"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) l2rt MGH09
	echo ""
	echo " Tests for l2rt complete"

test_l2rt_nocutest: test_l2rt_nocutest_$(PRECIS)

test_l2rt_nocutest_single: l2rtst
	echo ""
	echo " Tests for l2rt complete"

test_l2rt_nocutest_double: l2rtdt
	echo ""
	echo " Tests for l2rt complete"

#  basic packages

basics:
	( cd ../general ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            basics_silent PRECIS=$(PRECIS) PWD=$(PWD)/../general )
linearsolver:
	( cd ../general ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            linearsolver_silent PRECIS=$(PRECIS) PWD=$(PWD)/../general )
sls:
	( cd ../sls ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            sls_silent PRECIS=$(PRECIS) PWD=$(PWD)/../sls )
sbls:
	( cd ../sbls ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            sbls_silent PRECIS=$(PRECIS) PWD=$(PWD)/../sbls )
qpt:
	( cd ../qpt ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            qpt.o PRECIS=$(PRECIS) PWD=$(PWD)/../qpt )
mop:
	( cd ../mop ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            mop.o PRECIS=$(PRECIS) PWD=$(PWD)/../mop )
miqr:
	( cd ../miqr ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            miqr.o PRECIS=$(PRECIS) PWD=$(PWD)/../miqr )
mi35:
	( cd ../non-free/mi35 ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            mi35_silent PRECIS=$(PRECIS) PWD=$(PWD)/../non-free/mi35 )
#rif:
#	( cd ../rif ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
#            rif_silent PRECIS=$(PRECIS) PWD=$(PWD)/../rif )
#bagmres:
#	( cd ../bagmres ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
#            bagmres_silent PRECIS=$(PRECIS) PWD=$(PWD)/../bagmres )
#lsmr:
#	( cd ../lsmr ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
#            lsmr_silent PRECIS=$(PRECIS) PWD=$(PWD)/../lsmr )
#ls27:
#	( cd ../ls27 ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
#            ls27_silent PRECIS=$(PRECIS) PWD=$(PWD)/../ls27 )
#ls28:
#	( cd ../ls28 ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
#            ls28_silent PRECIS=$(PRECIS) PWD=$(PWD)/../ls28 )
#ls29:
#	( cd ../ls29 ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
#            ls29_silent PRECIS=$(PRECIS) PWD=$(PWD)/../ls29 )
#spqr:
#	( cd ../spqr ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
#            spqr_silent PRECIS=$(PRECIS) PWD=$(PWD)/../spqr )
#bsc:
#	( cd ../bsc ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
#            bsc_silent PRECIS=$(PRECIS) PWD=$(PWD)/../bsc )
minpack:
	( cd ../non-free/minpack ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            minpack_silent PRECIS=$(PRECIS) PWD=$(PWD)/../non-free/minpack )
copyright:
	( cd ../general ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            copyright.o PRECIS=$(PRECIS) PWD=$(PWD)/../general )

# run spec-sheet example tests

irss: $(IRSS)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_ir $(RIRSS)
	- ./run_ir < ../ir/irs.data >& irs.output
	cat irs.output
	rm ./run_ir

irst: $(IRST)
	echo " Exhaustive test of subroutine interface to ir"
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_ir $(RIRST)
	- ./run_ir >& irt.output
	cat irt.output
	rm ./run_ir

irds: $(IRDS)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_ir $(RIRDS)
	- ./run_ir < ../ir/irs.data >& irds.output
	cat irds.output
	rm ./run_ir

irdt: $(IRDT)
	echo " Exhaustive test of subroutine interface to ir"
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_ir $(RIRDT)
	- ./run_ir >& irdt.output
	cat irdt.output
	rm ./run_ir

trsss: $(TRSSS)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_trs $(RTRSSS)
	- ./run_trs >& trss.output
	cat trss.output
	rm ./run_trs

trsst: $(TRSST)
	echo " Exhaustive test of subroutine interface to trs"
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_trs $(RTRSST)
	- ./run_trs >& trst.output
	cat trst.output
	rm ./run_trs

trsds: $(TRSDS)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_trs $(RTRSDS)
	- ./run_trs >& trsds.output
	cat trsds.output
	rm ./run_trs

trsds2: $(TRSDS2)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_trs $(RTRSDS2)
	- ./run_trs >& trsds2.output
	cat trsds2.output
	rm ./run_trs

trsds3: $(TRSDS3)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_trs $(RTRSDS3)
	- ./run_trs
	rm ./run_trs

trsds4: $(TRSDS4)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_trs $(RTRSDS4)
	- ./run_trs
	rm ./run_trs

trsdt: $(TRSDT)
	echo " Exhaustive test of subroutine interface to trs"
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_trs $(RTRSDT)
	- ./run_trs >& trsdt.output
	cat trsdt.output
	rm ./run_trs

trst_gcov: $(DIR) mop
	echo " Exhaustive coverage test of subroutine interface to trs"
	$(SED) -f $(SEDS) trs.f90 > trs_gcov1.f90
	$(SED) -f $(LSEDS) trs_gcov1.f90 > trs_gcov2.f90
	$(SED) -f $(LPSEDS) trs_gcov2.f90 > trs_gcov3.f90
	$(SED) "s/^.$(NOT95)/     /" trs_gcov3.f90 > trs_gcov.f90
	$(FORTRAN) -g $(BASIC) $(NOOPTIMIZATION) $(MODULES) $(COVERAGE) \
          trs_gcov.f90
	$(SED) -f $(SEDS) trst.f90 > trst_gcov1.f90
	$(SED) -f $(LSEDS) trst_gcov1.f90 > trst_gcov.f90
	$(FORTRAN) -g $(BASIC) $(NOOPTIMIZATION) $(MODULES) $(COVERAGE) \
          trst_gcov.f90
	$(FORTRAN) $(NOOPTIMIZATION) $(MODULES) $(COVERAGE) \
          -o ./trs_gcov trs_gcov.o trst_gcov.o -L$(OBJ) $(LIBS)
	./trs_gcov
	gcov ./trs_gcov
	$(MV) ./trs_gcov.f90.gcov ./trs_coverage
	$(RM) ./trs*gcov* ./galahad_trs_*.mod

trs_paper: $(DTRS)
	$(SED) -f $(SEDS) ../trs/trs_paper.f90 > $(OBJ)/trs_paper1.f90
	$(SED) -f $(LSEDS) $(OBJ)/trs_paper1.f90 > $(OBJ)/trs_paper.f90
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_trs \
           -L$(OBJD) $(LIBS) $(OBJ)/trs_paper.f90 -L$(OBJD) $(LIBS)
	- ./run_trs
	rm ./run_trs $(OBJ)/trs_paper1.f90 $(OBJ)/trs_paper.f90

trs_paper_large: $(DTRS)
	$(SED) -f $(SEDS) ../trs/trs_paper_large.f90 > $(OBJ)/trs_paper1.f90
	$(SED) -f $(LSEDS) $(OBJ)/trs_paper1.f90 > $(OBJ)/trs_paper_large.f90
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_trs \
           -L$(OBJD) $(LIBS) $(OBJ)/trs_paper_large.f90 -L$(OBJD) $(LIBS)
	- ./run_trs
	rm ./run_trs $(OBJ)/trs_paper1.f90 $(OBJ)/trs_paper_large.f90

gqt_paper: minpack
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_gqt \
           ../trs/gqts.f90 -L$(OBJD) -lgalahad_minpack \
                                     -lgalahad_lapack -lgalahad_blas
	- ./run_gqt
	rm ./run_gqt

rqsss: $(RQSSS)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_rqs $(RRQSSS)
	- ./run_rqs >& rqss.output
	cat rqss.output
	rm ./run_rqs

rqsst: $(RQSST)
	echo " Exhaustive test of subroutine interface to rqs"
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_rqs $(RRQSST)
	- ./run_rqs >& rqst.output
	cat rqst.output
	rm ./run_rqs

rqsds: $(RQSDS)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_rqs $(RRQSDS)
	- ./run_rqs >& rqsds.output
	cat rqsds.output
	rm ./run_rqs

rqsds2: $(RQSDS2)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_rqs $(RRQSDS2)
	- ./run_rqs >& rqsds2.output
	cat rqsds2.output
	rm ./run_rqs

rqsdt: $(RQSDT)
	echo " Exhaustive test of subroutine interface to rqs"
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_rqs $(RRQSDT)
	- ./run_rqs >& rqsdt.output
	cat rqsdt.output
	rm ./run_rqs

rqs_paper_large: $(DRQS)
	$(SED) -f $(SEDS) ../rqs/rqs_paper_large.f90 > $(OBJ)/rqs_paper1.f90
	$(SED) -f $(LSEDS) $(OBJ)/rqs_paper1.f90 > $(OBJ)/rqs_paper_large.f90
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_rqs \
           -L$(OBJD) $(LIBS) $(OBJ)/rqs_paper_large.f90 -L$(OBJD) $(LIBS)
	- ./run_rqs
	rm ./run_rqs $(OBJ)/rqs_paper1.f90 $(OBJ)/rqs_paper_large.f90

dpsss: $(DPSSS)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_dps $(RDPSSS)
	- ./run_dps >& dpss.output
	cat dpss.output
	rm ./run_dps

dpsst: $(DPSST)
	echo " Exhaustive test of subroutine interface to dps"
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_dps $(RDPSST)
	- ./run_dps >& dpst.output
	cat dpst.output
	rm ./run_dps

dpsds: $(DPSDS)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_dps $(RDPSDS)
	- ./run_dps >& dpsds.output
	cat dpsds.output
	rm ./run_dps

dpsds2: $(DPSDS2)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_dps $(RDPSDS2)
	- ./run_dps >& dpsds2.output
	cat dpsds2.output
	rm ./run_dps

dpsdt: $(DPSDT)
	echo " Exhaustive test of subroutine interface to dps"
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_dps $(RDPSDT)
	- ./run_dps >& dpsdt.output
	cat dpsdt.output
	rm ./run_dps

llstss: $(LLSTSS)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_llst $(RLLSTSS)
	- ./run_llst >& llsts.output
	cat llsts.output
	rm ./run_llst

llstst: $(LLSTST)
	echo " Exhaustive test of subroutine interface to llst"
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_llst $(RLLSTST)
	- ./run_llst >& llstt.output
	cat llstt.output
	rm ./run_llst

llstds: $(LLSTDS)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_llst $(RLLSTDS)
#	- ./run_llst
	- ./run_llst >& llstds.output
	cat llstds.output
	rm ./run_llst

llstds2: $(LLSTDS2)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_llst $(RLLSTDS2)
	- ./run_llst >& llstds2.output
	cat llstds2.output
	rm ./run_llst

llstds3: $(LLSTDS3)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_llst $(RLLSTDS3)
	- ./run_llst
	rm ./run_llst

llstds4: $(LLSTDS4)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_llst $(RLLSTDS4)
	- ./run_llst
	rm ./run_llst

llstdt: $(LLSTDT)
	echo " Exhaustive test of subroutine interface to llst"
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_llst $(RLLSTDT)
	- ./run_llst >& llstdt.output
	cat llstdt.output
	rm ./run_llst

llstt_gcov: $(DIR) mop
	echo " Exhaustive coverage test of subroutine interface to llst"
	$(SED) -f $(SEDS) llst.f90 > llst_gcov1.f90
	$(SED) -f $(LSEDS) llst_gcov1.f90 > llst_gcov2.f90
	$(SED) -f $(LPSEDS) llst_gcov2.f90 > llst_gcov3.f90
	$(SED) "s/^.$(NOT95)/     /" llst_gcov3.f90 > llst_gcov.f90
	$(FORTRAN) -g $(BASIC) $(NOOPTIMIZATION) $(MODULES) $(COVERAGE) \
          llst_gcov.f90
	$(SED) -f $(SEDS) llstt.f90 > llstt_gcov1.f90
	$(SED) -f $(LSEDS) llstt_gcov1.f90 > llstt_gcov.f90
	$(FORTRAN) -g $(BASIC) $(NOOPTIMIZATION) $(MODULES) $(COVERAGE) \
          llstt_gcov.f90
	$(FORTRAN) $(NOOPTIMIZATION) $(MODULES) $(COVERAGE) \
          -o ./llst_gcov llst_gcov.o llstt_gcov.o -L$(OBJ) $(LIBS)
	./llst_gcov
	gcov ./llst_gcov
	$(MV) ./llst_gcov.f90.gcov ./llst_coverage
	$(RM) ./llst*gcov* ./galahad_llst_*.mod

rllsss: $(RLLSSS)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_rlls $(RRLLSSS)
	- ./run_rlls >& rllss.output
	cat rllss.output
	rm ./run_rlls

rllsst: $(RLLSST)
	echo " Exhaustive test of subroutine interface to rlls"
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_rlls $(RRLLSST)
	- ./run_rlls >& rllst.output
	cat rllst.output
	rm ./run_rlls

rllsds: $(RLLSDS)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_rlls $(RRLLSDS)
	- ./run_rlls >& rllsds.output
	cat rllsds.output
	rm ./run_rlls

rllsds2: $(RLLSDS2)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_rlls $(RRLLSDS2)
	- ./run_rlls >& rllsds2.output
	cat rllsds2.output
	rm ./run_rlls

rllsdt: $(RLLSDT)
	echo " Exhaustive test of subroutine interface to rlls"
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_rlls $(RRLLSDT)
	- ./run_rlls >& rllsdt.output
	cat rllsdt.output
	rm ./run_rlls

gltrds2: $(GLTRDS2)
	cd ../gltr ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_gltr $(RGLTRDS2)
	- ../gltr/run_gltr
	rm ../gltr/run_gltr

gltrds3: $(GLTRDS3)
	cd ../gltr ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_gltr $(RGLTRDS3)
	- ../gltr/run_gltr
	rm ../gltr/run_gltr

gltrds: $(GLTRDS)
	cd ../gltr ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_gltr $(RGLTRDS)
	- ../gltr/run_gltr >& ../gltr/gltrds.output
	cat ../gltr/gltrds.output
	rm ../gltr/run_gltr

gltrdt: $(GLTRDT)
	echo " Exhaustive test of subroutine interface to gltr"
	cd ../gltr ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_gltr $(RGLTRDT)
	- ../gltr/run_gltr >& ../gltr/gltrdt.output
	cat ../gltr/gltrdt.output
	rm ../gltr/run_gltr

gltrss: $(GLTRSS)
	cd ../gltr ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_gltr $(RGLTRSS)
	- ../gltr/run_gltr >& ../gltr/gltrs.output
	cat ../gltr/gltrs.output
	rm ../gltr/run_gltr

gltrst: $(GLTRST)
	echo " Exhaustive test of subroutine interface to gltr"
	cd ../gltr ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_gltr $(RGLTRST)
	- ../gltr/run_gltr >& ../gltr/gltrt.output
	cat ../gltr/gltrt.output
	rm ../gltr/run_gltr

glrtss: $(GLRTSS)
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_glrt $(RGLRTSS)
	- ./run_glrt >& glrts.output
	cat glrts.output
	rm ./run_glrt

glrtst: $(GLRTST)
	echo " Exhaustive test of subroutine interface to glrt"
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_glrt $(RGLRTST)
	- ./run_glrt >& glrtt.output
	cat glrtt.output
	rm ./run_glrt

glrtds: $(GLRTDS)
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_glrt $(RGLRTDS)
	- ./run_glrt >& glrtds.output
	cat glrtds.output
	rm ./run_glrt

glrtdt: $(GLRTDT)
	echo " Exhaustive test of subroutine interface to glrt"
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_glrt $(RGLRTDT)
	- ./run_glrt >& glrtdt.output
	cat glrtdt.output
	rm ./run_glrt

gmtrds2: $(GMTRDS2)
	cd ../gmtr ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_gmtr $(RGMTRDS2)
	- ../gmtr/run_gmtr
	rm ../gmtr/run_gmtr

gmtrds3: $(GMTRDS3)
	cd ../gmtr ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_gmtr $(RGMTRDS3)
	- ../gmtr/run_gmtr
	rm ../gmtr/run_gmtr

gmtrds: $(GMTRDS)
	cd ../gmtr ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_gmtr $(RGMTRDS)
	- ../gmtr/run_gmtr >& ../gmtr/gmtrds.output
	cat ../gmtr/gmtrds.output
	rm ../gmtr/run_gmtr

gmtrdt: $(GMTRDT)
	echo " Exhaustive test of subroutine interface to gmtr"
	cd ../gmtr ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_gmtr $(RGMTRDT)
	- ../gmtr/run_gmtr >& ../gmtr/gmtrdt.output
	cat ../gmtr/gmtrdt.output
	rm ../gmtr/run_gmtr

gmtrss: $(GMTRSS)
	cd ../gmtr ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_gmtr $(RGMTRSS)
	- ../gmtr/run_gmtr >& ../gmtr/gmtrs.output
	cat ../gmtr/gmtrs.output
	rm ../gmtr/run_gmtr

gmtrst: $(GMTRST)
	echo " Exhaustive test of subroutine interface to gmtr"
	cd ../gmtr ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_gmtr $(RGMTRST)
	- ../gmtr/run_gmtr >& ../gmtr/gmtrt.output
	cat ../gmtr/gmtrt.output
	rm ../gmtr/run_gmtr

lstrds: $(LSTRDS)
	cd ../lstr ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_lstr $(RLSTRDS)
	- ../lstr/run_lstr >& ../lstr/lstrds.output
	cat ../lstr/lstrds.output
	rm ../lstr/run_lstr

lstrds2: $(LSTRDS2)
	cd ../lstr ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_lstr $(RLSTRDS2)
	- ../lstr/run_lstr
	rm ../lstr/run_lstr

lstrdse: $(LSTRDSE)
	cd ../lstr ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_lstr $(RLSTRDSE)
	- ../lstr/run_lstr
	rm ../lstr/run_lstr

lstrdt: $(LSTRDT)
	echo " Exhaustive test of subroutine interface to lstr"
	cd ../lstr ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_lstr $(RLSTRDT)
	- ../lstr/run_lstr >& ../lstr/lstrdt.output
	cat ../lstr/lstrdt.output
	rm ../lstr/run_lstr

lstrss: $(LSTRSS)
	cd ../lstr ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_lstr $(RLSTRSS)
	- ../lstr/run_lstr >& ../lstr/lstrs.output
	cat ../lstr/lstrs.output
	rm ../lstr/run_lstr

lstrst: $(LSTRST)
	echo " Exhaustive test of subroutine interface to lstr"
	cd ../lstr ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_lstr $(RLSTRST)
	- ../lstr/run_lstr >& ../lstr/lstrt.output
	cat ../lstr/lstrt.output
	rm ../lstr/run_lstr

lsrtds: $(LSRTDS)
	cd ../lsrt ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_lsrt $(RLSRTDS)
	- ../lsrt/run_lsrt >& ../lsrt/lsrtds.output
	cat ../lsrt/lsrtds.output
	rm ../lsrt/run_lsrt

lsrtds2: $(LSRTDS2)
	cd ../lsrt ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_lsrt $(RLSRTDS2)
	- ../lsrt/run_lsrt
	rm ../lsrt/run_lsrt

lsrtdse: $(LSRTDSE)
	cd ../lsrt ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_lsrt $(RLSRTDSE)
	- ../lsrt/run_lsrt
	rm ../lsrt/run_lsrt

lsrtdt: $(LSRTDT)
	echo " Exhaustive test of subroutine interface to lsrt"
	cd ../lsrt ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_lsrt $(RLSRTDT)
	- ../lsrt/run_lsrt >& ../lsrt/lsrtdt.output
	cat ../lsrt/lsrtdt.output
	rm ../lsrt/run_lsrt

lsrtss: $(LSRTSS)
	cd ../lsrt ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_lsrt $(RLSRTSS)
	- ../lsrt/run_lsrt >& ../lsrt/lsrts.output
	cat ../lsrt/lsrts.output
	rm ../lsrt/run_lsrt

lsrtst: $(LSRTST)
	echo " Exhaustive test of subroutine interface to lsrt"
	cd ../lsrt ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_lsrt $(RLSRTST)
	- ../lsrt/run_lsrt >& ../lsrt/lsrtt.output
	cat ../lsrt/lsrtt.output
	rm ../lsrt/run_lsrt

l2rtds: $(L2RTDS)
	cd ../l2rt ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_l2rt $(RL2RTDS)
	- ../l2rt/run_l2rt >& ../l2rt/l2rtds.output
	cat ../l2rt/l2rtds.output
	rm ../l2rt/run_l2rt

l2rtds2: $(L2RTDS2)
	cd ../l2rt ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_l2rt $(RL2RTDS2)
	- ../l2rt/run_l2rt
	rm ../l2rt/run_l2rt

l2rtdt: $(L2RTDT)
	echo " Exhaustive test of subroutine interface to l2rt"
	cd ../l2rt ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_l2rt $(RL2RTDT)
	- ../l2rt/run_l2rt >& ../l2rt/l2rtdt.output
	cat ../l2rt/l2rtdt.output
	rm ../l2rt/run_l2rt

l2rtss: $(L2RTSS)
	cd ../l2rt ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_l2rt $(RL2RTSS)
	- ../l2rt/run_l2rt >& ../l2rt/l2rts.output
	cat ../l2rt/l2rts.output
	rm ../l2rt/run_l2rt

l2rtst: $(L2RTST)
	echo " Exhaustive test of subroutine interface to l2rt"
	cd ../l2rt ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_l2rt $(RL2RTST)
	- ../l2rt/run_l2rt >& ../l2rt/l2rtt.output
	cat ../l2rt/l2rtt.output
	rm ../l2rt/run_l2rt

#  Substantial GALAHAD packages

ir.o: $(LG)(ir.o)

$(LG)(ir.o): ../ir/ir.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "ir   "
	$(SED) -f $(SEDS) ../ir/ir.f90 > $(OBJ)/ir1.f90
	$(SED) -f $(LSEDS) $(OBJ)/ir1.f90 > $(OBJ)/ir2.f90
	$(SED) -f $(LPSEDS) $(OBJ)/ir2.f90 > $(OBJ)/ir3.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/ir3.f90 > $(OBJ)/ir.f90
	cd $(OBJ); $(FORTRAN) -o ir.o $(FFLAGSS) ir.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o ir.o $(FFLAGSN) ir.f90 )
	cd $(OBJ); $(ARR) ir.o ; $(RM) ir.f90 ir1.f90 ir2.f90 ir3.f90 ir.o
	$(RMARFILE) trs.o
	$(RMARFILE) rqs.o
	$(RMARFILE) dps.o
	$(RMOBFILE) irs.o
	$(RMOBFILE) irt.o
	$(MVMODS)
	@printf '[ OK ]\n'

trs.o: $(LG)(trs.o)

$(LG)(trs.o): ../trs/trs.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "trs   "
	$(SED) -f $(SEDS) ../trs/trs.f90 > $(OBJ)/trs1.f90
	$(SED) -f $(LSEDS) $(OBJ)/trs1.f90 > $(OBJ)/trs2.f90
	$(SED) -f $(LPSEDS) $(OBJ)/trs2.f90 > $(OBJ)/trs3.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/trs3.f90 > $(OBJ)/trs.f90
	cd $(OBJ); $(FORTRAN) -o trs.o $(FFLAGSS) trs.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o trs.o $(FFLAGSN) trs.f90 )
	cd $(OBJ); $(ARR) trs.o ; $(RM) trs.f90 trs1.f90 trs2.f90 \
                                          trs3.f90 trs.o
	$(RMARFILE) dps.o
	$(RMARFILE) ism.o
	$(RMARFILE) usetrs.o
	$(RMOBFILE) trss.o
	$(RMOBFILE) trss2.o
	$(RMOBFILE) trst.o
	$(MVMODS)
	@printf '[ OK ]\n'

rqs.o: $(LG)(rqs.o)

$(LG)(rqs.o): ../rqs/rqs.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "rqs   "
	$(SED) -f $(SEDS) ../rqs/rqs.f90 > $(OBJ)/rqs1.f90
	$(SED) -f $(LSEDS) $(OBJ)/rqs1.f90 > $(OBJ)/rqs2.f90
	$(SED) -f $(LPSEDS) $(OBJ)/rqs2.f90 > $(OBJ)/rqs3.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/rqs3.f90 > $(OBJ)/rqs.f90
	cd $(OBJ); $(FORTRAN) -o rqs.o $(FFLAGSS) rqs.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o rqs.o $(FFLAGSN) rqs.f90 )
	cd $(OBJ); $(ARR) rqs.o ; $(RM) rqs.f90 rqs1.f90 rqs2.f90 \
                                          rqs3.f90 rqs.o
	$(RMARFILE) dps.o
	$(RMARFILE) nls.o
	$(RMARFILE) userqs.o
	$(RMOBFILE) rqss.o
	$(RMOBFILE) rqss2.o
	$(RMOBFILE) rqst.o
	$(MVMODS)
	@printf '[ OK ]\n'

dps.o: $(LG)(dps.o)

$(LG)(dps.o): ../dps/dps.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "dps   "
	$(SED) -f $(SEDS) ../dps/dps.f90 > $(OBJ)/dps1.f90
	$(SED) -f $(LSEDS) $(OBJ)/dps1.f90 > $(OBJ)/dps2.f90
	$(SED) -f $(LPSEDS) $(OBJ)/dps2.f90 > $(OBJ)/dps3.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/dps3.f90 > $(OBJ)/dps.f90
	cd $(OBJ); $(FORTRAN) -o dps.o $(FFLAGSS) dps.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o dps.o $(FFLAGSN) dps.f90 )
	cd $(OBJ); $(ARR) dps.o ; $(RM) dps.f90 dps1.f90 dps2.f90 \
                                          dps3.f90 dps.o
	$(RMARFILE) tru.o
	$(RMARFILE) arc.o
	$(RMARFILE) trace.o
	$(RMARFILE) nls.o
	$(RMARFILE) usedps.o
	$(RMOBFILE) dpss.o
	$(RMOBFILE) dpss2.o
	$(RMOBFILE) dpst.o
	$(MVMODS)
	@printf '[ OK ]\n'

llst.o: $(LG)(llst.o)

$(LG)(llst.o): ../llst/llst.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "llst   "
	$(SED) -f $(SEDS) ../llst/llst.f90 > $(OBJ)/llst1.f90
	$(SED) -f $(LSEDS) $(OBJ)/llst1.f90 > $(OBJ)/llst2.f90
	$(SED) -f $(LPSEDS) $(OBJ)/llst2.f90 > $(OBJ)/llst3.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/llst3.f90 > $(OBJ)/llst.f90
	cd $(OBJ); $(FORTRAN) -o llst.o $(FFLAGSS) llst.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o llst.o $(FFLAGSN) llst.f90 )
	cd $(OBJ); $(ARR) llst.o ; $(RM) llst.f90 llst1.f90 llst2.f90 \
                                          llst3.f90 llst.o
	$(RMARFILE) usellst.o
	$(RMOBFILE) llsts.o
	$(RMOBFILE) llsts2.o
	$(RMOBFILE) llstt.o
	$(MVMODS)
	@printf '[ OK ]\n'

rlls.o: $(LG)(rlls.o)

$(LG)(rlls.o): ../rlls/rlls.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "rlls   "
	$(SED) -f $(SEDS) ../rlls/rlls.f90 > $(OBJ)/rlls1.f90
	$(SED) -f $(LSEDS) $(OBJ)/rlls1.f90 > $(OBJ)/rlls2.f90
	$(SED) -f $(LPSEDS) $(OBJ)/rlls2.f90 > $(OBJ)/rlls3.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/rlls3.f90 > $(OBJ)/rlls.f90
	cd $(OBJ); $(FORTRAN) -o rlls.o $(FFLAGSS) rlls.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o rlls.o $(FFLAGSN) rlls.f90 )
	cd $(OBJ); $(ARR) rlls.o ; $(RM) rlls.f90 rlls1.f90 rlls2.f90 \
                                          rlls3.f90 rlls.o
	$(RMARFILE) userlls.o
	$(RMOBFILE) rllss.o
	$(RMOBFILE) rllst.o
	$(MVMODS)
	@printf '[ OK ]\n'

gltr.o: $(LG)(gltr.o)

$(LG)(gltr.o): ../gltr/gltr.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "gltr  "
	$(SED) -f $(SEDS) ../gltr/gltr.f90 > $(OBJ)/gltr.f90
	cd $(OBJ); $(FORTRAN) -o gltr.o $(FFLAGSS) gltr.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o gltr.o $(FFLAGSN) gltr.f90 )
	cd $(OBJ); $(ARR) gltr.o ; $(RM) gltr.f90 gltr.o
	$(RMARFILE) tru.o
	$(RMARFILE) qpb.o
	$(RMARFILE) filtrane.o
	$(RMARFILE) lls.o
	$(RMARFILE) eqp.o
	$(RMARFILE) superb.o
	$(RMOBFILE) gltrs.o
	$(RMOBFILE) gltrt.o
	$(MVMODS)
	@printf '[ OK ]\n'

glrt.o: $(LG)(glrt.o)

$(LG)(glrt.o): ../glrt/glrt.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "glrt   "
	$(SED) -f $(SEDS) ../glrt/glrt.f90 > $(OBJ)/glrt1.f90
	$(SED) -f $(LSEDS) $(OBJ)/glrt1.f90 > $(OBJ)/glrt2.f90
	$(SED) -f $(LPSEDS) $(OBJ)/glrt2.f90 > $(OBJ)/glrt3.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/glrt3.f90 > $(OBJ)/glrt.f90
	cd $(OBJ); $(FORTRAN) -o glrt.o $(FFLAGSS) glrt.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o glrt.o $(FFLAGSN) glrt.f90 )
	cd $(OBJ); $(ARR) glrt.o ; $(RM) glrt.f90 glrt1.f90 glrt2.f90 \
                                             glrt3.f90 glrt.o
	$(RMARFILE) arc.o
	$(RMARFILE) barc.o
	$(RMOBFILE) glrts.o
	$(RMOBFILE) glrtt.o
	$(MVMODS)
	@printf '[ OK ]\n'

gmtr.o: $(LG)(gmtr.o)

$(LG)(gmtr.o): ../gmtr/gmtr.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "gmtr  "
	$(SED) -f $(SEDS) ../gmtr/gmtr.f90 > $(OBJ)/gmtr.f90
	cd $(OBJ); $(FORTRAN) -o gmtr.o $(FFLAGSS) gmtr.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o gmtr.o $(FFLAGSN) gmtr.f90 )
	cd $(OBJ); $(ARR) gmtr.o ; $(RM) gmtr.f90 gmtr.o
#	$(RMARFILE) tru.o
#	$(RMARFILE) qpb.o
#	$(RMARFILE) filtrane.o
#	$(RMARFILE) lls.o
#	$(RMARFILE) eqp.o
#	$(RMARFILE) superb.o
	$(RMOBFILE) gmtrs.o
	$(RMOBFILE) gmtrt.o
	$(MVMODS)
	@printf '[ OK ]\n'

lstr.o: $(LG)(lstr.o)

$(LG)(lstr.o): ../lstr/lstr.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "lstr  "
	$(SED) -f $(SEDS) ../lstr/lstr.f90 > $(OBJ)/lstr.f90
	cd $(OBJ); $(FORTRAN) -o lstr.o $(FFLAGSS) lstr.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o lstr.o $(FFLAGSN) lstr.f90 )
	cd $(OBJ); $(ARR) lstr.o ; $(RM) lstr.f90 lstr.o
	$(RMARFILE) funnel.o
	$(RMARFILE) lsrt.o
	$(RMARFILE) l2rt.o
	$(RMOBFILE) lstrs.o
	$(RMOBFILE) lstrt.o
	$(RMARFILE) uselstr.o
	$(MVMODS)
	@printf '[ OK ]\n'

lsrt.o: $(LG)(lsrt.o)

$(LG)(lsrt.o): ../lsrt/lsrt.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "lsrt  "
	$(SED) -f $(SEDS) ../lsrt/lsrt.f90 > $(OBJ)/lsrt.f90
	cd $(OBJ); $(FORTRAN) -o lsrt.o $(FFLAGSS) lsrt.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o lsrt.o $(FFLAGSN) lsrt.f90 )
	cd $(OBJ); $(ARR) lsrt.o ; $(RM) lsrt.f90 lsrt.o
	$(RMARFILE) funnel.o
	$(RMOBFILE) lsrts.o
	$(RMOBFILE) lsrtt.o
	$(MVMODS)
	@printf '[ OK ]\n'

l2rt.o: $(LG)(l2rt.o)

$(LG)(l2rt.o): ../l2rt/l2rt.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "l2rt  "
	$(SED) -f $(SEDS) ../l2rt/l2rt.f90 > $(OBJ)/l2rt.f90
	cd $(OBJ); $(FORTRAN) -o l2rt.o $(FFLAGSS) l2rt.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o l2rt.o $(FFLAGSN) l2rt.f90 )
	cd $(OBJ); $(ARR) l2rt.o ; $(RM) l2rt.f90 l2rt.o
	$(RMARFILE) funnel.o
	$(RMOBFILE) l2rts.o
	$(RMOBFILE) l2rtt.o
	$(MVMODS)
	@printf '[ OK ]\n'

# CUTEst/AMPL interfaces

usetrs.o: $(LG)(usetrs.o)

$(LG)(usetrs.o): ../trs/usetrs.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "usetrs   "
	$(SED) -f $(SEDS) ../trs/usetrs.f90 > $(OBJ)/usetrs1.f90
	$(SED) -f $(LSEDS) $(OBJ)/usetrs1.f90 > $(OBJ)/usetrs2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/usetrs2.f90 > $(OBJ)/usetrs.f90
	cd $(OBJ); $(FORTRAN) -o usetrs.o $(FFLAGSOMP) usetrs.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o usetrs.o $(FFLAGSN) usetrs.f90 )
	cd $(OBJ); $(ARR) usetrs.o ; $(RM) usetrs.f90 usetrs1.f90 \
                                       usetrs2.f90 usetrs.o
	$(RMOBFILE) runtrs_sif.o
	$(MVMODS)
	@printf '[ OK ]\n'

userqs.o: $(LG)(userqs.o)

$(LG)(userqs.o): ../rqs/userqs.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "userqs   "
	$(SED) -f $(SEDS) ../rqs/userqs.f90 > $(OBJ)/userqs1.f90
	$(SED) -f $(LSEDS) $(OBJ)/userqs1.f90 > $(OBJ)/userqs2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/userqs2.f90 > $(OBJ)/userqs.f90
	cd $(OBJ); $(FORTRAN) -o userqs.o $(FFLAGSOMP) userqs.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o userqs.o $(FFLAGSN) userqs.f90 )
	cd $(OBJ); $(ARR) userqs.o ; $(RM) userqs.f90 userqs1.f90 \
                                       userqs2.f90 userqs.o
	$(RMOBFILE) runrqs_sif.o
	$(MVMODS)
	@printf '[ OK ]\n'

usedps.o: $(LG)(usedps.o)

$(LG)(usedps.o): ../dps/usedps.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "usedps   "
	$(SED) -f $(SEDS) ../dps/usedps.f90 > $(OBJ)/usedps1.f90
	$(SED) -f $(LSEDS) $(OBJ)/usedps1.f90 > $(OBJ)/usedps2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/usedps2.f90 > $(OBJ)/usedps.f90
	cd $(OBJ); $(FORTRAN) -o usedps.o $(FFLAGSOMP) usedps.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o usedps.o $(FFLAGSN) usedps.f90 )
	cd $(OBJ); $(ARR) usedps.o ; $(RM) usedps.f90 usedps1.f90 \
                                       usedps2.f90 usedps.o
	$(RMOBFILE) rundps_sif.o
	$(MVMODS)
	@printf '[ OK ]\n'

usellst.o: $(LG)(usellst.o)

$(LG)(usellst.o): ../llst/usellst.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "usellst   "
	$(SED) -f $(SEDS) ../llst/usellst.f90 > $(OBJ)/usellst1.f90
	$(SED) -f $(LSEDS) $(OBJ)/usellst1.f90 > $(OBJ)/usellst2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/usellst2.f90 > $(OBJ)/usellst.f90
	cd $(OBJ); $(FORTRAN) -o usellst.o $(FFLAGSS) usellst.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o usellst.o $(FFLAGSN) usellst.f90 )
	cd $(OBJ); $(ARR) usellst.o ; $(RM) usellst.f90 usellst1.f90 \
                                       usellst2.f90 usellst.o
	$(RMOBFILE) runllst_sif.o
	$(MVMODS)
	@printf '[ OK ]\n'

userlls.o: $(LG)(userlls.o)

$(LG)(userlls.o): ../rlls/userlls.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "userlls   "
	$(SED) -f $(SEDS) ../rlls/userlls.f90 > $(OBJ)/userlls1.f90
	$(SED) -f $(LSEDS) $(OBJ)/userlls1.f90 > $(OBJ)/userlls2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/userlls2.f90 > $(OBJ)/userlls.f90
	cd $(OBJ); $(FORTRAN) -o userlls.o $(FFLAGSS) userlls.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o userlls.o $(FFLAGSN) userlls.f90 )
	cd $(OBJ); $(ARR) userlls.o ; $(RM) userlls.f90 userlls1.f90 \
                                       userlls2.f90 userlls.o
	$(RMOBFILE) runrlls_sif.o
	$(MVMODS)
	@printf '[ OK ]\n'

uselstr.o: $(LG)(uselstr.o)

$(LG)(uselstr.o): ../lstr/uselstr.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "uselstr   "
	$(SED) -f $(SEDS) ../lstr/uselstr.f90 > $(OBJ)/uselstr1.f90
	$(SED) -f $(LSEDS) $(OBJ)/uselstr1.f90 > $(OBJ)/uselstr2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/uselstr2.f90 > $(OBJ)/uselstr.f90
	cd $(OBJ); $(FORTRAN) -o uselstr.o $(FFLAGSS) uselstr.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o uselstr.o $(FFLAGSN) uselstr.f90 )
	cd $(OBJ); $(ARR) uselstr.o ; $(RM) uselstr.f90 uselstr1.f90 \
                                       uselstr2.f90 uselstr.o
	$(RMOBFILE) runlstr_sif.o
	$(MVMODS)
	@printf '[ OK ]\n'

uselsrt.o: $(LG)(uselsrt.o)

$(LG)(uselsrt.o): ../lsrt/uselsrt.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "uselsrt   "
	$(SED) -f $(SEDS) ../lsrt/uselsrt.f90 > $(OBJ)/uselsrt1.f90
	$(SED) -f $(LSEDS) $(OBJ)/uselsrt1.f90 > $(OBJ)/uselsrt2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/uselsrt2.f90 > $(OBJ)/uselsrt.f90
	cd $(OBJ); $(FORTRAN) -o uselsrt.o $(FFLAGSS) uselsrt.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o uselsrt.o $(FFLAGSN) uselsrt.f90 )
	cd $(OBJ); $(ARR) uselsrt.o ; $(RM) uselsrt.f90 uselsrt1.f90 \
                                       uselsrt2.f90 uselsrt.o
	$(RMOBFILE) runlsrt_sif.o
	$(MVMODS)
	@printf '[ OK ]\n'

usel2rt.o: $(LG)(usel2rt.o)

$(LG)(usel2rt.o): ../l2rt/usel2rt.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "usel2rt   "
	$(SED) -f $(SEDS) ../l2rt/usel2rt.f90 > $(OBJ)/usel2rt1.f90
	$(SED) -f $(LSEDS) $(OBJ)/usel2rt1.f90 > $(OBJ)/usel2rt2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/usel2rt2.f90 > $(OBJ)/usel2rt.f90
	cd $(OBJ); $(FORTRAN) -o usel2rt.o $(FFLAGSS) usel2rt.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o usel2rt.o $(FFLAGSN) usel2rt.f90 )
	cd $(OBJ); $(ARR) usel2rt.o ; $(RM) usel2rt.f90 usel2rt1.f90 \
                                       usel2rt2.f90 usel2rt.o
	$(RMOBFILE) runl2rt_sif.o
	$(MVMODS)
	@printf '[ OK ]\n'

usegltr.o: $(LG)(usegltr.o)

$(LG)(usegltr.o): ../gltr/usegltr.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "usegltr   "
	$(SED) -f $(SEDS) ../gltr/usegltr.f90 > $(OBJ)/usegltr1.f90
	$(SED) -f $(LSEDS) $(OBJ)/usegltr1.f90 > $(OBJ)/usegltr2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/usegltr2.f90 > $(OBJ)/usegltr.f90
	cd $(OBJ); $(FORTRAN) -o usegltr.o $(FFLAGSS) usegltr.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o usegltr.o $(FFLAGSN) usegltr.f90 )
	cd $(OBJ); $(ARR) usegltr.o ; $(RM) usegltr.f90 usegltr1.f90 \
                                       usegltr2.f90 usegltr.o
	$(RMOBFILE) rungltr_sif.o
	$(MVMODS)
	@printf '[ OK ]\n'

useglrt.o: $(LG)(useglrt.o)

$(LG)(useglrt.o): ../glrt/useglrt.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "useglrt   "
	$(SED) -f $(SEDS) ../glrt/useglrt.f90 > $(OBJ)/useglrt1.f90
	$(SED) -f $(LSEDS) $(OBJ)/useglrt1.f90 > $(OBJ)/useglrt2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/useglrt2.f90 > $(OBJ)/useglrt.f90
	cd $(OBJ); $(FORTRAN) -o useglrt.o $(FFLAGSS) useglrt.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o useglrt.o $(FFLAGSN) useglrt.f90 )
	cd $(OBJ); $(ARR) useglrt.o ; $(RM) useglrt.f90 useglrt1.f90 \
                                       useglrt2.f90 useglrt.o
	$(RMOBFILE) runglrt_sif.o
	$(MVMODS)
	@printf '[ OK ]\n'

#  main programs

runtrs_sif.o: $(OBJ)/runtrs_sif.o

$(OBJ)/runtrs_sif.o: ../trs/runtrs_sif.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "runtrs_sif"
	$(SED) -f $(SEDS) ../trs/runtrs_sif.f90 > $(OBJ)/runtrs_sif.f90
	cd $(OBJ); $(FORTRAN) -o runtrs_sif.o $(FFLAGSS) runtrs_sif.f90
	rm $(OBJ)/runtrs_sif.f90
	@printf '[ OK ]\n'

runrqs_sif.o: $(OBJ)/runrqs_sif.o

$(OBJ)/runrqs_sif.o: ../rqs/runrqs_sif.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "runrqs_sif"
	$(SED) -f $(SEDS) ../rqs/runrqs_sif.f90 > $(OBJ)/runrqs_sif.f90
	cd $(OBJ); $(FORTRAN) -o runrqs_sif.o $(FFLAGSS) runrqs_sif.f90
	rm $(OBJ)/runrqs_sif.f90
	@printf '[ OK ]\n'

rundps_sif.o: $(OBJ)/rundps_sif.o

$(OBJ)/rundps_sif.o: ../dps/rundps_sif.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "rundps_sif"
	$(SED) -f $(SEDS) ../dps/rundps_sif.f90 > $(OBJ)/rundps_sif.f90
	cd $(OBJ); $(FORTRAN) -o rundps_sif.o $(FFLAGSS) rundps_sif.f90
	rm $(OBJ)/rundps_sif.f90
	@printf '[ OK ]\n'

runllst_sif.o: $(OBJ)/runllst_sif.o

$(OBJ)/runllst_sif.o: ../llst/runllst_sif.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "runllst_sif"
	$(SED) -f $(SEDS) ../llst/runllst_sif.f90 > $(OBJ)/runllst_sif.f90
	cd $(OBJ); $(FORTRAN) -o runllst_sif.o $(FFLAGSS) runllst_sif.f90
	rm $(OBJ)/runllst_sif.f90
	@printf '[ OK ]\n'

runrlls_sif.o: $(OBJ)/runrlls_sif.o

$(OBJ)/runrlls_sif.o: ../rlls/runrlls_sif.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "runrlls_sif"
	$(SED) -f $(SEDS) ../rlls/runrlls_sif.f90 > $(OBJ)/runrlls_sif.f90
	cd $(OBJ); $(FORTRAN) -o runrlls_sif.o $(FFLAGSS) runrlls_sif.f90
	rm $(OBJ)/runrlls_sif.f90
	@printf '[ OK ]\n'

runlstr_sif.o: $(OBJ)/runlstr_sif.o

$(OBJ)/runlstr_sif.o: ../lstr/runlstr_sif.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "runlstr_sif"
	$(SED) -f $(SEDS) ../lstr/runlstr_sif.f90 > $(OBJ)/runlstr_sif.f90
	cd $(OBJ); $(FORTRAN) -o runlstr_sif.o $(FFLAGSS) runlstr_sif.f90
	rm $(OBJ)/runlstr_sif.f90
	@printf '[ OK ]\n'

runl2rt_sif.o: $(OBJ)/runl2rt_sif.o

$(OBJ)/runl2rt_sif.o: ../l2rt/runl2rt_sif.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "runl2rt_sif"
	$(SED) -f $(SEDS) ../l2rt/runl2rt_sif.f90 > $(OBJ)/runl2rt_sif.f90
	cd $(OBJ); $(FORTRAN) -o runl2rt_sif.o $(FFLAGSS) runl2rt_sif.f90
	rm $(OBJ)/runl2rt_sif.f90
	@printf '[ OK ]\n'

runlsrt_sif.o: $(OBJ)/runlsrt_sif.o

$(OBJ)/runlsrt_sif.o: ../lsrt/runlsrt_sif.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "runlsrt_sif"
	$(SED) -f $(SEDS) ../lsrt/runlsrt_sif.f90 > $(OBJ)/runlsrt_sif.f90
	cd $(OBJ); $(FORTRAN) -o runlsrt_sif.o $(FFLAGSS) runlsrt_sif.f90
	rm $(OBJ)/runlsrt_sif.f90
	@printf '[ OK ]\n'

rungltr_sif.o: $(OBJ)/rungltr_sif.o

$(OBJ)/rungltr_sif.o: ../gltr/rungltr_sif.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "rungltr_sif"
	$(SED) -f $(SEDS) ../gltr/rungltr_sif.f90 > $(OBJ)/rungltr_sif.f90
	cd $(OBJ); $(FORTRAN) -o rungltr_sif.o $(FFLAGSS) rungltr_sif.f90
	rm $(OBJ)/rungltr_sif.f90
	@printf '[ OK ]\n'

runglrt_sif.o: $(OBJ)/runglrt_sif.o

$(OBJ)/runglrt_sif.o: ../glrt/runglrt_sif.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "runglrt_sif"
	$(SED) -f $(SEDS) ../glrt/runglrt_sif.f90 > $(OBJ)/runglrt_sif.f90
	cd $(OBJ); $(FORTRAN) -o runglrt_sif.o $(FFLAGSS) runglrt_sif.f90
	rm $(OBJ)/runglrt_sif.f90
	@printf '[ OK ]\n'

#  test decks

irs.o: $(OBJ)/irs.o

$(OBJ)/irs.o: ../ir/irs.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "irs  "
	$(SED) -f $(SEDS) ../ir/irs.f90 > $(OBJ)/irs1.f90
	$(SED) -f $(LSEDS) $(OBJ)/irs1.f90 > $(OBJ)/irs.f90
	cd $(OBJ) ; $(FORTRAN) -o irs.o $(FFLAGS) irs.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

irt.o: $(OBJ)/irt.o

$(OBJ)/irt.o: ../ir/irt.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "irt  "
	$(SED) -f $(SEDS) ../ir/irt.f90 > $(OBJ)/irt1.f90
	$(SED) -f $(LSEDS) $(OBJ)/irt1.f90 > $(OBJ)/irt.f90
	cd $(OBJ) ; $(FORTRAN) -o irt.o $(FFLAGSS) irt.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

trss.o: $(OBJ)/trss.o

$(OBJ)/trss.o: ../trs/trss.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "trss  "
	$(SED) -f $(SEDS) ../trs/trss.f90 > $(OBJ)/trss1.f90
	$(SED) -f $(LSEDS) $(OBJ)/trss1.f90 > $(OBJ)/trss.f90
	cd $(OBJ) ; $(FORTRAN) -o trss.o $(FFLAGS) trss.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

trss2.o: $(OBJ)/trss2.o

$(OBJ)/trss2.o: ../trs/trss2.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "trss2  "
	$(SED) -f $(SEDS) ../trs/trss2.f90 > $(OBJ)/trss21.f90
	$(SED) -f $(LSEDS) $(OBJ)/trss21.f90 > $(OBJ)/trss2.f90
	cd $(OBJ) ; $(FORTRAN) -o trss2.o $(FFLAGS) trss2.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

trss3.o: $(OBJ)/trss3.o

$(OBJ)/trss3.o: ../trs/trss3.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "trss3  "
	$(SED) -f $(SEDS) ../trs/trss3.f90 > $(OBJ)/trss31.f90
	$(SED) -f $(LSEDS) $(OBJ)/trss31.f90 > $(OBJ)/trss3.f90
	cd $(OBJ) ; $(FORTRAN) -o trss3.o $(FFLAGS) trss3.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

trss4.o: $(OBJ)/trss4.o

$(OBJ)/trss4.o: ../trs/trss4.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "trss4  "
	$(SED) -f $(SEDS) ../trs/trss4.f90 > $(OBJ)/trss41.f90
	$(SED) -f $(LSEDS) $(OBJ)/trss41.f90 > $(OBJ)/trss4.f90
	cd $(OBJ) ; $(FORTRAN) -o trss4.o $(FFLAGS) trss4.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

trst.o: $(OBJ)/trst.o

$(OBJ)/trst.o: ../trs/trst.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "trst  "
	$(SED) -f $(SEDS) ../trs/trst.f90 > $(OBJ)/trst1.f90
	$(SED) -f $(LSEDS) $(OBJ)/trst1.f90 > $(OBJ)/trst.f90
	cd $(OBJ) ; $(FORTRAN) -o trst.o $(FFLAGSS) trst.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

rqss.o: $(OBJ)/rqss.o

$(OBJ)/rqss.o: ../rqs/rqss.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "rqss  "
	$(SED) -f $(SEDS) ../rqs/rqss.f90 > $(OBJ)/rqss1.f90
	$(SED) -f $(LSEDS) $(OBJ)/rqss1.f90 > $(OBJ)/rqss.f90
	cd $(OBJ) ; $(FORTRAN) -o rqss.o $(FFLAGS) rqss.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

rqss2.o: $(OBJ)/rqss2.o

$(OBJ)/rqss2.o: ../rqs/rqss2.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "rqss2  "
	$(SED) -f $(SEDS) ../rqs/rqss2.f90 > $(OBJ)/rqss1.f90
	$(SED) -f $(LSEDS) $(OBJ)/rqss1.f90 > $(OBJ)/rqss2.f90
	cd $(OBJ) ; $(FORTRAN) -o rqss2.o $(FFLAGS) rqss2.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

rqst.o: $(OBJ)/rqst.o

$(OBJ)/rqst.o: ../rqs/rqst.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "rqst  "
	$(SED) -f $(SEDS) ../rqs/rqst.f90 > $(OBJ)/rqst1.f90
	$(SED) -f $(LSEDS) $(OBJ)/rqst1.f90 > $(OBJ)/rqst.f90
	cd $(OBJ) ; $(FORTRAN) -o rqst.o $(FFLAGSS) rqst.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

dpss.o: $(OBJ)/dpss.o

$(OBJ)/dpss.o: ../dps/dpss.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "dpss  "
	$(SED) -f $(SEDS) ../dps/dpss.f90 > $(OBJ)/dpss1.f90
	$(SED) -f $(LSEDS) $(OBJ)/dpss1.f90 > $(OBJ)/dpss.f90
	cd $(OBJ) ; $(FORTRAN) -o dpss.o $(FFLAGS) dpss.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

dpss2.o: $(OBJ)/dpss2.o

$(OBJ)/dpss2.o: ../dps/dpss2.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "dpss2  "
	$(SED) -f $(SEDS) ../dps/dpss2.f90 > $(OBJ)/dpss1.f90
	$(SED) -f $(LSEDS) $(OBJ)/dpss1.f90 > $(OBJ)/dpss2.f90
	cd $(OBJ) ; $(FORTRAN) -o dpss2.o $(FFLAGS) dpss2.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

dpst.o: $(OBJ)/dpst.o

$(OBJ)/dpst.o: ../dps/dpst.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "dpst  "
	$(SED) -f $(SEDS) ../dps/dpst.f90 > $(OBJ)/dpst1.f90
	$(SED) -f $(LSEDS) $(OBJ)/dpst1.f90 > $(OBJ)/dpst.f90
	cd $(OBJ) ; $(FORTRAN) -o dpst.o $(FFLAGSS) dpst.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

llsts.o: $(OBJ)/llsts.o

$(OBJ)/llsts.o: ../llst/llsts.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "llsts  "
	$(SED) -f $(SEDS) ../llst/llsts.f90 > $(OBJ)/llsts1.f90
	$(SED) -f $(LSEDS) $(OBJ)/llsts1.f90 > $(OBJ)/llsts.f90
	cd $(OBJ) ; $(FORTRAN) -o llsts.o $(FFLAGS) llsts.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

llsts2.o: $(OBJ)/llsts2.o

$(OBJ)/llsts2.o: ../llst/llsts2.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "llsts2  "
	$(SED) -f $(SEDS) ../llst/llsts2.f90 > $(OBJ)/llsts21.f90
	$(SED) -f $(LSEDS) $(OBJ)/llsts21.f90 > $(OBJ)/llsts2.f90
	cd $(OBJ) ; $(FORTRAN) -o llsts2.o $(FFLAGS) llsts2.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

llsts3.o: $(OBJ)/llsts3.o

$(OBJ)/llsts3.o: ../llst/llsts3.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "llsts3  "
	$(SED) -f $(SEDS) ../llst/llsts3.f90 > $(OBJ)/llsts31.f90
	$(SED) -f $(LSEDS) $(OBJ)/llsts31.f90 > $(OBJ)/llsts3.f90
	cd $(OBJ) ; $(FORTRAN) -o llsts3.o $(FFLAGS) llsts3.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

llsts4.o: $(OBJ)/llsts4.o

$(OBJ)/llsts4.o: ../llst/llsts4.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "llsts4  "
	$(SED) -f $(SEDS) ../llst/llsts4.f90 > $(OBJ)/llsts41.f90
	$(SED) -f $(LSEDS) $(OBJ)/llsts41.f90 > $(OBJ)/llsts4.f90
	cd $(OBJ) ; $(FORTRAN) -o llsts4.o $(FFLAGS) llsts4.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

llstt.o: $(OBJ)/llstt.o

$(OBJ)/llstt.o: ../llst/llstt.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "llstt  "
	$(SED) -f $(SEDS) ../llst/llstt.f90 > $(OBJ)/llstt1.f90
	$(SED) -f $(LSEDS) $(OBJ)/llstt1.f90 > $(OBJ)/llstt.f90
	cd $(OBJ) ; $(FORTRAN) -o llstt.o $(FFLAGSS) llstt.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

rllss.o: $(OBJ)/rllss.o

$(OBJ)/rllss.o: ../rlls/rllss.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "rllss  "
	$(SED) -f $(SEDS) ../rlls/rllss.f90 > $(OBJ)/rllss1.f90
	$(SED) -f $(LSEDS) $(OBJ)/rllss1.f90 > $(OBJ)/rllss.f90
	cd $(OBJ) ; $(FORTRAN) -o rllss.o $(FFLAGS) rllss.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

rllss2.o: $(OBJ)/rllss2.o

$(OBJ)/rllss2.o: ../rlls/rllss2.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "rllss2  "
	$(SED) -f $(SEDS) ../rlls/rllss2.f90 > $(OBJ)/rllss1.f90
	$(SED) -f $(LSEDS) $(OBJ)/rllss1.f90 > $(OBJ)/rllss2.f90
	cd $(OBJ) ; $(FORTRAN) -o rllss2.o $(FFLAGS) rllss2.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

rllst.o: $(OBJ)/rllst.o

$(OBJ)/rllst.o: ../rlls/rllst.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "rllst  "
	$(SED) -f $(SEDS) ../rlls/rllst.f90 > $(OBJ)/rllst1.f90
	$(SED) -f $(LSEDS) $(OBJ)/rllst1.f90 > $(OBJ)/rllst.f90
	cd $(OBJ) ; $(FORTRAN) -o rllst.o $(FFLAGSS) rllst.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

gltrs2.o: $(OBJ)/gltrs2.o

$(OBJ)/gltrs2.o: ../gltr/gltrs2.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "gltrs2  "
	$(SED) -f $(SEDS) ../gltr/gltrs2.f90 > $(OBJ)/gltrs2.f90
	cd $(OBJ) ; $(FORTRAN) -o gltrs2.o $(FFLAGS) gltrs2.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

gltrs3.o: $(OBJ)/gltrs3.o

$(OBJ)/gltrs3.o: ../gltr/gltrs3.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "gltrs3  "
	$(SED) -f $(SEDS) ../gltr/gltrs3.f90 > $(OBJ)/gltrs3.f90
	cd $(OBJ) ; $(FORTRAN) -o gltrs3.o $(FFLAGS) gltrs3.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

gltrs.o: $(OBJ)/gltrs.o

$(OBJ)/gltrs.o: ../gltr/gltrs.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "gltrs  "
	$(SED) -f $(SEDS) ../gltr/gltrs.f90 > $(OBJ)/gltrs.f90
	cd $(OBJ) ; $(FORTRAN) -o gltrs.o $(FFLAGS) gltrs.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

gltrt.o: $(OBJ)/gltrt.o

$(OBJ)/gltrt.o: ../gltr/gltrt.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "gltrt  "
	$(SED) -f $(SEDS) ../gltr/gltrt.f90 > $(OBJ)/gltrt.f90
	cd $(OBJ) ; $(FORTRAN) -o gltrt.o $(FFLAGSS) gltrt.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

glrts.o: $(OBJ)/glrts.o

$(OBJ)/glrts.o: ../glrt/glrts.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "glrts  "
	$(SED) -f $(SEDS) ../glrt/glrts.f90 > $(OBJ)/glrts1.f90
	$(SED) -f $(LSEDS) $(OBJ)/glrts1.f90 > $(OBJ)/glrts.f90
	cd $(OBJ) ; $(FORTRAN) -o glrts.o $(FFLAGS) glrts.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

glrtt.o: $(OBJ)/glrtt.o

$(OBJ)/glrtt.o: ../glrt/glrtt.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "glrtt  "
	$(SED) -f $(SEDS) ../glrt/glrtt.f90 > $(OBJ)/glrtt1.f90
	$(SED) -f $(LSEDS) $(OBJ)/glrtt1.f90 > $(OBJ)/glrtt.f90
	cd $(OBJ) ; $(FORTRAN) -o glrtt.o $(FFLAGSS) glrtt.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

gmtrs2.o: $(OBJ)/gmtrs2.o

$(OBJ)/gmtrs2.o: ../gmtr/gmtrs2.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "gmtrs2  "
	$(SED) -f $(SEDS) ../gmtr/gmtrs2.f90 > $(OBJ)/gmtrs2.f90
	cd $(OBJ) ; $(FORTRAN) -o gmtrs2.o $(FFLAGS) gmtrs2.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

gmtrs3.o: $(OBJ)/gmtrs3.o

$(OBJ)/gmtrs3.o: ../gmtr/gmtrs3.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "gmtrs3  "
	$(SED) -f $(SEDS) ../gmtr/gmtrs3.f90 > $(OBJ)/gmtrs3.f90
	cd $(OBJ) ; $(FORTRAN) -o gmtrs3.o $(FFLAGS) gmtrs3.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

gmtrs.o: $(OBJ)/gmtrs.o

$(OBJ)/gmtrs.o: ../gmtr/gmtrs.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "gmtrs  "
	$(SED) -f $(SEDS) ../gmtr/gmtrs.f90 > $(OBJ)/gmtrs.f90
	cd $(OBJ) ; $(FORTRAN) -o gmtrs.o $(FFLAGS) gmtrs.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

gmtrt.o: $(OBJ)/gmtrt.o

$(OBJ)/gmtrt.o: ../gmtr/gmtrt.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "gmtrt  "
	$(SED) -f $(SEDS) ../gmtr/gmtrt.f90 > $(OBJ)/gmtrt.f90
	cd $(OBJ) ; $(FORTRAN) -o gmtrt.o $(FFLAGSS) gmtrt.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

lstrs.o: $(OBJ)/lstrs.o

$(OBJ)/lstrs.o: ../lstr/lstrs.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "lstrs  "
	$(SED) -f $(SEDS) ../lstr/lstrs.f90 > $(OBJ)/lstrs.f90
	cd $(OBJ) ; $(FORTRAN) -o lstrs.o $(FFLAGS) lstrs.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

lstrs2.o: $(OBJ)/lstrs2.o

$(OBJ)/lstrs2.o: ../lstr/lstrs2.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "lstrs2  "
	$(SED) -f $(SEDS) ../lstr/lstrs2.f90 > $(OBJ)/lstrs2.f90
	cd $(OBJ) ; $(FORTRAN) -o lstrs2.o $(FFLAGS) lstrs2.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

lstrse.o: $(OBJ)/lstrse.o

$(OBJ)/lstrse.o: ../lstr/lstrse.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "lstrse  "
	$(SED) -f $(SEDS) ../lstr/lstrse.f90 > $(OBJ)/lstrse.f90
	cd $(OBJ) ; $(FORTRAN) -o lstrse.o $(FFLAGS) lstrse.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

lstrt.o: $(OBJ)/lstrt.o

$(OBJ)/lstrt.o: ../lstr/lstrt.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "lstrt  "
	$(SED) -f $(SEDS) ../lstr/lstrt.f90 > $(OBJ)/lstrt.f90
	cd $(OBJ) ; $(FORTRAN) -o lstrt.o $(FFLAGSS) lstrt.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

lsrts.o: $(OBJ)/lsrts.o

$(OBJ)/lsrts.o: ../lsrt/lsrts.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "lsrts  "
	$(SED) -f $(SEDS) ../lsrt/lsrts.f90 > $(OBJ)/lsrts.f90
	cd $(OBJ) ; $(FORTRAN) -o lsrts.o $(FFLAGS) lsrts.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

lsrts2.o: $(OBJ)/lsrts2.o

$(OBJ)/lsrts2.o: ../lsrt/lsrts2.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "lsrts2  "
	$(SED) -f $(SEDS) ../lsrt/lsrts2.f90 > $(OBJ)/lsrts2.f90
	cd $(OBJ) ; $(FORTRAN) -o lsrts2.o $(FFLAGS) lsrts2.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

lsrtse.o: $(OBJ)/lsrtse.o

$(OBJ)/lsrtse.o: ../lsrt/lsrtse.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "lsrtse  "
	$(SED) -f $(SEDS) ../lsrt/lsrtse.f90 > $(OBJ)/lsrtse.f90
	cd $(OBJ) ; $(FORTRAN) -o lsrtse.o $(FFLAGS) lsrtse.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

lsrtt.o: $(OBJ)/lsrtt.o

$(OBJ)/lsrtt.o: ../lsrt/lsrtt.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "lsrtt  "
	$(SED) -f $(SEDS) ../lsrt/lsrtt.f90 > $(OBJ)/lsrtt.f90
	cd $(OBJ) ; $(FORTRAN) -o lsrtt.o $(FFLAGSS) lsrtt.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

l2rts.o: $(OBJ)/l2rts.o

$(OBJ)/l2rts.o: ../l2rt/l2rts.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "l2rts  "
	$(SED) -f $(SEDS) ../l2rt/l2rts.f90 > $(OBJ)/l2rts.f90
	cd $(OBJ) ; $(FORTRAN) -o l2rts.o $(FFLAGS) l2rts.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

l2rts2.o: $(OBJ)/l2rts2.o

$(OBJ)/l2rts2.o: ../l2rt/l2rts2.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "l2rts2  "
	$(SED) -f $(SEDS) ../l2rt/l2rts2.f90 > $(OBJ)/l2rts2.f90
	cd $(OBJ) ; $(FORTRAN) -o l2rts2.o $(FFLAGS) l2rts2.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

l2rtt.o: $(OBJ)/l2rtt.o

$(OBJ)/l2rtt.o: ../l2rt/l2rtt.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "l2rtt  "
	$(SED) -f $(SEDS) ../l2rt/l2rtt.f90 > $(OBJ)/l2rtt.f90
	cd $(OBJ) ; $(FORTRAN) -o l2rtt.o $(FFLAGSS) l2rtt.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

#  generate HSL codes from GALAHAD ones

hslgen:
	$(SED) -f ../hsl/gal2hsl ../qltr/qltr.f90 > ../hsl/hsl_vf05/vf05d.f90
	$(SED) -f ../hsl/gal2hsl ../specs/src/qltr.tex \
                > ../hsl/hsl_vf05/hsl_vf05.tex

#  book keeping

rmir:
	@printf ' %-9s %-15s\t\t' "Removing" "ir from archive "
	$(RMARFILE) ir.o
	@printf '[ OK ]\n'

rmtrs:
	@printf ' %-9s %-15s\t\t' "Removing" "trs from archive "
	$(RMARFILE) trs.o
	@printf '[ OK ]\n'

rmrqs:
	@printf ' %-9s %-15s\t\t' "Removing" "rqs from archive "
	$(RMARFILE) rqs.o
	@printf '[ OK ]\n'

rmdps:
	@printf ' %-9s %-15s\t\t' "Removing" "dps from archive "
	$(RMARFILE) dps.o
	@printf '[ OK ]\n'

rmllst:
	@printf ' %-9s %-15s\t\t' "Removing" "llst from archive "
	$(RMARFILE) llst.o
	@printf '[ OK ]\n'

rmrlls:
	@printf ' %-9s %-15s\t\t' "Removing" "rlls from archive "
	$(RMARFILE) rlls.o
	@printf '[ OK ]\n'

rmgltr:
	@printf ' %-9s %-15s\t\t' "Removing" "gltr from archive "
	$(RMARFILE) gltr.o
	@printf '[ OK ]\n'

rmglrt:
	@printf ' %-9s %-15s\t\t' "Removing" "glrt from archive "
	$(RMARFILE) glrt.o
	@printf '[ OK ]\n'

rmgmtr:
	@printf ' %-9s %-15s\t\t' "Removing" "gmtr from archive "
	$(RMARFILE) gmtr.o
	@printf '[ OK ]\n'

rmlstr:
	@printf ' %-9s %-15s\t\t' "Removing" "lstr from archive "
	$(RMARFILE) lstr.o
	@printf '[ OK ]\n'

rmlsrt:
	@printf ' %-9s %-15s\t\t' "Removing" "lsrt from archive "
	$(RMARFILE) lsrt.o
	@printf '[ OK ]\n'

rml2rt:
	@printf ' %-9s %-15s\t\t' "Removing" "l2rt from archive "
	$(RMARFILE) l2rt.o
	@printf '[ OK ]\n'

clean:
	@printf ' %-9s\t\t' "Cleaning"
	$(RM) $(LGS) $(LGD) $(OBJ)/qpbdt.o $(OBJ)/qpbs.o $(OBJ)/qpbt.o \
           $(OBJ)/qpbst.o
	@printf '[ OK ]\n'

cleanall:
	@printf ' %-14s\t\t' "Removing all $(PRECIS) precision object and module files"
	$(RM) $(OBJ)/* $(MOD)/*
	@printf '[ OK ]\n'
