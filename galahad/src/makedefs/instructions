#  standard GALAHAD compilation and run instructions

#  Nick Gould, for GALAHAD production
#  This version: 2021-06-28

#  compilation agenda for package

S$(PACKAGE) = $(DEPENDENCIES) $(LGS)($(package).o)
D$(PACKAGE) = $(DEPENDENCIES) $(LGD)($(package).o)

#  compilation agenda for package with C interface

S$(PACKAGE)C = $(S$(PACKAGE)) $(CDEPENDENCIES) make_common_ciface \
               $(CLGS)($(package)_ciface.o)
D$(PACKAGE)C = $(D$(PACKAGE)) $(CDEPENDENCIES) make_common_ciface \
               $(CLGD)($(package)_ciface.o)

#  additional run agenda

SRUN$(PACKAGE) = $(CUTEST_TESTS) $(TESTDEPS) $(LGS)(use$(package).o) \
                 $(OBJS)/run$(package)_sif.o
DRUN$(PACKAGE) = $(CUTEST_TESTS) $(TESTDEPS) $(LGD)(use$(package).o) \
                 $(OBJD)/run$(package)_sif.o
SQPLIB$(PACKAGE) = $(QPLIB_TESTS) $(TESTDEPS) $(OBJS)/in$(package).o
DQPLIB$(PACKAGE) = $(QPLIB_TESTS) $(TESTDEPS) $(OBJD)/in$(package).o

#  libraries used when linking for tests

LIBS = -lgalahad $(HSL) $(SPRAL) $(MKL_PARDISO) $(PARDISO) $(WSMP) $(METIS) \
                 $(LAPACK) $(BLAS)
PLIBS = $(LIBS) -lgalahad_problem
CLIBS = -lgalahad_c $(LIBS) 

#  compilation and run agenda

$(PACKAGE)OBJECTSS = $(S$(PACKAGE))
$(PACKAGE)OBJECTSD = $(D$(PACKAGE))
$(PACKAGE)OBJECTSCS = $(S$(PACKAGE)C)
$(PACKAGE)OBJECTSCD = $(D$(PACKAGE)C)
$(PACKAGE)OBJECTSS_CUTEST = $(S$(PACKAGE)) $(SRUN$(PACKAGE))
$(PACKAGE)OBJECTSD_CUTEST = $(D$(PACKAGE)) $(DRUN$(PACKAGE))
$(PACKAGE)OBJECTSS_QPLIB = $(S$(PACKAGE)) $(SQPLIB$(PACKAGE))
$(PACKAGE)OBJECTSD_QPLIB = $(D$(PACKAGE)) $(DQPLIB$(PACKAGE))

OBJECTSS_CUTEST = $($(PACKAGE)OBJECTSS_CUTEST)
OBJECTSD_CUTEST = $($(PACKAGE)OBJECTSD_CUTEST)

#  test agenda

$(PACKAGE)DS = $(D$(PACKAGE)) $(OBJD)/$(package)s.o
$(PACKAGE)DS2 = $(D$(PACKAGE)) $(OBJD)/$(package)s2.o
$(PACKAGE)DS3 = $(D$(PACKAGE)) $(OBJD)/$(package)s3.o
$(PACKAGE)DS4 = $(D$(PACKAGE)) $(OBJD)/$(package)s4.o
$(PACKAGE)DT = $(D$(PACKAGE)) $(TESTDEPS) $(OBJD)/$(package)t.o
$(PACKAGE)DTI = $(D$(PACKAGE)) $(TESTDEPS) $(OBJD)/$(package)ti.o
$(PACKAGE)SS = $(S$(PACKAGE)) $(OBJS)/$(package)s.o
$(PACKAGE)SS2 = $(S$(PACKAGE)) $(OBJS)/$(package)s2.o
$(PACKAGE)SS3 = $(S$(PACKAGE)) $(OBJS)/$(package)s3.o
$(PACKAGE)SS4 = $(S$(PACKAGE)) $(OBJS)/$(package)s4.o
$(PACKAGE)ST = $(S$(PACKAGE)) $(TESTDEPS) $(OBJS)/$(package)t.o
$(PACKAGE)STI = $(S$(PACKAGE)) $(TESTDEPS) $(OBJS)/$(package)ti.o

R$(PACKAGE)DS = $(OBJD)/$(package)s.o -L$(OBJD) $(LIBS)
R$(PACKAGE)DS2 = $(OBJD)/$(package)s2.o -L$(OBJD) $(LIBS)
R$(PACKAGE)DS3 = $(OBJD)/$(package)s3.o -L$(OBJD) $(LIBS)
R$(PACKAGE)DS4 = $(OBJD)/$(package)s4.o -L$(OBJD) $(LIBS)
R$(PACKAGE)DT = $(OBJD)/$(package)t.o -L$(OBJD) $(LIBS)
R$(PACKAGE)DTI = $(OBJD)/$(package)ti.o -L$(OBJD) $(LIBS)
R$(PACKAGE)SS = $(OBJS)/$(package)s.o -L$(OBJS) $(LIBS)
R$(PACKAGE)SS2 = $(OBJS)/$(package)s2.o -L$(OBJS) $(LIBS)
R$(PACKAGE)SS3 = $(OBJS)/$(package)s3.o -L$(OBJS) $(LIBS)
R$(PACKAGE)SS4 = $(OBJS)/$(package)s4.o -L$(OBJS) $(LIBS)
R$(PACKAGE)ST = $(OBJS)/$(package)t.o -L$(OBJS) $(LIBS)
R$(PACKAGE)STI = $(OBJS)/$(package)ti.o -L$(OBJS) $(LIBS)

#  test agenda for C interfaces

$(PACKAGE)CDS = $(D$(PACKAGE)C) $(OBJD)/$(package)cs.o
$(PACKAGE)CDS2 = $(D$(PACKAGE)C) $(OBJD)/$(package)cs2.o
$(PACKAGE)CDS3 = $(D$(PACKAGE)C) $(OBJD)/$(package)cs3.o
$(PACKAGE)CDS4 = $(D$(PACKAGE)C) $(OBJD)/$(package)cs4.o
$(PACKAGE)CDT = $(D$(PACKAGE)C) $(TESTDEPS) $(OBJD)/$(package)ct.o
$(PACKAGE)CDTI = $(D$(PACKAGE)C) $(TESTDEPS) $(OBJD)/$(package)cti.o
$(PACKAGE)CDTF = $(D$(PACKAGE)C) $(TESTDEPS) $(OBJD)/$(package)ctf.o
$(PACKAGE)CSS = $(S$(PACKAGE)C) $(OBJS)/$(package)cs.o
$(PACKAGE)CSS2 = $(S$(PACKAGE)C) $(OBJS)/$(package)cs2.o
$(PACKAGE)CSS3 = $(S$(PACKAGE)C) $(OBJS)/$(package)cs3.o
$(PACKAGE)CSS4 = $(S$(PACKAGE)C) $(OBJS)/$(package)cs4.o
$(PACKAGE)CST = $(S$(PACKAGE)C) $(TESTDEPS) $(OBJS)/$(package)ct.o
$(PACKAGE)CSTI = $(S$(PACKAGE)C) $(TESTDEPS) $(OBJS)/$(package)cti.o
$(PACKAGE)CSTF = $(S$(PACKAGE)C) $(TESTDEPS) $(OBJS)/$(package)ctf.o

R$(PACKAGE)CDS = $(OBJD)/$(package)cs.o -L$(OBJD) $(CLIBS)
R$(PACKAGE)CDS2 = $(OBJD)/$(package)cs2.o -L$(OBJD) $(CLIBS)
R$(PACKAGE)CDS3 = $(OBJD)/$(package)cs3.o -L$(OBJD) $(CLIBS)
R$(PACKAGE)CDS4 = $(OBJD)/$(package)cs4.o -L$(OBJD) $(CLIBS)
R$(PACKAGE)CDT = $(OBJD)/$(package)ct.o -L$(OBJD) $(CLIBS)
R$(PACKAGE)CDTI = $(OBJD)/$(package)cti.o -L$(OBJD) $(CLIBS)
R$(PACKAGE)CDTF = $(OBJD)/$(package)ctf.o -L$(OBJD) $(CLIBS)
R$(PACKAGE)CSS = $(OBJS)/$(package)cs.o -L$(OBJS) $(CLIBS)
R$(PACKAGE)CSS2 = $(OBJS)/$(package)cs2.o -L$(OBJS) $(CLIBS)
R$(PACKAGE)CSS3 = $(OBJS)/$(package)cs3.o -L$(OBJS) $(CLIBS)
R$(PACKAGE)CSS4 = $(OBJS)/$(package)cs4.o -L$(OBJS) $(CLIBS)
R$(PACKAGE)CST = $(OBJS)/$(package)ct.o -L$(OBJS) $(CLIBS)
R$(PACKAGE)CTI = $(OBJS)/$(package)cti.o -L$(OBJS) $(CLIBS)
R$(PACKAGE)CTF = $(OBJS)/$(package)ctf.o -L$(OBJS) $(CLIBS)

#  =========================================================================
#  ========================== makefile stanza ==============================
#  =========================================================================

#  main compilations and runs

all: $(package)
all_$(package): all

tests: $(TESTS)

test: test_$(package)
test_spec: test_$(package)_spec
test_full: test_$(package)_full
test_cutest: test_$(package)_cutest
test_qplib: test_$(package)_qplib

#  process package

$(package): $(package)_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: $(PACKAGE) ($(PRECIS) $(SUCC)"
$(package)_single: $($(PACKAGE)OBJECTSS)
	$(RANLIB) $(LGS)
$(package)_double: $($(PACKAGE)OBJECTSD)
	$(RANLIB) $(LGD)

#  process package silently

$(package)_silent: $(package)_silent_$(PRECIS)
$(package)_silent_single: $($(PACKAGE)OBJECTSS)
$(package)_silent_double: $($(PACKAGE)OBJECTSD)

#  process C interface to package

$(package)c: $(package)c_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: $(PACKAGE) ($(PRECIS) $(SUCC)"
$(package)c_single: $($(PACKAGE)OBJECTSCS)
	$(RANLIB) $(LGS)
	$(RANLIB) $(CLGS)
$(package)c_double: $($(PACKAGE)OBJECTSCD)
	$(RANLIB) $(LGD)
	$(RANLIB) $(CLGD)

#  process C interface to package silently

$(package)c_silent: $(package)c_silent_$(PRECIS)
$(package)c_silent_single: $($(PACKAGE)OBJECTSCS)
$(package)c_silent_double: $($(PACKAGE)OBJECTSCD)

# process package for CUTEst

$(package)_cutest: $(package)_cutest_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: $(PACKAGE) ($(PRECIS) $(SUCC_CUTEST)"
$(package)_cutest_single: $($(PACKAGE)OBJECTSS_CUTEST)
	$(RANLIB) $(LGS)
$(package)_cutest_double: $($(PACKAGE)OBJECTSD_CUTEST)
	$(RANLIB) $(LGD)

#  process package for CUTEst silently

$(package)_cutest_silent: $(package)_cutest_silent_$(PRECIS)
$(package)_cutest_silent_single: $($(PACKAGE)OBJECTSS_CUTEST)
$(package)_cutest_silent_double: $($(PACKAGE)OBJECTSD_CUTEST)

#  process package add-ons for CUTEst

$(package)_cutest_addon: $(package)_cutest_addon_$(PRECIS)
$(package)_cutest_addon_single: $(LGS)(use$(package).o) \
                                $(OBJS)/run$(package)_sif.o
$(package)_cutest_addon_double: $(LGD)(use$(package).o) \
                                $(OBJD)/run$(package)_sif.o

#  process package for QPLIB

$(package)_qplib: $(package)_qplib_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: $(PACKAGE) ($(PRECIS) $(SUCC_QPLIB)"
$(package)_qplib_single: $($(PACKAGE)OBJECTSS_QPLIB)
	$(RANLIB) $(LGS)
$(package)_qplib_double: $($(PACKAGE)OBJECTSD_QPLIB)
	$(RANLIB) $(LGD)

#  process package for QPLIB silently

$(package)_qplib_silent: $(package)_qplib_silent_$(PRECIS)
$(package)_qplib_silent_single: $($(PACKAGE)OBJECTSS_QPLIB)
$(package)_qplib_silent_double: $($(PACKAGE)OBJECTSD_QPLIB)

#  process package add-ons for QPLIB

$(package)_qplib_addon: $(package)_qplib_addon_$(PRECIS)
$(package)_qplib_addon_single: $(OBJS)/in$(package).o
$(package)_qplib_addon_double: $(OBJD)/in$(package).o

#  run independent package tests

$(package)srunall: $(package)ss $(package)ss2 $(package)ss3 $(package)st
$(package)drunall: $(package)ds $(package)ds2 $(package)ds3 $(package)dt
$(package)runall: $(package)drunall $(package)srunall

#  run qp data format package

in$(package): in$(package)_$(PRECIS)
in$(package)_single: $($(PACKAGE)OBJECTSS) $(OBJS)/in$(package).o
in$(package)_double: $($(PACKAGE)OBJECTSD) $(OBJD)/in$(package).o

#  test package both fullly and with CUTEst

test_$(package): test_$(package)_$(PRECIS)

test_$(package)_single: $(package)st test_$(package)_cutest_single
	echo ""
	echo " Tests for $(package) complete"

test_$(package)_double: $(package)dt test_$(package)_cutest_double
	echo ""
	echo " Tests for $(package) complete"

#  package example for specification document

test_$(package)_spec: test_$(package)_spec_$(PRECIS)
test_$(package)_spec_single: $(package)ss
test_$(package)_spec_double: $(package)ds

#  full test package without CUTEst

test_$(package)_full: test_$(package)_full_$(PRECIS)
test_$(package)_full_single: $(package)st
test_$(package)_full_double: $(package)dt

#  test package with CUTEst

test_$(package)_cutest: test_$(package)_cutest_$(PRECIS)
test_$(package)_cutest_single: $($(PACKAGE)OBJECTSS_CUTEST)
	echo ""
	echo " Testing CUTEst interface to $(package)"
	cd $(GALAHAD)/examples ; \
          sdgal $(VERSION) $(package) -s $(CUTEST_EXAMPLE)

test_$(package)_cutest_double: $($(PACKAGE)OBJECTSD_CUTEST)
	echo ""
	echo " Testing CUTEst interface to $(package)"
	cd $(GALAHAD)/examples ; \
          sdgal $(VERSION) $(package) $(CUTEST_EXAMPLE)

#  test package with QPLIB

test_$(package)_qplib: test_$(package)_qplib_$(PRECIS)
test_$(package)_qplib_single: $($(PACKAGE)OBJECTSS_QPLIB)
	echo ""
	echo " Testing QPLIB interface to $(package)"
	cd $(GALAHAD)/examples ; \
          dgal $(VERSION) $(package) -s $(QPLIB_EXAMPLE)

test_$(package)_qplib_double: $($(PACKAGE)OBJECTSD_QPLIB)
	echo ""
	echo " Testing QPLIB interface to $(package)"
	cd $(GALAHAD)/examples ; \
          dgal $(VERSION) $(package) $(QPLIB_EXAMPLE)

#  run specification document example tests

$(package)ss: $($(PACKAGE)SS)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_$(package) \
                                                     $(R$(PACKAGE)SS)
	$(RMOOC)
	- ./run_$(package) > $(package)s.output 2>&1
	cat $(package)s.output
	rm ./run_$(package)

$(package)ss2: $($(PACKAGE)SS2)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_$(package) \
                                                     $(R$(PACKAGE)SS2)
	$(RMOOC)
	- ./run_$(package) > $(package)s2.output 2>&1
	cat $(package)s2.output
	rm ./run_$(package)

$(package)ss3: $($(PACKAGE)SS3)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_$(package) \
                                                     $(R$(PACKAGE)SS3)
	$(RMOOC)
	- ./run_$(package) > $(package)s3.output 2>&1
	cat $(package)s3.output
	rm ./run_$(package)

$(package)ss4: $($(PACKAGE)SS4)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_$(package) \
                                                     $(R$(PACKAGE)SS4)
	$(RMOOC)
	- ./run_$(package) > $(package)s4.output 2>&1
	cat $(package)s4.output
	rm ./run_$(package)

$(package)ds: $($(PACKAGE)DS)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_$(package) \
                                                     $(R$(PACKAGE)DS)
	$(RMOOC)
	- ./run_$(package) > $(package)ds.output 2>&1
	cat $(package)ds.output
	rm ./run_$(package)

$(package)ds2: $($(PACKAGE)DS2)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_$(package) \
                                                     $(R$(PACKAGE)DS2)
	$(RMOOC)
	- ./run_$(package)
#	- ./run_$(package) > $(package)ds2.output 2>&1
#	cat $(package)ds2.output
	rm ./run_$(package)

$(package)ds3: $($(PACKAGE)DS3)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_$(package) \
                                                     $(R$(PACKAGE)DS3)
	$(RMOOC)
	- ./run_$(package) > $(package)ds3.output 2>&1
	cat $(package)ds3.output
	rm ./run_$(package)

$(package)ds4: $($(PACKAGE)DS4)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_$(package) \
                                                     $(R$(PACKAGE)DS4)
	$(RMOOC)
	- ./run_$(package) > $(package)ds4.output 2>&1
	cat $(package)ds4.output
	rm ./run_$(package)

#  run C specification document example tests

$(package)css: $($(PACKAGE)CSS)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) $(NOFMAIN) -o run_$(package) \
                                                     $(R$(PACKAGE)CSS)
	$(RMOOC)
	- ./run_$(package) > $(package)cs.output 2>&1
	cat $(package)cs.output
	rm ./run_$(package)

$(package)css2: $($(PACKAGE)CSS2)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) $(NOFMAIN) -o run_$(package) \
                                                     $(R$(PACKAGE)CSS2)
	$(RMOOC)
	- ./run_$(package) > $(package)cs2.output 2>&1
	cat $(package)cs2.output
	rm ./run_$(package)

$(package)css3: $($(PACKAGE)CSS3)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) $(NOFMAIN) -o run_$(package) \
                                                     $(R$(PACKAGE)CSS3)
	$(RMOOC)
	- ./run_$(package) > $(package)cs3.output 2>&1
	cat $(package)cs3.output
	rm ./run_$(package)

$(package)css4: $($(PACKAGE)CSS4)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) $(NOFMAIN) -o run_$(package) \
                                                     $(R$(PACKAGE)CSS4)
	$(RMOOC)
	- ./run_$(package) > $(package)cs4.output 2>&1
	cat $(package)cs4.output
	rm ./run_$(package)

$(package)cds: $($(PACKAGE)CDS)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) $(NOFMAIN) -o run_$(package) \
                                                     $(R$(PACKAGE)CDS)
	$(RMOOC)
	./run_$(package)
#	- ./run_$(package) > $(package)cds.output 2>&1
#	cat $(package)cds.output
	rm ./run_$(package)

$(package)cds2: $($(PACKAGE)CDS2)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) $(NOFMAIN) -o run_$(package) \
                                                     $(R$(PACKAGE)CDS2)
	$(RMOOC)
	- ./run_$(package) > $(package)cds2.output 2>&1
	cat $(package)cds2.output
	rm ./run_$(package)

$(package)cds3: $($(PACKAGE)CDS3)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) $(NOFMAIN) -o run_$(package) \
                                                     $(R$(PACKAGE)CDS3)
	$(RMOOC)
	- ./run_$(package) > $(package)cds3.output 2>&1
	cat $(package)cds3.output
	rm ./run_$(package)

$(package)cds4: $($(PACKAGE)CDS4)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) $(NOFMAIN) -o run_$(package) \
                                                     $(R$(PACKAGE)CDS4)
	$(RMOOC)
	- ./run_$(package) > $(package)cds4.output 2>&1
	cat $(package)cds4.output
	rm ./run_$(package)

#  run full (comprehensive) example tests

$(package)st: $($(PACKAGE)ST)
	echo " Exhaustive test of subroutine interface to $(package)"
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_$(package) \
                                                     $(R$(PACKAGE)ST)
	$(RMOOC)
	- ./run_$(package) > $(package)st.output 2>&1
	cat $(package)st.output
	rm ./run_$(package)

$(package)sti: $($(PACKAGE)STI)
	echo " Exhaustive test of subroutine interface to $(package)"
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_$(package) \
                                                     $(R$(PACKAGE)STI)
	$(RMOOC)
	- ./run_$(package) > $(package)sti.output 2>&1
	cat $(package)sti.output
	rm ./run_$(package)

$(package)dt: $($(PACKAGE)DT)
	echo " Exhaustive test of subroutine interface to $(package)"
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_$(package) \
                                                     $(R$(PACKAGE)DT)
	$(RMOOC)
#	- ./run_$(package)
	- ./run_$(package) > $(package)dt.output 2>&1
	cat $(package)dt.output
	rm ./run_$(package)

$(package)dti: $($(PACKAGE)DTI)
	echo " Exhaustive test of subroutine interface to $(package)"
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_$(package) \
                                                     $(R$(PACKAGE)DTI)
	$(RMOOC)
	- ./run_$(package) > $(package)dti.output 2>&1
	cat $(package)dti.output
	rm ./run_$(package)

#  run full (comprehensive) C example tests

$(package)cst: $($(PACKAGE)CST)
	echo " Exhaustive test of subroutine interface to $(package)"
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) $(NOFMAIN) -o run_$(package) \
                                                     $(R$(PACKAGE)CST)
	$(RMOOC)
	- ./run_$(package) > $(package)st.output 2>&1
	cat $(package)st.output
	rm ./run_$(package)

$(package)csti: $($(PACKAGE)CSTI)
	echo " Exhaustive test of subroutine interface to $(package)"
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) $(NOFMAIN) -o run_$(package) \
                                                     $(R$(PACKAGE)CSTI)
	$(RMOOC)
	- ./run_$(package) > $(package)sti.output 2>&1
	cat $(package)sti.output
	rm ./run_$(package)

$(package)cstf: $($(PACKAGE)CSTF)
	echo " Exhaustive test of subroutine interface to $(package)"
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) $(NOFMAIN) -o run_$(package) \
                                                     $(R$(PACKAGE)CSTF)
	$(RMOOC)
	- ./run_$(package) > $(package)stf.output 2>&1
	cat $(package)stf.output
	rm ./run_$(package)

$(package)cdt: $($(PACKAGE)CDT)
	echo " Exhaustive test of subroutine interface to $(package)"
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) $(NOFMAIN) -o run_$(package) \
                                                     $(R$(PACKAGE)CDT)
	$(RMOOC)
	- ./run_$(package)
#	- ./run_$(package) > $(package)dt.output 2>&1
#	cat $(package)dt.output
	rm ./run_$(package)

$(package)cdti: $($(PACKAGE)CDTI)
	echo " Exhaustive test of subroutine interface to $(package)"
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) $(NOFMAIN) -o run_$(package) \
                                                     $(R$(PACKAGE)CDTI)
	$(RMOOC)
	- ./run_$(package) > $(package)dti.output 2>&1
	cat $(package)dti.output
	rm ./run_$(package)

$(package)cdtf: $($(PACKAGE)CDTF)
	echo " Exhaustive test of subroutine interface to $(package)"
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) $(NOFMAIN) -o run_$(package) \
                                                     $(R$(PACKAGE)CDTF)
	$(RMOOC)
	- ./run_$(package) > $(package)dtf.output 2>&1
	cat $(package)dtf.output
	rm ./run_$(package)

#  main program

run$(package)_sif.o: $(OBJ)/run$(package)_sif.o

$(OBJ)/run$(package)_sif.o: ../$(package)/run$(package)_sif.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "run$(package)_sif"
	$(SED) -f $(SEDS) \
           ../$(package)/run$(package)_sif.f90 > $(OBJ)/run$(package)_sif.f90
	cd $(OBJ); $(FORTRAN) -o run$(package)_sif.o \
                     $(FFLAGSS) run$(package)_sif.f90
	rm $(OBJ)/run$(package)_sif.f90
	@printf '[ OK ]\n'

# main progarms for data-file interface

in$(package).o: $(OBJ)/in$(package).o

$(OBJ)/in$(package).o: ../$(package)/in$(package).f90
	@printf ' %-9s %-15s\t\t' "Compiling" "in$(package)"
	$(SED) -f $(SEDS) ../$(package)/in$(package).f90 \
           > $(OBJ)/in$(package)1.f90
	$(SED) -f $(LSEDS) $(OBJ)/in$(package)1.f90 > $(OBJ)/in$(package).f90
	cd $(OBJ); $(FORTRAN) -o in$(package).o $(FFLAGSOMP) in$(package).f90
	rm $(OBJ)/in$(package).f90 $(OBJ)/in$(package)1.f90
	@printf '[ OK ]\n'

#  book keeping

clean:
	@printf ' %-9s\t\t' "Removing $(package) files"
	$(RMARFILE) $(package).o
	$(RM) $(OBJ)/$(package)t.o $(OBJ)/$(package)s.o
	@printf '[ OK ]\n'

cleanall:
	@printf ' %-14s\t\t' \
          "Removing all $(PRECIS) precision object and module files"
	$(RM) $(OBJ)/* $(MOD)/*
	@printf '[ OK ]\n'

cleanallc:
	@printf ' %-9s\t' \
          "Removing all $(PRECIS) precision C-interface object and module files"
	$(RM) $(OBJ)/libgalahad_c.a $(MOD)/*ciface.mod
	@printf '[ OK ]\n'
