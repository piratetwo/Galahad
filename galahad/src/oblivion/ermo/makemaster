#  Main body of the installation makefile for the GALAHAD ERMO package

#  N. Gould, D. Orban and Ph. L. Toint.
#  This version: 27 X 2008

SHELL = /bin/$(BINSHELL)

#  compiler flags

FFLAGS    = $(BASIC) $(OPTIMIZATION) $(DEBUG) $(MODULES) $(F90) $(USUAL)
FFLAGSS   = $(BASIC) $(OPTIMIZATION) $(DEBUG) $(MODULES) $(F90) $(SPECIAL)
FFLAGSN   = $(BASIC) $(NOOPTIMIZATION) $(DEBUG) $(MODULES) $(F90)
FFLAGS77  = $(BASIC) $(OPTIMIZATION) $(DEBUG) $(MODULES) $(F77) $(USUAL)
FFLAGS77S = $(BASIC) $(OPTIMIZATION) $(DEBUG) $(MODULES) $(F77) $(SPECIAL)
RUNFFLAGS =          $(OPTIMIZATION) $(DEBUG) $(MODULES)
#RUNFFLAGS =          $(OPTIMIZATION) $(DEBUG) $(MODULES) -L/usr/lib -llapack

#  coverage flags

COVERAGE = -fprofile-arcs -ftest-coverage

#  names of random libraries

LG  = $(OBJ)/libgalahad.a
LGS = $(OBJS)/libgalahad.a
LGD = $(OBJD)/libgalahad.a

BLG  = $(OBJ)/libgalahad_blas.a
BLGS = $(OBJS)/libgalahad_blas.a
BLGD = $(OBJD)/libgalahad_blas.a

LLG  = $(OBJ)/libgalahad_lapack.a
LLGS = $(OBJS)/libgalahad_lapack.a
LLGD = $(OBJD)/libgalahad_lapack.a

HLG  = $(OBJ)/libgalahad_hsl.a
HLGS = $(OBJS)/libgalahad_hsl.a
HLGD = $(OBJD)/libgalahad_hsl.a

MLG  = $(OBJ)/libgalahad_metis.a
MLGS = $(OBJS)/libgalahad_metis.a
MLGD = $(OBJD)/libgalahad_metis.a

#  Libraries used

LIBS = -lgalahad $(HSL) $(SPRAL) $(PARDISO) $(WSMP) $(METIS) $(LAPACK) $(BLAS)

#  Archive manipulation strings

ARR = $(AR) $(ARREPFLAGS) $(LG)
RMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $(LG)
RMOBFILE = $(GALAHAD)/bin/rmobfile $(RM) $(OBJ)

BARR = $(AR) $(ARREPFLAGS) $(BLG)
BRMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $(BLG)

LARR = $(AR) $(ARREPFLAGS) $(LLG)
LRMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $(LLG)

HARR = $(AR) $(ARREPFLAGS) $(HLG)
HRMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $(HLG)

MARR = $(AR) $(ARREPFLAGS) $(MLG)
MRMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $MLG)

#  sed scripts

LSEDS = $(GALAHAD)/seds/$(LINEARSOLVER).sed
LPSEDS = $(GALAHAD)/seds/$(LINEARSOLVER)_precon.sed

#  compilation agenda

SERMO = basics linearsolver mi20 cutest_functions tru $(LGS)(ermo.o)
DERMO = basics linearsolver mi20 cutest_functions tru $(LGD)(ermo.o)

SRUNERMO = copyright $(LGS)(useermo.o) $(OBJS)/runermo_sif.o
DRUNERMO = copyright $(LGD)(useermo.o) $(OBJD)/runermo_sif.o

ERMOOBJECTSS_CUTEST = $(SERMO) $(SRUNERMO)
ERMOOBJECTSD_CUTEST = $(DERMO) $(DRUNERMO)

OBJECTSS_CUTEST = $(ERMOOBJECTSS_CUTEST)
OBJECTSD_CUTEST = $(ERMOOBJECTSD_CUTEST)

ERMODS = $(DERMO) $(OBJD)/ermos.o
ERMODS2 = $(DERMO) $(OBJD)/ermos2.o
ERMODS3 = $(DERMO) $(OBJD)/ermos3.o
ERMODT = $(DERMO) $(OBJD)/ermot.o
ERMOSS = $(SERMO) $(OBJS)/ermos.o
ERMOSS2 = $(SERMO) $(OBJS)/ermos2.o
ERMOSS3 = $(SERMO) $(OBJS)/ermos3.o
ERMOST = $(SERMO) $(OBJS)/ermot.o

RERMODS = $(OBJD)/ermos.o -L$(OBJD) $(LIBS)
RERMODS2 = $(OBJD)/ermos2.o -L$(OBJD) $(LIBS)
RERMODS3 = $(OBJD)/ermos3.o -L$(OBJD) $(LIBS)
RERMODT = $(OBJD)/ermot.o -L$(OBJD) $(LIBS)
RERMOSS = $(OBJS)/ermos.o -L$(OBJS) $(LIBS)
RERMOSS2 = $(OBJS)/ermos2.o -L$(OBJS) $(LIBS)
RERMOSS3 = $(OBJS)/ermos3.o -L$(OBJS) $(LIBS)
RERMOST = $(OBJS)/ermot.o -L$(OBJS) $(LIBS)

SUCC = precision version) compiled successfully
SUCC_CUTEST = precision version) for CUTEst compiled successfully

#  main compilations and runs

all: ermo_cutest
all_ermo: ermo_cutest
test: test_ermo
test_nocutest: test_ermo_nocutest

# ermo

ermo_cutest: ermo_cutest_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: ERMO ($(PRECIS) $(SUCC_CUTEST)"
ermo_cutest_single: $(ERMOOBJECTSS_CUTEST)
	$(RANLIB) $(LGS)
ermo_cutest_double: $(ERMOOBJECTSD_CUTEST)
	$(RANLIB) $(LGD)

ermo_silent: ermo_silent_$(PRECIS)
ermo_silent_single: $(ERMOOBJECTSS)
ermo_silent_double: $(ERMOOBJECTSD)

ermo: ermo_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: ERMO ($(PRECIS) $(SUCC)"
ermo_single: $(ERMOOBJECTSS)
	$(RANLIB) $(LGS)
ermo_double: $(ERMOOBJECTSD)
	$(RANLIB) $(LGD)

ermosrunall: ermoss ermoss2 ermoss3 ermods ermods2 ermods3
ermodrunall: ermods ermodt
ermorunall: ermodrunall ermosrunall

test_ermo: test_ermo_$(PRECIS)

test_ermo_single: ermost $(SRUNERMO)
	echo ""
	echo " Testing CUTEst interface to ermo"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) ermo -s QPBAND
	echo ""
	echo " Tests for ermo complete"

test_ermo_double: ermodt $(DRUNERMO)
	echo ""
	echo " Testing CUTEst interface to ermo"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) ermo QPBAND
	echo ""
	echo " Tests for ermo complete"

test_ermo_nocutest: test_ermo_nocutest_$(PRECIS)

test_ermo_nocutest_single: ermost
	echo ""
	echo " Tests for ermo complete"

test_ermo_nocutest_double: ermodt
	echo ""
	echo " Tests for ermo complete"

#  basic packages

basics:
	( cd ../../general ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            basics_silent PRECIS=$(PRECIS) PWD=$(PWD)/../../general )
linearsolver:
	( cd ../../general ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            linearsolver_silent PRECIS=$(PRECIS) PWD=$(PWD)/../../general )
mi20:
	( cd ../../non-free/mi20 ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            mi20_silent PRECIS=$(PRECIS) PWD=$(PWD)/../../non-free/mi20 )
tru:
	( cd ../../tru ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            tru_silent PRECIS=$(PRECIS) PWD=$(PWD)/../../tru )
psls:
	( cd ../../psls ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            psls_silent PRECIS=$(PRECIS) PWD=$(PWD)/../../psls )
mop:
	( cd ../../mop ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            mop.o PRECIS=$(PRECIS) PWD=$(PWD)/../../mop )
cutest_functions:
	( cd ../../auxiliary ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            cutest_functions_silent PRECIS=$(PRECIS) \
            PWD=$(PWD)/../../auxiliary )
copyright:
	( cd ../../general ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            copyright.o PRECIS=$(PRECIS) PWD=$(PWD)/../../general )

# run spec-sheet example tests

ermoss: $(ERMOSS)
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_ermo $(RERMOSS)
	- ./run_ermo >& ermos.output
	cat ermos.output
	rm ./run_ermo

ermoss2: $(ERMOSS2)
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_ermo $(RERMOSS2)
	- ./run_ermo >& ermos2.output
	cat ermos2.output
	rm ./run_ermo

ermoss3: $(ERMOSS3)
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_ermo $(RERMOSS3)
	- ./run_ermo >& ermos3.output
	cat ermos3.output
	rm ./run_ermo

ermost: $(ERMOST)
	echo " Exhaustive test of subroutine interface to ermo"
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_ermo $(RERMOST)
	- ./run_ermo >& ermot.output
	cat ermot.output
	rm ./run_ermo

ermods: $(ERMODS)
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_ermo $(RERMODS)
	- ./run_ermo >& ermods.output
	cat ermods.output
	rm ./run_ermo

ermods2: $(ERMODS2)
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_ermo $(RERMODS2)
	- ./run_ermo >& ermods2.output
	cat ermods2.output
	rm ./run_ermo

ermods3: $(ERMODS3)
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_ermo $(RERMODS3)
	- ./run_ermo >& ermods3.output
	cat ermods3.output
	rm ./run_ermo

ermodt: $(ERMODT)
	echo " Exhaustive test of subroutine interface to ermo"
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_ermo $(RERMODT)
	- ./run_ermo >& ermodt.output
	cat ermodt.output
	rm ./run_ermo

ermot_gcov: basics linearsolver mi20 cutest_functions tru
	echo " Exhaustive coverage test of subroutine interface to ermo"
	$(SED) -f $(SEDS) ermo.f90 > ermo_gcov1.f90
	$(SED) -f $(LSEDS) ermo_gcov1.f90 > ermo_gcov2.f90
	$(SED) -f $(LPSEDS) ermo_gcov2.f90 > ermo_gcov3.f90
	$(SED) "s/^.$(NOT95)/     /" ermo_gcov3.f90 > ermo_gcov.f90
	$(FORTRAN) -g $(BASIC) $(NOOPTIMIZATION) $(MODULES) $(COVERAGE) \
          ermo_gcov.f90
	$(SED) -f $(SEDS) ermot.f90 > ermot_gcov1.f90
	$(SED) -f $(LSEDS) ermot_gcov1.f90 > ermot_gcov.f90
	$(FORTRAN) -g $(BASIC) $(NOOPTIMIZATION) $(MODULES) $(COVERAGE) \
          ermot_gcov.f90
	$(FORTRAN) $(NOOPTIMIZATION) $(MODULES) $(COVERAGE) \
          -o ./ermo_gcov ermo_gcov.o ermot_gcov.o -L$(OBJ) $(LIBS)
	./ermo_gcov
	gcov ./ermo_gcov
	$(MV) ./ermo_gcov.f90.gcov ./ermo_coverage
	$(RM) ./ermo*gcov* ./galahad_ermo_*.mod

#  Substantial GALAHAD packages

ermo.o: $(LG)(ermo.o)

$(LG)(ermo.o): ../ermo/ermo.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "ermo   "
	$(SED) -f $(SEDS) ../ermo/ermo.f90 > $(OBJ)/ermo1.f90
	$(SED) -f $(LSEDS) $(OBJ)/ermo1.f90 > $(OBJ)/ermo2.f90
	$(SED) -f $(LPSEDS) $(OBJ)/ermo2.f90 > $(OBJ)/ermo3.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/ermo3.f90 > $(OBJ)/ermo.f90
	cd $(OBJ); $(FORTRAN) -o ermo.o $(FFLAGSS) ermo.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o ermo.o $(FFLAGSN) ermo.f90 )
	cd $(OBJ); $(ARR) ermo.o ; $(RM) ermo.f90 ermo1.f90 ermo2.f90 \
                                          ermo3.f90 ermo.o
	$(RMARFILE) useermo.o
	$(RMOBFILE) ermos.o
	$(RMOBFILE) ermot.o
	$(MVMODS)
	@printf '[ OK ]\n'

# CUTEst/AMPL interfaces

useermo.o: $(LG)(useermo.o)

$(LG)(useermo.o): ../ermo/useermo.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "useermo   "
	$(SED) -f $(SEDS) ../ermo/useermo.f90 > $(OBJ)/useermo1.f90
	$(SED) -f $(LSEDS) $(OBJ)/useermo1.f90 > $(OBJ)/useermo2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/useermo2.f90 > $(OBJ)/useermo.f90
	cd $(OBJ); $(FORTRAN) -o useermo.o $(FFLAGSS) useermo.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o useermo.o $(FFLAGSN) useermo.f90 )
	cd $(OBJ); $(ARR) useermo.o ; $(RM) useermo.f90 useermo1.f90 \
                                       useermo2.f90 useermo.o
	$(RMOBFILE) runermo_sif.o
	$(MVMODS)
	@printf '[ OK ]\n'

#  main programs

runermo_sif.o: $(OBJ)/runermo_sif.o

$(OBJ)/runermo_sif.o: ../ermo/runermo_sif.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "runermo_sif"
	$(SED) -f $(SEDS) ../ermo/runermo_sif.f90 > $(OBJ)/runermo_sif.f90
	cd $(OBJ); $(FORTRAN) -o runermo_sif.o $(FFLAGSS) runermo_sif.f90
	rm $(OBJ)/runermo_sif.f90
	@printf '[ OK ]\n'

#  test decks

ermos.o: $(OBJ)/ermos.o

$(OBJ)/ermos.o: ../ermo/ermos.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "ermos  "
	$(SED) -f $(SEDS) ../ermo/ermos.f90 > $(OBJ)/ermos1.f90
	$(SED) -f $(LSEDS) $(OBJ)/ermos1.f90 > $(OBJ)/ermos.f90
	cd $(OBJ) ; $(FORTRAN) -o ermos.o $(FFLAGS) ermos.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

ermos2.o: $(OBJ)/ermos2.o

$(OBJ)/ermos2.o: ../ermo/ermos2.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "ermos2  "
	$(SED) -f $(SEDS) ../ermo/ermos2.f90 > $(OBJ)/ermos1.f90
	$(SED) -f $(LSEDS) $(OBJ)/ermos1.f90 > $(OBJ)/ermos2.f90
	cd $(OBJ) ; $(FORTRAN) -o ermos2.o $(FFLAGS) ermos2.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

ermos3.o: $(OBJ)/ermos3.o

$(OBJ)/ermos3.o: ../ermo/ermos3.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "ermos3  "
	$(SED) -f $(SEDS) ../ermo/ermos3.f90 > $(OBJ)/ermos1.f90
	$(SED) -f $(LSEDS) $(OBJ)/ermos1.f90 > $(OBJ)/ermos3.f90
	cd $(OBJ) ; $(FORTRAN) -o ermos3.o $(FFLAGS) ermos3.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

ermot.o: $(OBJ)/ermot.o

$(OBJ)/ermot.o: ../ermo/ermot.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "ermot  "
	$(SED) -f $(SEDS) ../ermo/ermot.f90 > $(OBJ)/ermot1.f90
	$(SED) -f $(LSEDS) $(OBJ)/ermot1.f90 > $(OBJ)/ermot.f90
	cd $(OBJ) ; $(FORTRAN) -o ermot.o $(FFLAGSS) ermot.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

#  book keeping

clean:
	@printf ' %-9s\t\t' "Cleaning"
	$(RM) $(LG) $(OBJ)/ermot.o $(OBJ)/ermos.o
	@printf '[ OK ]\n'

cleanall:
	@printf ' %-14s\t\t' "Removing all $(PRECIS) precision object and module files"
	$(RM) $(OBJ)/* $(MOD)/*
	@printf '[ OK ]\n'

rmermo:
	@printf ' %-9s %-15s\t\t' "Removing" "ermo from archive "
	$(RMARFILE) ermo.o
	@printf '[ OK ]\n'

