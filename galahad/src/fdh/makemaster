#  Main body of the installation makefile for the GALAHAD fdh package

#  N. Gould, D. Orban and Ph. L. Toint.
#  This version: 16 VII 2012

SHELL = /bin/$(BINSHELL)

#  compiler flags

FFLAGS    = $(BASIC) $(OPTIMIZATION) $(DEBUG) $(MODULES) $(F90) $(USUAL)
FFLAGSS   = $(BASIC) $(OPTIMIZATION) $(DEBUG) $(MODULES) $(F90) $(SPECIAL)
FFLAGSN   = $(BASIC) $(NOOPTIMIZATION) $(DEBUG) $(MODULES) $(F90)
FFLAGS77  = $(BASIC) $(OPTIMIZATION) $(DEBUG) $(MODULES) $(F77) $(USUAL)
FFLAGS77S = $(BASIC) $(OPTIMIZATION) $(DEBUG) $(MODULES) $(F77) $(SPECIAL)
FFLAGSOMP = $(BASIC) $(OPTIMIZATION) $(DEBUG) $(MODULES) $(F90) $(USUAL) \
            $(OPENMP)
FFLAGSNOMP = $(BASIC) $(NOOPTIMIZATION) $(DEBUG) $(MODULES) $(F90) $(OPENMP)
RUNFFLAGS  =         $(OPTIMIZATION) $(DEBUG) $(MODULES)
RUNFFLAGSOMP =       $(OPTIMIZATION) $(DEBUG) $(MODULES) $(OPENMP)

#  names of random libraries

LG  = $(OBJ)/libgalahad.a
LGS = $(OBJS)/libgalahad.a
LGD = $(OBJD)/libgalahad.a

BLG  = $(OBJ)/libgalahad_blas.a
BLGS = $(OBJS)/libgalahad_blas.a
BLGD = $(OBJD)/libgalahad_blas.a

LLG  = $(OBJ)/libgalahad_lapack.a
LLGS = $(OBJS)/libgalahad_lapack.a
LLGD = $(OBJD)/libgalahad_lapack.a

HLG  = $(OBJ)/libgalahad_hsl.a
HLGS = $(OBJS)/libgalahad_hsl.a
HLGD = $(OBJD)/libgalahad_hsl.a

MLG  = $(OBJ)/libgalahad_metis.a
MLGS = $(OBJS)/libgalahad_metis.a
MLGD = $(OBJD)/libgalahad_metis.a

#  Libraries used

LIBS = -lgalahad $(HSL) $(SPRAL) $(PARDISO) $(WSMP) $(METIS) $(LAPACK) $(BLAS)

#  Archive manipulation strings

ARR = $(AR) $(ARREPFLAGS) $(LG)
RMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $(LG)
RMOBFILE = $(GALAHAD)/bin/rmobfile $(RM) $(OBJ)

BARR = $(AR) $(ARREPFLAGS) $(BLG)
BRMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $(BLG)

LARR = $(AR) $(ARREPFLAGS) $(LLG)
LRMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $(LLG)

HARR = $(AR) $(ARREPFLAGS) $(HLG)
HRMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $(HLG)

MARR = $(AR) $(ARREPFLAGS) $(MLG)
MRMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $MHLG)

#  sed scripts

LSEDS = $(GALAHAD)/seds/$(LINEARSOLVER).sed
LPSEDS = $(GALAHAD)/seds/$(LINEARSOLVER)_precon.sed

#  compilation agenda

SFDH =  basics $(LGS)(fdh.o)
DFDH =  basics $(LGD)(fdh.o)

SRUNFDH = cutest_functions copyright $(LGS)(usefdh.o) $(OBJS)/runfdh_sif.o
DRUNFDH = cutest_functions copyright $(LGD)(usefdh.o) $(OBJD)/runfdh_sif.o

FDHOBJECTSS_CUTEST = $(SFDH) $(SRUNFDH)
FDHOBJECTSD_CUTEST = $(DFDH) $(DRUNFDH)

FDHDS = $(DFDH) $(OBJD)/fdhs.o
FDHDS2 = $(DFDH) $(OBJD)/fdhs2.o
FDHDT = $(DFDH) $(OBJD)/fdht.o
FDHSS = $(SFDH) $(OBJS)/fdhs.o
FDHST = $(SFDH) $(OBJS)/fdht.o

RFDHDS = $(OBJD)/fdhs.o -L$(OBJD) $(LIBS)
RFDHDS2 = $(OBJD)/fdhs2.o -L$(OBJD) $(LIBS)
RFDHDT = $(OBJD)/fdht.o -L$(OBJD) $(LIBS)
RFDHSS = $(OBJS)/fdhs.o -L$(OBJS) $(LIBS)
RFDHST = $(OBJS)/fdht.o -L$(OBJS) $(LIBS)

SUCC = precision version) compiled successfully
SUCC_CUTEST = precision version) for CUTEst compiled successfully

#  main compilations and runs

fdh: fdh.o
all: fdh_cutest
test: test_fdh
test_nocutest: test_fdh_nocutest

# fdh

fdh_silent: fdh_$(PRECIS)
fdh: fdh_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: FDH ($(PRECIS) $(SUCC)"
fdh_single: $(SFDH)
	$(RANLIB) $(LGS)
fdh_double: $(DFDH)
	$(RANLIB) $(LGD)

fdh_cutest: fdh_cutest_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: FDH ($(PRECIS) $(SUCC_CUTEST)"
fdh_cutest_single: $(FDHOBJECTSS_CUTEST)
	$(RANLIB) $(LGS)
fdh_cutest_double: $(FDHOBJECTSD_CUTEST)
	$(RANLIB) $(LGD)

fdhsrunall: fdhss fdhst
fdhdrunall: fdhds fdhdt
fdhrunall: fdhdrunall fdhsrunall

#  basic packages

basics:
	( cd ../general ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            basics_silent PRECIS=$(PRECIS) PWD=$(PWD)/../general )
	( cd ../qp ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            qpt.o PRECIS=$(PRECIS) PWD=$(PWD)/../qp )
cutest_functions:
	( cd ../auxiliary ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            cutest_functions_silent PRECIS=$(PRECIS) PWD=$(PWD)/../auxiliary )
copyright:
	( cd ../general ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            copyright.o PRECIS=$(PRECIS) PWD=$(PWD)/../general )

# run spec-sheet example tests

fdhds: $(FDHDS)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_fdh $(RFDHDS)
	- ./run_fdh >& fdhds.output
	cat fdhds.output
	rm ./run_fdh

fdhds2: $(FDHDS2)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_fdh $(RFDHDS2)
	- ./run_fdh < fdhs2.data
	rm ./run_fdh

fdhdt: $(FDHDT)
	echo " Exhaustive test of subroutine interface to fdh"
	echo $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_fdh $(RFDHDT)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_fdh $(RFDHDT)
	- ./run_fdh >& fdhdt.output
	cat fdhdt.output
	rm ./run_fdh

fdhss: $(FDHSS)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_fdh $(RFDHSS)
	- ./run_fdh >& fdhs.output
	cat fdhs.output
	rm ./run_fdh

fdhst: $(FDHST)
	echo " Exhaustive test of subroutine interface to fdh"
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_fdh $(RFDHST)
	- ./run_fdh >& fdht.output
	cat fdht.output
	rm ./run_fdh

#  Substantial GALAHAD packages

fdh.o: $(LG)(fdh.o)

$(LG)(fdh.o):  ../fdh/fdh.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "fdh  "
	$(SED) -f $(SEDS)  ../fdh/fdh.f90 > $(OBJ)/fdh1.f90
	$(SED) -f $(LSEDS) $(OBJ)/fdh1.f90 > $(OBJ)/fdh2.f90
	$(SED) -f $(LPSEDS) $(OBJ)/fdh2.f90 > $(OBJ)/fdh3.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/fdh3.f90 > $(OBJ)/fdh.f90
	cd $(OBJ); $(FORTRAN) -o fdh.o $(FFLAGSS) fdh.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o fdh.o $(FFLAGSN) fdh.f90 )
	cd $(OBJ); $(ARR) fdh.o ; $(RM) fdh.f90 fdh1.f90 fdh2.f90 \
                                         fdh3.f90 fdh.o
	$(RMARFILE) tru.o
	$(RMOBFILE) fdhs.o
	$(RMOBFILE) fdhs2.o
	$(RMOBFILE) fdht.o
	$(MVMODS)
	@printf '[ OK ]\n'

# CUTEst/AMPL interfaces

usefdh.o: $(LG)(usefdh.o)

$(LG)(usefdh.o): ../fdh/usefdh.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "usefdh   "
	$(SED) -f $(SEDS) ../fdh/usefdh.f90 > $(OBJ)/usefdh1.f90
	$(SED) -f $(LSEDS) $(OBJ)/usefdh1.f90 > $(OBJ)/usefdh2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/usefdh2.f90 > $(OBJ)/usefdh.f90
	cd $(OBJ); $(FORTRAN) -o usefdh.o $(FFLAGSS) usefdh.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o usefdh.o $(FFLAGSN) usefdh.f90 )
	cd $(OBJ); $(ARR) usefdh.o ; $(RM) usefdh.f90 usefdh1.f90 \
                                           usefdh2.f90 usefdh.o
	$(RMOBFILE) runfdh_sif.o
	$(MVMODS)
	@printf '[ OK ]\n'

#  main programs

runfdh_sif.o: $(OBJ)/runfdh_sif.o

$(OBJ)/runfdh_sif.o: ../fdh/runfdh_sif.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "runfdh_sif"
	$(SED) -f $(SEDS) ../fdh/runfdh_sif.f90 > $(OBJ)/runfdh_sif.f90
	cd $(OBJ); $(FORTRAN) -o runfdh_sif.o $(FFLAGSS) runfdh_sif.f90
	rm $(OBJ)/runfdh_sif.f90
	@printf '[ OK ]\n'

#  test decks

fdhs.o: $(OBJ)/fdhs.o

$(OBJ)/fdhs.o: ../fdh/fdhs.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "fdhs  "
	$(SED) -f $(SEDS) ../fdh/fdhs.f90 > $(OBJ)/fdhs1.f90
	$(SED) -f $(LSEDS) $(OBJ)/fdhs1.f90 > $(OBJ)/fdhs.f90
	cd $(OBJ) ; $(FORTRAN) -o fdhs.o $(FFLAGS) fdhs.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

fdhs.o: $(OBJ)/fdhs.o

$(OBJ)/fdhs2.o: ../fdh/fdhs2.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "fdhs2  "
	$(SED) -f $(SEDS) ../fdh/fdhs2.f90 > $(OBJ)/fdhs1.f90
	$(SED) -f $(LSEDS) $(OBJ)/fdhs1.f90 > $(OBJ)/fdhs2.f90
	cd $(OBJ) ; $(FORTRAN) -o fdhs2.o $(FFLAGS) fdhs2.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

fdht.o: $(OBJ)/fdht.o

$(OBJ)/fdht.o: ../fdh/fdht.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "fdht  "
	$(SED) -f $(SEDS) ../fdh/fdht.f90 > $(OBJ)/fdht1.f90
	$(SED) -f $(LSEDS) $(OBJ)/fdht1.f90 > $(OBJ)/fdht.f90
	cd $(OBJ) ; $(FORTRAN) -o fdht.o $(FFLAGSS) fdht.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

#  generate HSL codes from GALAHAD ones

hslgen:
	$(SED) -f ../hsl/gal2hsl ../eqp/fdh.f90 > ../hsl/hsl_ve16/ve16d.f90
	$(SED) -f ../hsl/gal2hsl ../sbls/sbls.f90 > ../hsl/hsl_mi14/mi14d.f90

#  book keeping

clean:
	@printf ' %-9s\t\t' "Cleaning"
	$(RM) $(LGS) $(LGD) $(LG) $(OBJ)/fdhs.o $(OBJ)/fdht.o
	@printf '[ OK ]\n'

cleanall:
	@printf ' %-14s\t\t' "Removing all $(PRECIS) precision object and module files"
	$(RM) $(OBJ)/* $(MOD)/*
	@printf '[ OK ]\n'

rmfdh:
	@printf ' %-9s %-15s\t\t' "Removing" "fdh from archive "
	$(RMARFILE) fdh.o
	@printf '[ OK ]\n'

