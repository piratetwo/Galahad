#  Main body of the installation makefile for the GALAHAD ISM package

#  N. Gould, D. Orban and Ph. L. Toint.
#  This version: 27 X 2008

SHELL = /bin/$(BINSHELL)

#  compiler flags

FFLAGS    = $(BASIC) $(OPTIMIZATION) $(DEBUG) $(MODULES) $(F90) $(USUAL)
FFLAGSS   = $(BASIC) $(OPTIMIZATION) $(DEBUG) $(MODULES) $(F90) $(SPECIAL)
FFLAGSN   = $(BASIC) $(NOOPTIMIZATION) $(DEBUG) $(MODULES) $(F90)
FFLAGS77  = $(BASIC) $(OPTIMIZATION) $(DEBUG) $(MODULES) $(F77) $(USUAL)
FFLAGS77S = $(BASIC) $(OPTIMIZATION) $(DEBUG) $(MODULES) $(F77) $(SPECIAL)
RUNFFLAGS =          $(OPTIMIZATION) $(DEBUG) $(MODULES)
#RUNFFLAGS =          $(OPTIMIZATION) $(DEBUG) $(MODULES) -L/usr/lib -llapack

#  names of random libraries

LG  = $(OBJ)/libgalahad.a
LGS = $(OBJS)/libgalahad.a
LGD = $(OBJD)/libgalahad.a

BLG  = $(OBJ)/libgalahad_blas.a
BLGS = $(OBJS)/libgalahad_blas.a
BLGD = $(OBJD)/libgalahad_blas.a

LLG  = $(OBJ)/libgalahad_lapack.a
LLGS = $(OBJS)/libgalahad_lapack.a
LLGD = $(OBJD)/libgalahad_lapack.a

HLG  = $(OBJ)/libgalahad_hsl.a
HLGS = $(OBJS)/libgalahad_hsl.a
HLGD = $(OBJD)/libgalahad_hsl.a

MLG  = $(OBJ)/libgalahad_metis.a
MLGS = $(OBJS)/libgalahad_metis.a
MLGD = $(OBJD)/libgalahad_metis.a

#  Libraries used

LIBS = -lgalahad $(HSL) $(SPRAL) $(PARDISO) $(WSMP) $(METIS) $(LAPACK) $(BLAS)

#  Archive manipulation strings

ARR = $(AR) $(ARREPFLAGS) $(LG)
RMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $(LG)
RMOBFILE = $(GALAHAD)/bin/rmobfile $(RM) $(OBJ)

BARR = $(AR) $(ARREPFLAGS) $(BLG)
BRMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $(BLG)

LARR = $(AR) $(ARREPFLAGS) $(LLG)
LRMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $(LLG)

HARR = $(AR) $(ARREPFLAGS) $(HLG)
HRMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $(HLG)

MARR = $(AR) $(ARREPFLAGS) $(MLG)
MRMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $MLG)

#  sed scripts

LSEDS = $(GALAHAD)/seds/$(LINEARSOLVER).sed
LPSEDS = $(GALAHAD)/seds/$(LINEARSOLVER)_precon.sed

#  compilation agenda

SISM = basics linearsolver cutest_functions gltr trs tru $(LGS)(ism.o)
DISM = basics linearsolver cutest_functions gltr trs tru $(LGD)(ism.o)

SRUNISM = copyright $(LGS)(useism.o) $(OBJS)/runism_sif.o
DRUNISM = copyright $(LGD)(useism.o) $(OBJD)/runism_sif.o

ISMOBJECTSS_CUTEST = $(SISM) $(SRUNISM)
ISMOBJECTSD_CUTEST = $(DISM) $(DRUNISM)

OBJECTSS_CUTEST = $(ISMOBJECTSS_CUTEST)
OBJECTSD_CUTEST = $(ISMOBJECTSD_CUTEST)

ISMDS = $(DISM) $(OBJD)/isms.o
ISMDS2 = $(DISM) $(OBJD)/isms2.o
ISMDS3 = $(DISM) $(OBJD)/isms3.o
ISMDT = $(DISM) $(OBJD)/ismt.o
ISMSS = $(SISM) $(OBJS)/isms.o
ISMSS2 = $(SISM) $(OBJS)/isms2.o
ISMSS3 = $(SISM) $(OBJS)/isms3.o
ISMST = $(SISM) $(OBJS)/ismt.o

RISMDS = $(OBJD)/isms.o -L$(OBJD) $(LIBS)
RISMDS2 = $(OBJD)/isms2.o -L$(OBJD) $(LIBS)
RISMDS3 = $(OBJD)/isms3.o -L$(OBJD) $(LIBS)
RISMDT = $(OBJD)/ismt.o -L$(OBJD) $(LIBS)
RISMSS = $(OBJS)/isms.o -L$(OBJS) $(LIBS)
RISMSS2 = $(OBJS)/isms2.o -L$(OBJS) $(LIBS)
RISMSS3 = $(OBJS)/isms3.o -L$(OBJS) $(LIBS)
RISMST = $(OBJS)/ismt.o -L$(OBJS) $(LIBS)

SUCC = precision version) compiled successfully
SUCC_CUTEST = precision version) for CUTEst compiled successfully

#  main compilations and runs

all: ism_cutest
all_ism: ism_cutest
test: test_ism
test_nocutest: test_ism_nocutest

# ism

ism_cutest: ism_cutest_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: ISM ($(PRECIS) $(SUCC_CUTEST)"
ism_cutest_single: $(ISMOBJECTSS_CUTEST)
	$(RANLIB) $(LGS)
ism_cutest_double: $(ISMOBJECTSD_CUTEST)
	$(RANLIB) $(LGD)

ism_silent: ism_silent_$(PRECIS)
ism_silent_single: $(ISMOBJECTSS)
ism_silent_double: $(ISMOBJECTSD)

ism: ism_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: ISM ($(PRECIS) $(SUCC)"
ism_single: $(ISMOBJECTSS)
	$(RANLIB) $(LGS)
ism_double: $(ISMOBJECTSD)
	$(RANLIB) $(LGD)

ismsrunall: ismss ismss2 ismss3 ismds ismds2 ismds3
ismdrunall: ismds ismdt
ismrunall: ismdrunall ismsrunall

test_ism: test_ism_$(PRECIS)

test_ism_single: ismst $(SRUNISM)
	echo ""
	echo " Testing CUTEst interface to ism"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) ism -s QPBAND
	echo ""
	echo " Tests for ism complete"

test_ism_double: ismdt $(DRUNISM)
	echo ""
	echo " Testing CUTEst interface to ism"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) ism QPBAND
	echo ""
	echo " Tests for ism complete"

test_ism_nocutest: test_ism_nocutest_$(PRECIS)

test_ism_nocutest_single: ismst
	echo ""
	echo " Tests for ism complete"

test_ism_nocutest_double: ismdt
	echo ""
	echo " Tests for ism complete"

#  basic packages

basics:
	( cd ../../general ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            basics_silent PRECIS=$(PRECIS) PWD=$(PWD)/../../general )
linearsolver:
	( cd ../../general ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            linearsolver_silent PRECIS=$(PRECIS) PWD=$(PWD)/../../general )
gltr:
	( cd ../../gltr ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            gltr_silent PRECIS=$(PRECIS) PWD=$(PWD)/../../gltr )
trs:
	( cd ../../trs ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            trs_silent PRECIS=$(PRECIS) PWD=$(PWD)/../../trs )
tru:
	( cd ../../tru ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            tru_silent PRECIS=$(PRECIS) PWD=$(PWD)/../../tru )
psls:
	( cd ../../psls ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            psls_silent PRECIS=$(PRECIS) PWD=$(PWD)/../../psls )
mop:
	( cd ../../mop ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            mop.o PRECIS=$(PRECIS) PWD=$(PWD)/../../mop )
cutest_functions:
	( cd ../../auxiliary ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            cutest_functions_silent PRECIS=$(PRECIS) \
            PWD=$(PWD)/../../auxiliary )
copyright:
	( cd ../../general ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            copyright.o PRECIS=$(PRECIS) PWD=$(PWD)/../../general )

# run spec-sheet example tests

ismss: $(ISMSS)
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_ism $(RISMSS)
	- ./run_ism >& isms.output
	cat isms.output
	rm ./run_ism

ismss2: $(ISMSS2)
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_ism $(RISMSS2)
	- ./run_ism >& isms2.output
	cat isms2.output
	rm ./run_ism

ismss3: $(ISMSS3)
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_ism $(RISMSS3)
	- ./run_ism >& isms3.output
	cat isms3.output
	rm ./run_ism

ismst: $(ISMST)
	echo " Exhaustive test of subroutine interface to ism"
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_ism $(RISMST)
	- ./run_ism >& ismt.output
	cat ismt.output
	rm ./run_ism

ismds: $(ISMDS)
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_ism $(RISMDS)
	- ./run_ism >& ismds.output
	cat ismds.output
	rm ./run_ism

ismds2: $(ISMDS2)
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_ism $(RISMDS2)
	- ./run_ism >& ismds2.output
	cat ismds2.output
	rm ./run_ism

ismds3: $(ISMDS3)
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_ism $(RISMDS3)
	- ./run_ism >& ismds3.output
	cat ismds3.output
	rm ./run_ism

ismdt: $(ISMDT)
	echo " Exhaustive test of subroutine interface to ism"
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_ism $(RISMDT)
	- ./run_ism >& ismdt.output
	cat ismdt.output
	rm ./run_ism

#  Substantial GALAHAD packages

ism.o: $(LG)(ism.o)

$(LG)(ism.o): ../ism/ism.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "ism   "
	$(SED) -f $(SEDS) ../ism/ism.f90 > $(OBJ)/ism1.f90
	$(SED) -f $(LSEDS) $(OBJ)/ism1.f90 > $(OBJ)/ism2.f90
	$(SED) -f $(LPSEDS) $(OBJ)/ism2.f90 > $(OBJ)/ism3.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/ism3.f90 > $(OBJ)/ism.f90
	cd $(OBJ); $(FORTRAN) -o ism.o $(FFLAGSS) ism.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o ism.o $(FFLAGSN) ism.f90 )
	cd $(OBJ); $(ARR) ism.o ; $(RM) ism.f90 ism1.f90 ism2.f90 \
                                          ism3.f90 ism.o
	$(RMARFILE) useism.o
	$(RMOBFILE) isms.o
	$(RMOBFILE) ismt.o
	$(MVMODS)
	@printf '[ OK ]\n'

# CUTEst/AMPL interfaces

useism.o: $(LG)(useism.o)

$(LG)(useism.o): ../ism/useism.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "useism   "
	$(SED) -f $(SEDS) ../ism/useism.f90 > $(OBJ)/useism1.f90
	$(SED) -f $(LSEDS) $(OBJ)/useism1.f90 > $(OBJ)/useism2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/useism2.f90 > $(OBJ)/useism.f90
	cd $(OBJ); $(FORTRAN) -o useism.o $(FFLAGSS) useism.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o useism.o $(FFLAGSN) useism.f90 )
	cd $(OBJ); $(ARR) useism.o ; $(RM) useism.f90 useism1.f90 \
                                       useism2.f90 useism.o
	$(RMOBFILE) runism_sif.o
	$(MVMODS)
	@printf '[ OK ]\n'

#  main programs

runism_sif.o: $(OBJ)/runism_sif.o

$(OBJ)/runism_sif.o: ../ism/runism_sif.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "runism_sif"
	$(SED) -f $(SEDS) ../ism/runism_sif.f90 > $(OBJ)/runism_sif.f90
	cd $(OBJ); $(FORTRAN) -o runism_sif.o $(FFLAGSS) runism_sif.f90
	rm $(OBJ)/runism_sif.f90
	@printf '[ OK ]\n'

#  test decks

isms.o: $(OBJ)/isms.o

$(OBJ)/isms.o: ../ism/isms.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "isms  "
	$(SED) -f $(SEDS) ../ism/isms.f90 > $(OBJ)/isms1.f90
	$(SED) -f $(LSEDS) $(OBJ)/isms1.f90 > $(OBJ)/isms.f90
	cd $(OBJ) ; $(FORTRAN) -o isms.o $(FFLAGS) isms.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

isms2.o: $(OBJ)/isms2.o

$(OBJ)/isms2.o: ../ism/isms2.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "isms2  "
	$(SED) -f $(SEDS) ../ism/isms2.f90 > $(OBJ)/isms1.f90
	$(SED) -f $(LSEDS) $(OBJ)/isms1.f90 > $(OBJ)/isms2.f90
	cd $(OBJ) ; $(FORTRAN) -o isms2.o $(FFLAGS) isms2.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

isms3.o: $(OBJ)/isms3.o

$(OBJ)/isms3.o: ../ism/isms3.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "isms3  "
	$(SED) -f $(SEDS) ../ism/isms3.f90 > $(OBJ)/isms1.f90
	$(SED) -f $(LSEDS) $(OBJ)/isms1.f90 > $(OBJ)/isms3.f90
	cd $(OBJ) ; $(FORTRAN) -o isms3.o $(FFLAGS) isms3.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

ismt.o: $(OBJ)/ismt.o

$(OBJ)/ismt.o: ../ism/ismt.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "ismt  "
	$(SED) -f $(SEDS) ../ism/ismt.f90 > $(OBJ)/ismt1.f90
	$(SED) -f $(LSEDS) $(OBJ)/ismt1.f90 > $(OBJ)/ismt.f90
	cd $(OBJ) ; $(FORTRAN) -o ismt.o $(FFLAGSS) ismt.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

#  book keeping

clean:
	@printf ' %-9s\t\t' "Cleaning"
	$(RM) $(LG) $(OBJ)/ismt.o $(OBJ)/isms.o
	@printf '[ OK ]\n'

cleanall:
	@printf ' %-14s\t\t' "Removing all $(PRECIS) precision object and module files"
	$(RM) $(OBJ)/* $(MOD)/*
	@printf '[ OK ]\n'

rmism:
	@printf ' %-9s %-15s\t\t' "Removing" "ism from archive "
	$(RMARFILE) ism.o
	@printf '[ OK ]\n'

