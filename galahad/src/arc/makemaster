#  Main body of the installation makefile for the GALAHAD ARC package

#  N. Gould, D. Orban and Ph. L. Toint.
#  This version: 19 X 2008

SHELL = /bin/$(BINSHELL)

#  compiler flags

FFLAGS    = $(BASIC) $(OPTIMIZATION) $(DEBUG) $(MODULES) $(F90) $(USUAL)
FFLAGSS   = $(BASIC) $(OPTIMIZATION) $(DEBUG) $(MODULES) $(F90) $(SPECIAL)
FFLAGSN   = $(BASIC) $(NOOPTIMIZATION) $(DEBUG) $(MODULES) $(F90)
FFLAGS77  = $(BASIC) $(OPTIMIZATION) $(DEBUG) $(MODULES) $(F77) $(USUAL)
FFLAGS77S = $(BASIC) $(OPTIMIZATION) $(DEBUG) $(MODULES) $(F77) $(SPECIAL)
FFLAGSOMP = $(BASIC) $(OPTIMIZATION) $(DEBUG) $(MODULES) $(F90) $(USUAL) \
            $(OPENMP)
RUNFFLAGS =          $(OPTIMIZATION) $(DEBUG) $(MODULES)
#RUNFFLAGS =          $(OPTIMIZATION) $(DEBUG) $(MODULES) -L/usr/lib -llapack
RUNFFLAGSOMP =       $(OPTIMIZATION) $(DEBUG) $(MODULES) $(OPENMP)

#  names of random libraries

LG  = $(OBJ)/libgalahad.a
LGS = $(OBJS)/libgalahad.a
LGD = $(OBJD)/libgalahad.a

BLG  = $(OBJ)/libgalahad_blas.a
BLGS = $(OBJS)/libgalahad_blas.a
BLGD = $(OBJD)/libgalahad_blas.a

LLG  = $(OBJ)/libgalahad_lapack.a
LLGS = $(OBJS)/libgalahad_lapack.a
LLGD = $(OBJD)/libgalahad_lapack.a

HLG  = $(OBJ)/libgalahad_hsl.a
HLGS = $(OBJS)/libgalahad_hsl.a
HLGD = $(OBJD)/libgalahad_hsl.a

MLG  = $(OBJ)/libgalahad_metis.a
MLGS = $(OBJS)/libgalahad_metis.a
MLGD = $(OBJD)/libgalahad_metis.a

#  Libraries used

LIBS = -lgalahad $(HSL) $(SPRAL) $(PARDISO) $(WSMP) $(METIS) $(LAPACK) $(BLAS)

#  Archive manipulation strings

ARR = $(AR) $(ARREPFLAGS) $(LG)
RMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $(LG)
RMOBFILE = $(GALAHAD)/bin/rmobfile $(RM) $(OBJ)

BARR = $(AR) $(ARREPFLAGS) $(BLG)
BRMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $(BLG)

LARR = $(AR) $(ARREPFLAGS) $(LLG)
LRMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $(LLG)

HARR = $(AR) $(ARREPFLAGS) $(HLG)
HRMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $(HLG)

MARR = $(AR) $(ARREPFLAGS) $(MLG)
MRMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $MHLG)

#  sed scripts

LSEDS = $(GALAHAD)/seds/$(LINEARSOLVER).sed
LPSEDS = $(GALAHAD)/seds/$(LINEARSOLVER)_precon.sed

#  compilation agenda

SARC = basics glrt psls dps nlpt $(LGS)(arc.o)
DARC = basics glrt psls dps nlpt $(LGD)(arc.o)

SRUNARC = cutest_functions copyright $(LGS)(usearc.o) $(OBJS)/runarc_sif.o
DRUNARC = cutest_functions copyright $(LGD)(usearc.o) $(OBJD)/runarc_sif.o

ARCOBJECTSS = $(SARC)
ARCOBJECTSD = $(DARC)
ARCOBJECTSS_CUTEST = $(SARC) $(SRUNARC)
ARCOBJECTSD_CUTEST = $(DARC) $(DRUNARC)

OBJECTSS_CUTEST = $(ARCOBJECTSS_CUTEST)
OBJECTSD_CUTEST = $(ARCOBJECTSD_CUTEST)

ARCDS = $(DARC) $(OBJD)/arcs.o
ARCDT = $(DARC) $(OBJD)/arct.o
ARCSS = $(SARC) $(OBJS)/arcs.o
ARCST = $(SARC) $(OBJS)/arct.o

RARCDS = $(OBJD)/arcs.o -L$(OBJD) $(LIBS)
RARCDT = $(OBJD)/arct.o -L$(OBJD) $(LIBS)
RARCSS = $(OBJS)/arcs.o -L$(OBJS) $(LIBS)
RARCST = $(OBJS)/arct.o -L$(OBJS) $(LIBS)

SUCC = precision version) compiled successfully
SUCC_CUTEST = precision version) for CUTEst compiled successfully

#  main compilations and runs

all: arc_cutest
all_arc: arc_cutest
test: test_arc
test_nocutest: test_arc_nocutest

# arc

arc_cutest: arc_cutest_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: ARC ($(PRECIS) $(SUCC_CUTEST)"
arc_cutest_single: $(ARCOBJECTSS_CUTEST)
	$(RANLIB) $(LGS)
arc_cutest_double: $(ARCOBJECTSD_CUTEST)
	$(RANLIB) $(LGD)

arc_silent: arc_silent_$(PRECIS)
arc_silent_single: $(ARCOBJECTSS)
arc_silent_double: $(ARCOBJECTSD)

arc: arc_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: ARC ($(PRECIS) $(SUCC)"
arc_single: $(ARCOBJECTSS)
	$(RANLIB) $(LGS)
arc_double: $(ARCOBJECTSD)
	$(RANLIB) $(LGD)

arcsrunall: arcss arcst
arcdrunall: arcds arcdt
arcrunall: arcdrunall arcsrunall

test_arc: test_arc_$(PRECIS)

test_arc_single: arcst $(SRUNARC)
	echo ""
	echo " Testing CUTEst interface to arc"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) arc -s QPBAND
	echo ""
	echo " Tests for arc complete"

test_arc_double: arcdt $(DRUNARC)
	echo ""
	echo " Testing CUTEst interface to arc"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) arc QPBAND
	echo ""
	echo " Tests for arc complete"

test_arc_nocutest: test_arc_nocutest_$(PRECIS)

test_arc_nocutest_single: arcst
	echo ""
	echo " Tests for arc complete"

test_arc_nocutest_double: arcdt
	echo ""
	echo " Tests for arc complete"

#  basic packages

basics:
	( cd ../general ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            basics_silent PRECIS=$(PRECIS) PWD=$(PWD)/../general )
linearsolver:
	( cd ../general ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            linearsolver_silent PRECIS=$(PRECIS) PWD=$(PWD)/../general )
ir:
	( cd ../ir ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            ir_silent PRECIS=$(PRECIS) PWD=$(PWD)/../ir )
glrt:
	( cd ../glrt ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            glrt_silent PRECIS=$(PRECIS) PWD=$(PWD)/../glrt )
psls:
	( cd ../psls ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            psls_silent PRECIS=$(PRECIS) PWD=$(PWD)/../psls )
dps:
	( cd ../dps ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            dps_silent PRECIS=$(PRECIS) PWD=$(PWD)/../dps )
nlpt:
	( cd ../filtrane ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            nlpt.o PRECIS=$(PRECIS) PWD=$(PWD)/../filtrane )
cutest_functions:
	( cd ../auxiliary ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            cutest_functions_silent PRECIS=$(PRECIS) PWD=$(PWD)/../auxiliary )
copyright:
	( cd ../general ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            copyright.o PRECIS=$(PRECIS) PWD=$(PWD)/../general )

# run spec-sheet example tests

arcss: $(ARCSS)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_arc $(RARCSS)
	- ./run_arc >& arcs.output
	cat arcs.output
	rm ./run_arc

arcst: $(ARCST)
	echo " Exhaustive test of subroutine interface to arc"
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_arc $(RARCST)
	- ./run_arc >& arct.output
	cat arct.output
	rm ./run_arc

arcds: $(ARCDS)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_arc $(RARCDS)
	- ./run_arc >& arcds.output
	cat arcds.output
	rm ./run_arc

arcdt: $(ARCDT)
	echo " Exhaustive test of subroutine interface to arc"
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_arc $(RARCDT)
	- ./run_arc
#	- ./run_arc >& arcdt.output
#	cat arcdt.output
	rm ./run_arc

#  Substantial GALAHAD packages

arc.o: $(LG)(arc.o)

$(LG)(arc.o): ../arc/arc.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "arc   "
	$(SED) -f $(SEDS) ../arc/arc.f90 > $(OBJ)/arc1.f90
	$(SED) -f $(LSEDS) $(OBJ)/arc1.f90 > $(OBJ)/arc2.f90
	$(SED) -f $(LPSEDS) $(OBJ)/arc2.f90 > $(OBJ)/arc3.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/arc3.f90 > $(OBJ)/arc.f90
	cd $(OBJ); $(FORTRAN) -o arc.o $(FFLAGSS) arc.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o arc.o $(FFLAGSN) arc.f90 )
	cd $(OBJ); $(ARR) arc.o ; $(RM) arc.f90 arc1.f90 arc2.f90 \
                                          arc3.f90 arc.o
	$(RMARFILE) usearc.o
	$(RMOBFILE) arcs.o
	$(RMOBFILE) arct.o
	$(MVMODS)
	@printf '[ OK ]\n'

# CUTEst/AMPL interfaces

usearc.o: $(LG)(usearc.o)

$(LG)(usearc.o): ../arc/usearc.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "usearc   "
	$(SED) -f $(SEDS) ../arc/usearc.f90 > $(OBJ)/usearc1.f90
	$(SED) -f $(LSEDS) $(OBJ)/usearc1.f90 > $(OBJ)/usearc2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/usearc2.f90 > $(OBJ)/usearc.f90
	cd $(OBJ); $(FORTRAN) -o usearc.o $(FFLAGSOMP) usearc.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o usearc.o $(FFLAGSN) usearc.f90 )
	cd $(OBJ); $(ARR) usearc.o ; $(RM) usearc.f90 usearc1.f90 \
                                       usearc2.f90 usearc.o
	$(RMOBFILE) runarc_sif.o
	$(MVMODS)
	@printf '[ OK ]\n'

#  main programs

runarc_sif.o: $(OBJ)/runarc_sif.o

$(OBJ)/runarc_sif.o: ../arc/runarc_sif.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "runarc_sif"
	$(SED) -f $(SEDS) ../arc/runarc_sif.f90 > $(OBJ)/runarc_sif.f90
	cd $(OBJ); $(FORTRAN) -o runarc_sif.o $(FFLAGSS) runarc_sif.f90
	rm $(OBJ)/runarc_sif.f90
	@printf '[ OK ]\n'

#  test decks

arcs.o: $(OBJ)/arcs.o

$(OBJ)/arcs.o: ../arc/arcs.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "arcs  "
	$(SED) -f $(SEDS) ../arc/arcs.f90 > $(OBJ)/arcs1.f90
	$(SED) -f $(LSEDS) $(OBJ)/arcs1.f90 > $(OBJ)/arcs.f90
	cd $(OBJ) ; $(FORTRAN) -o arcs.o $(FFLAGS) arcs.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

arct.o: $(OBJ)/arct.o

$(OBJ)/arct.o: ../arc/arct.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "arct  "
	$(SED) -f $(SEDS) ../arc/arct.f90 > $(OBJ)/arct1.f90
	$(SED) -f $(LSEDS) $(OBJ)/arct1.f90 > $(OBJ)/arct.f90
	cd $(OBJ) ; $(FORTRAN) -o arct.o $(FFLAGSS) arct.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

#  book keeping

clean:
	@printf ' %-9s\t\t' "Cleaning"
	$(RM) $(LG) $(OBJ)/arct.o
	@printf '[ OK ]\n'

cleanall:
	@printf ' %-14s\t\t' "Removing all $(PRECIS) precision object and module files"
	$(RM) $(OBJ)/* $(MOD)/*
	@printf '[ OK ]\n'

rmarc:
	@printf ' %-9s %-15s\t\t' "Removing" "arc from archive "
	$(RMARFILE) rqs.o arc.o
	@printf '[ OK ]\n'
