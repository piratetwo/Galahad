#  Main body of the installation makefile for the GALAHAD SEC package

#  N. Gould, D. Orban and Ph. L. Toint.
#  This version: 17 VIII 2017

SHELL = /bin/$(BINSHELL)

#  compiler flags

FFLAGS    = $(BASIC) $(OPTIMIZATION) $(DEBUG) $(MODULES) $(F90) $(USUAL)
FFLAGSS   = $(BASIC) $(OPTIMIZATION) $(DEBUG) $(MODULES) $(F90) $(SPECIAL)
FFLAGSN   = $(BASIC) $(NOOPTIMIZATION) $(DEBUG) $(MODULES) $(F90)
FFLAGS77  = $(BASIC) $(OPTIMIZATION) $(DEBUG) $(MODULES) $(F77) $(USUAL)
FFLAGS77S = $(BASIC) $(OPTIMIZATION) $(DEBUG) $(MODULES) $(F77) $(SPECIAL)
FFLAGSOMP = $(BASIC) $(OPTIMIZATION) $(DEBUG) $(MODULES) $(F90) $(USUAL) \
            $(OPENMP)
FFLAGSNOMP = $(BASIC) $(NOOPTIMIZATION) $(DEBUG) $(MODULES) $(F90) $(OPENMP)
RUNFFLAGS  =         $(OPTIMIZATION) $(DEBUG) $(MODULES)
RUNFFLAGSOMP =       $(OPTIMIZATION) $(DEBUG) $(MODULES) $(OPENMP)

#  names of random libraries

LG  = $(OBJ)/libgalahad.a
LGS = $(OBJS)/libgalahad.a
LGD = $(OBJD)/libgalahad.a

BLG  = $(OBJ)/libgalahad_blas.a
BLGS = $(OBJS)/libgalahad_blas.a
BLGD = $(OBJD)/libgalahad_blas.a

LLG  = $(OBJ)/libgalahad_lapack.a
LLGS = $(OBJS)/libgalahad_lapack.a
LLGD = $(OBJD)/libgalahad_lapack.a

HLG  = $(OBJ)/libgalahad_hsl.a
HLGS = $(OBJS)/libgalahad_hsl.a
HLGD = $(OBJD)/libgalahad_hsl.a

MLG  = $(OBJ)/libgalahad_metis.a
MLGS = $(OBJS)/libgalahad_metis.a
MLGD = $(OBJD)/libgalahad_metis.a

#  Libraries used

LIBS = -lgalahad $(HSL) $(SPRAL) $(PARDISO) $(WSMP) $(METIS) $(LAPACK) $(BLAS)

#  Archive manipulation strings

ARR = $(AR) $(ARREPFLAGS) $(LG)
RMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $(LG)
RMOBFILE = $(GALAHAD)/bin/rmobfile $(RM) $(OBJ)

BARR = $(AR) $(ARREPFLAGS) $(BLG)
BRMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $(BLG)

LARR = $(AR) $(ARREPFLAGS) $(LLG)
LRMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $(LLG)

HARR = $(AR) $(ARREPFLAGS) $(HLG)
HRMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $(HLG)

MARR = $(AR) $(ARREPFLAGS) $(MLG)
MRMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $MHLG)

#  sed scripts

LSEDS = $(GALAHAD)/seds/$(LINEARSOLVER).sed
LPSEDS = $(GALAHAD)/seds/$(LINEARSOLVER)_precon.sed

#  compilation agenda

SSEC =  basics $(LGS)(sec.o)
DSEC =  basics $(LGD)(sec.o)
SSECC = basics cutest_functions $(LGS)(secc.o)
DSECC = basics cutest_functions $(LGD)(secc.o)

SRUNSEC = cutest_functions copyright $(LGS)(usesec.o) $(OBJS)/runsec_sif.o
DRUNSEC = cutest_functions copyright $(LGD)(usesec.o) $(OBJD)/runsec_sif.o

SECOBJECTSS_CUTEST = $(SSEC) $(SRUNSEC)
SECOBJECTSD_CUTEST = $(DSEC) $(DRUNSEC)

SECDS = $(DSEC) $(OBJD)/secs.o
SECCDS = $(DSECC) $(OBJD)/seccs.o
SECDS3 = $(DSEC) $(OBJD)/secs3.o
SECDT = $(DSEC) $(OBJD)/sect.o
SECSS = $(SSEC) $(OBJS)/secs.o
SECST = $(SSEC) $(OBJS)/sect.o

RSECDS = $(OBJD)/secs.o -L$(OBJD) $(LIBS)
RSECDS3 = $(OBJD)/secs3.o -L$(OBJD) $(LIBS)
RSECCDS = $(OBJD)/seccs.o -L$(OBJD) $(LIBS)
RSECDT = $(OBJD)/sect.o -L$(OBJD) $(LIBS)
RSECSS = $(OBJS)/secs.o -L$(OBJS) $(LIBS)
RSECST = $(OBJS)/sect.o -L$(OBJS) $(LIBS)

SUCC = precision version) compiled successfully
SUCC_CUTEST = precision version) for CUTEst compiled successfully

#  main compilations and runs

sec: sec.o
all: sec_cutest
test: test_sec
test_nocutest: test_sec
test_spec: test_sec_spec

# sec

sec_silent: sec_silent_$(PRECIS)
sec_silent_single: $(SSEC)
sec_silent_double: $(DSEC)

sec: sec_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: SEC ($(PRECIS) $(SUCC)"
sec_single: $(SSEC)
	$(RANLIB) $(LGS)
sec_double: $(DSEC)
	$(RANLIB) $(LGD)

sec_cutest: sec_cutest_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: SEC ($(PRECIS) $(SUCC_CUTEST)"
sec_cutest_single: $(SECOBJECTSS_CUTEST)
	$(RANLIB) $(LGS)
sec_cutest_double: $(SECOBJECTSD_CUTEST)
	$(RANLIB) $(LGD)

secsrunall: secss secst
secdrunall: secds secdt
secrunall: secdrunall secsrunall

test_sec: test_sec_$(PRECIS)

test_sec_single: secst
	echo " Tests for sec complete"

test_sec_double: secdt
	echo " Tests for sec complete"

test_sec_spec: test_sec_spec_$(PRECIS)
test_sec_spec_single: secss
test_sec_spec_double: secds

#  basic packages

basics:
	( cd ../general ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            basics_silent PRECIS=$(PRECIS) PWD=$(PWD)/../general )
cutest_functions:
	( cd ../auxiliary ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            cutest_functions_silent PRECIS=$(PRECIS) PWD=$(PWD)/../auxiliary )
copyright:
	( cd ../general ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            copyright.o PRECIS=$(PRECIS) PWD=$(PWD)/../general )

# run spec-sheet example tests

secds: $(SECDS)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_sec $(RSECDS)
#	- ./run_sec
	- ./run_sec >& secds.output
	cat secds.output
	rm ./run_sec

seccds: $(SECCDS)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_secc $(RSECCDS)
#	- ./run_secc
	- ./run_secc >& seccds.output
	cat seccds.output
	rm ./run_secc

secds3: $(SECDS3)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_sec $(RSECDS3)
#	- ./run_sec
	- ./run_sec >& secds3.output
	cat secds3.output
	rm ./run_sec

secdt: $(SECDT)
	echo " Exhaustive test of subroutine interface to sec"
	echo $(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_sec $(RSECDT)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_sec $(RSECDT)
	- ./run_sec >& secdt.output
	cat secdt.output
	rm ./run_sec

secss: $(SECSS)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_sec $(RSECSS)
	- ./run_sec >& secs.output
	cat secs.output
	rm ./run_sec

secst: $(SECST)
	echo " Exhaustive test of subroutine interface to sec"
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_sec $(RSECST)
	- ./run_sec >& sect.output
	cat sect.output
	rm ./run_sec

#  Substantial GALAHAD packages

sec.o: $(LG)(sec.o)

$(LG)(sec.o):  ../sec/sec.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "sec  "
	$(SED) -f $(SEDS)  ../sec/sec.f90 > $(OBJ)/sec1.f90
	$(SED) -f $(LSEDS) $(OBJ)/sec1.f90 > $(OBJ)/sec2.f90
	$(SED) -f $(LPSEDS) $(OBJ)/sec2.f90 > $(OBJ)/sec3.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/sec3.f90 > $(OBJ)/sec.f90
	cd $(OBJ); $(FORTRAN) -o sec.o $(FFLAGSS) sec.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o sec.o $(FFLAGSN) sec.f90 )
	cd $(OBJ); $(ARR) sec.o ; $(RM) sec.f90 sec1.f90 sec2.f90 \
                                         sec3.f90 sec.o
	$(RMARFILE) tru.o
	$(RMARFILE) arc.o
	$(RMARFILE) usesec.o
	$(RMOBFILE) secs.o
	$(RMOBFILE) sect.o
	$(MVMODS)
	@printf '[ OK ]\n'

secc.o: $(LG)(secc.o)

$(LG)(secc.o):  ../sec/secc.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "secc  "
	$(SED) -f $(SEDS)  ../sec/secc.f90 > $(OBJ)/secc1.f90
	$(SED) -f $(LSEDS) $(OBJ)/secc1.f90 > $(OBJ)/secc2.f90
	$(SED) -f $(LPSEDS) $(OBJ)/secc2.f90 > $(OBJ)/secc3.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/secc3.f90 > $(OBJ)/secc.f90
	cd $(OBJ); $(FORTRAN) -o secc.o $(FFLAGSS) secc.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o secc.o $(FFLAGSN) secc.f90 )
	cd $(OBJ); $(ARR) secc.o ; $(RM) secc.f90 secc1.f90 secc2.f90 \
                                         secc3.f90 secc.o
	$(RMARFILE) tru.o
	$(RMARFILE) arc.o
	$(RMARFILE) usesecc.o
	$(RMOBFILE) seccs.o
	$(RMOBFILE) secct.o
	$(MVMODS)
	@printf '[ OK ]\n'

# CUTEst/AMPL interfaces

usesec.o: $(LG)(usesec.o)

$(LG)(usesec.o): ../sec/usesec.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "usesec   "
	$(SED) -f $(SEDS) ../sec/usesec.f90 > $(OBJ)/usesec1.f90
	$(SED) -f $(LSEDS) $(OBJ)/usesec1.f90 > $(OBJ)/usesec2.f90
	$(SED) "s/^.$(NOT95)/     /" $(OBJ)/usesec2.f90 > $(OBJ)/usesec.f90
	cd $(OBJ); $(FORTRAN) -o usesec.o $(FFLAGSS) usesec.f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o usesec.o $(FFLAGSN) usesec.f90 )
	cd $(OBJ); $(ARR) usesec.o ; $(RM) usesec.f90 usesec1.f90 \
                                           usesec2.f90 usesec.o
	$(RMOBFILE) runsec_sif.o
	$(MVMODS)
	@printf '[ OK ]\n'

#  main programs

runsec_sif.o: $(OBJ)/runsec_sif.o

$(OBJ)/runsec_sif.o: ../sec/runsec_sif.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "runsec_sif"
	$(SED) -f $(SEDS) ../sec/runsec_sif.f90 > $(OBJ)/runsec_sif.f90
	cd $(OBJ); $(FORTRAN) -o runsec_sif.o $(FFLAGSS) runsec_sif.f90
	rm $(OBJ)/runsec_sif.f90
	@printf '[ OK ]\n'

#  test decks

secs.o: $(OBJ)/secs.o

$(OBJ)/secs.o: ../sec/secs.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "secs  "
	$(SED) -f $(SEDS) ../sec/secs.f90 > $(OBJ)/secs1.f90
	$(SED) -f $(LSEDS) $(OBJ)/secs1.f90 > $(OBJ)/secs.f90
	cd $(OBJ) ; $(FORTRAN) -o secs.o $(FFLAGS) secs.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

seccs.o: $(OBJ)/seccs.o

$(OBJ)/seccs.o: ../sec/seccs.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "seccs  "
	$(SED) -f $(SEDS) ../sec/seccs.f90 > $(OBJ)/seccs1.f90
	$(SED) -f $(LSEDS) $(OBJ)/seccs1.f90 > $(OBJ)/seccs.f90
	cd $(OBJ) ; $(FORTRAN) -o seccs.o $(FFLAGS) seccs.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

secs3.o: $(OBJ)/secs3.o

$(OBJ)/secs3.o: ../sec/secs3.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "secs3  "
	$(SED) -f $(SEDS) ../sec/secs3.f90 > $(OBJ)/secs1.f90
	$(SED) -f $(LSEDS) $(OBJ)/secs1.f90 > $(OBJ)/secs3.f90
	cd $(OBJ) ; $(FORTRAN) -o secs3.o $(FFLAGS) secs3.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

sect.o: $(OBJ)/sect.o

$(OBJ)/sect.o: ../sec/sect.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "sect  "
	$(SED) -f $(SEDS) ../sec/sect.f90 > $(OBJ)/sect1.f90
	$(SED) -f $(LSEDS) $(OBJ)/sect1.f90 > $(OBJ)/sect.f90
	cd $(OBJ) ; $(FORTRAN) -o sect.o $(FFLAGSS) sect.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

#  generate HSL codes from GALAHAD ones

hslgen:
	$(SED) -f ../hsl/gal2hsl ../eqp/sec.f90 > ../hsl/hsl_ve16/ve16d.f90
	$(SED) -f ../hsl/gal2hsl ../sbls/sbls.f90 > ../hsl/hsl_mi14/mi14d.f90

#  book keeping

clean:
	@printf ' %-9s\t\t' "Cleaning"
	$(RM) $(LGS) $(LGD) $(LG) $(OBJ)/secs.o $(OBJ)/seccs.o $(OBJ)/sect.o
	@printf '[ OK ]\n'

cleanall:
	@printf ' %-14s\t\t' "Removing all $(PRECIS) precision object and module files"
	$(RM) $(OBJ)/* $(MOD)/*
	@printf '[ OK ]\n'

rmsec:
	@printf ' %-9s %-15s\t\t' "Removing" "sec from archive "
	$(RMARFILE) sec.o
	@printf '[ OK ]\n'
