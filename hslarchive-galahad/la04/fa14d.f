! COPYRIGHT (c) 1979 AEA Technology and
! Council for the Central Laboratory of the Research Councils
!
! Version 1.0.1
! See ChangeLog for version history
!
      DOUBLE PRECISION FUNCTION FA14AD(IX,I)
C         NEARLY PORTABLE RANDOM NUMBER GENERATOR USING THE RECURSION
C                       IX=IX*A MOD P
C
C    WHERE A=7**5
C    AND P=2**31-1.
C
C         THIS FUNCTION DOES NOT ADHERE TO THE ANSI STANDARD 1966 IN
C    TWO RESPECTS:
C      1) IT ASSUMES AN INTEGER WORD LENGTH OF AT LEAST 32 BITS (I.E.
C    INTEGERS WHICH LIE IN THE RANGE 1-2**31 TO 2**31-1 INCLUSIVE MUST
C    BE REPRESENTABLE);
C      2) IT ASSUMES THAT A POSITIVE INTEGER LESS THAN 2**16 MAY BE
C    FLOATED WITHOUT LOSS OF DIGITS.
C
C         THIS CODE IS BASED ON CODE PUBLISHED BY LINUS SCHRAGE IN
C    T.O.M.S. VOL.5 NO.2 JUNE 1979 (PP 132-138)
C
C
C
C       THE FUNCTION IS USED AS FOLLOWS:
C
C                      R=FA14AD(IX,I)
C
C       WHERE IX IS THE GENERATOR WORD
C             I IS AN INTEGER SET BY THE USER.
C
C
C       THE VALUE RETURNED BY FA14A/AD WILL LIE IN THE RANGE
C                (0.,1.)  IF I IS NON-NEGATIVE
C                (-1.,1.) IF I IS NEGATIVE.
C
C       THE METHOD EMPLOYED IS A MULTIPLICATIVE CONGRUENTIAL
C   ONE USING A MULTIPLIER OF 7**5 AND TAKING THE MODULO TO
C   2**31-1, I.E. THE GENERATOR NUMBER , G = IX, IS UPDATED ON
C   EACH CALL TO THE VALUE
C
C                  5          31
C               G*7  MODULO (2  -1)
C
C       THE RESULT RETURNED IS CALCULATED AS A DOUBLE
C  PRECISION NUMBER HAVING THE VALUE
C
C                      31
C                  G/(2   -1)    IF THE ARGUMENT IS
C                                NON-NEGATIVE
C           OR
C                      31
C                2*G/(2   -1)-1  IF THE ARGUMENT IS NEGATIVE
C
C
C 7**5, 2**15, 2**16, 2**31-1
C     .. Parameters ..
      INTEGER A,B15,B16,P
      PARAMETER (A=16807,B15=32768,B16=65536,P=2147483647)
C     ..
C     .. Scalar Arguments ..
      INTEGER IX,I
C     ..
C     .. Local Scalars ..
      DOUBLE PRECISION X
      INTEGER FHI,K,LEFTLO,XALO,XHI
C     ..
C     .. Intrinsic Functions ..
      INTRINSIC FLOAT
C     ..
C     .. Executable Statements ..
C
C GET 15 HI ORDER BITS OF IX
      XHI = IX/B16
C GET 16 LO BITS OF IX AND FORM LO PRODUCT
      XALO = (IX-XHI*B16)*A
C GET 15 HI ORDER BITS OF LO PRODUCT
      LEFTLO = XALO/B16
C     FORM THE 31 HIGHEST BITS OF FULL PRODUCT
      FHI = XHI*A + LEFTLO
C GET OVERFLOPAST 31ST BIT OF FULL PRODUCT
      K = FHI/B15
C ASSEMBLE ALL THE PARTS AND PRESUBTRACT P
C THE PARENTHESES ARE ESSENTIAL
      IX = (((XALO-LEFTLO*B16)-P)+ (FHI-K*B15)*B16) + K
C ADD P BACK IN IF NECCESSARY
      IF (IX.LT.0) IX = IX + P
C MULTIPLY BY 1/(2**31-1)
      XHI = IX/B16
      X = (FLOAT(XHI)*65536.0D0) + FLOAT(IX-XHI*B16)
      IF (I.GE.0) FA14AD = X*4.6566128752457969241D-10
      IF (I.LT.0) FA14AD = X*9.3132257504915938482D-10 - 1.0D0
      RETURN

      END
      SUBROUTINE FA14BD(IX,MAX,NRAND)
C         NEARLY PORTABLE RANDOM NUMBER GENERATOR USING THE RECURSION
C                       IX=IX*A MOD P
C
C    WHERE A=7**5
C    AND P=2**31-1.
C
C         THIS SUBROUTINE DOES NOT ADHERE TO THE ANSI STANDARD 1966
C    IN ONE RESPECT:
C         IT ASSUMES AN INTEGER WORD LENGTH OF AT LEAST 32 BITS (I.E.
C    INTEGERS WHICH LIE IN THE RANGE 1-2**31 TO 2**31-1 INCLUSIVE MUST
C    BE REPRESENTABLE).
C
C         THIS CODE IS BASED ON CODE PUBLISHED BY LINUS SCHRAGE IN
C    T.O.M.S. VOL.5 NO.2 JUNE 1979 (PP 132-138)
C
C
C       THE FUNCTION IS USED AS FOLLOWS:
C
C                  CALL FA14BD(IX,MAX,NRAND)
C
C       WHERE IX    IS THE GENERATOR WORD
C             MAX   IS AN INTEGER SET BY THE USER AND
C             NRAND IS AN INTEGER SET BY FA14B/BD.
C
C
C       THE VALUE OF NRAND RETURNED BY FA14B/BD WILL LIE IN THE
C   RANGE
C                        (1,MAX)
C
C       THE METHOD EMPLOYED IS A MULTIPLICATIVE CONGRUENTIAL
C   ONE USING A MULTIPLIER OF 7**5 AND TAKING THE MODULO TO
C   2**31-1, I.E. THE GENERATOR NUMBER , G = IX, IS UPDATED ON
C   EACH CALL TO THE VALUE
C
C                  5          31
C               G*7  MODULO (2  -1)
C
C       THE RESULT RETURNED IS AN INTEGER NUMBER
C   HAVING THE VALUE
C
C                        31
C   INT. PART( (MAX*G)/(2   -1) ) + 1
C
C
C 7**5, 2**15, 2**16, 2**31-1
C 2**30,  2**30-1
C     .. Parameters ..
      INTEGER A,B15,B16,P
      PARAMETER (A=16807,B15=32768,B16=65536,P=2147483647)
      INTEGER B30,Q
      PARAMETER (B30=1073741824,Q=1073741823)
C     ..
C     .. Scalar Arguments ..
      INTEGER IX,MAX,NRAND
C     ..
C     .. Local Scalars ..
      INTEGER BE1,BE2,C,D,F,FHI,G,K,LEFTLO,MHI,MLO,MU,NU,XALO,XHI,XLO
C     ..
C     .. Executable Statements ..
C
C GET 15 HI ORDER BITS OF IX
      XHI = IX/B16
C GET 16 LO BITS OF IX AND FORM LO PRODUCT
      XALO = (IX-XHI*B16)*A
C GET 15 HI ORDER BITS OF LO PRODUCT
      LEFTLO = XALO/B16
C     FORM THE 31 HIGHEST BITS OF FULL PRODUCT
      FHI = XHI*A + LEFTLO
C GET OVERFLOPAST 31ST BIT OF FULL PRODUCT
      K = FHI/B15
C ASSEMBLE ALL THE PARTS AND PRESUBTRACT P
C THE PARENTHESES ARE ESSENTIAL
      IX = (((XALO-LEFTLO*B16)-P)+ (FHI-K*B15)*B16) + K
C ADD P BACK IN IF NECCESSARY
      IF (IX.LT.0) IX = IX + P
C MULTIPLY BY MAX AND DIVIDE BY 2**31-1 IN INTEGER ARITHMETIC
C SPLIT IX AND MAX INTO HI AND LO PARTS
      XHI = IX/B15
      XLO = IX - B15*XHI
      MHI = MAX/B15
      MLO = MAX - B15*MHI
C CALCULATE INTERMEDIATE PRODUCT AND SPLIT INTO HI AND LO PARTS
C PRESUBTRACT P
      F = (XHI*MLO-P) + XLO*MHI
C F IS > 0 IF INTERMEDIATE PRODUCT WOULD HAVE OVERFLOWED
      IF (F.GT.0) GO TO 1
      F = F + P
      BE1 = F/B15
      BE2 = F - BE1*B15
      GO TO 2

    1 F = F - 1
      BE1 = F/B15
      BE2 = F - BE1*B15
      BE1 = BE1 + B16
C FORM PRODUCT OF LO PARTS AND ADD IN LO PART OF INTERMEDIATE PRODUCT
C TO GET LO PART OF COMPLETE PRODUCT
    2 G = B15*BE2 + XLO*MLO
C REPRESENT LO PART OF FULL PRODUCT IN BASE 2**30
      D = G/B30
      C = XHI/2
C CALCULATE FULL PRODUCT DIVIDED BY 2**30
      F = ((2* (C*MHI-Q)-1)+MHI* (XHI-2*C)) + D + BE1
C GET FULL PRODUCT DIVIDED IN BASE 2**31
      IF (F.GT.0) GO TO 3
      F = F + P
      NU = F/2
      MU = F - NU*2
      GO TO 4

    3 F = F - 1
      NU = F/2
      MU = F - 2*NU
      NU = NU + B30
C CALCULATE REMAINDER OF PRODUCT DIVIDED BY 2**31
    4 F = (B30*MU-P) + NU + (G-B30*D)
      NRAND = NU + 1
C  ADD ONE IF REMAINDER IS NOT < 2**31-1
      IF (F.GE.0) NRAND = NRAND + 1
      RETURN

      END
      SUBROUTINE FA14CD(IX,IGEN)
C        FA14CD IS A SUBROUTINE USED IN CONJUNCTION WITH FA14AD OR
C   FA14BD. IT PROVIDES THE USER WITH THE FACILITY OF SAVING THE
C   CURRENT VALUE OF THE GENERATOR NUMBER USED BY FA14AD AND FA14BD.
C
C        USE OF THE ROUTINE IS AS FOLLOWS:
C
C                       CALL FA14CD(IGEN)
C
C     WHERE IX   IS THE GENERATOR WORD
C           IGEN IS AN INTEGER WHICH IS SET BY FA14C/CD TO THE CURRENT
C                VALUE OF THE GENERATOR.
C
C
C     .. Scalar Arguments ..
      INTEGER IX,IGEN
C     ..
C     .. Executable Statements ..
      IGEN = IX
      RETURN

      END
      SUBROUTINE FA14DD(IX,IGEN)
C        FA14DD IS A SUBROUTINE USED IN CONJUNCTION WITH FA14AD OR
C   FA14BD. IT PROVIDES THE USER WITH THE FACILITY OF SETTING THE
C   CURRENT VALUE OF THE GENERATOR NUMBER USED BY FA14AD AND FA14BD.
C
C        USE OF THE ROUTINE IS AS FOLLOWS:
C
C                       CALL FA14DD(IGEN)
C
C    WHERE IX   IS THE GENERATOR WORD
C          IGEN IS AN INTEGER, SET BY THE USER TO THE VALUE TO WHICH
C               THE GENERATOR IS TO BE SET. IT IS RECOMMENDED THAT THIS
C               VALUE BE OBTAINED BY A PREVIOUS CALL TO FA14C/CD.
C
C     .. Scalar Arguments ..
      INTEGER IX,IGEN
C     ..
C     .. Executable Statements ..
      IX = IGEN
      RETURN

      END
      SUBROUTINE FA14ID(IX)
C        FA14ID IS A SUBROUTINE USED TO INITIALIZE THE GENERATOR WORD US
C   BY FA14AD AND FA14BD. IT MUST BE CALLED FIRST BEFORE ANY OF THE OTHE
C   ENTRIES ARE CALLED.
C
C        USE OF THE ROUTINE IS AS FOLLOWS:
C
C                       CALL FA14ID(IX)
C
C    WHERE IX   IS THE GENERATOR WORD
C
C     .. Scalar Arguments ..
      INTEGER IX
C     ..
C     .. Executable Statements ..
      IX = 1
      RETURN

      END
